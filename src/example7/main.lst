
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800010c l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
2000001c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /var/folders/8f/zhq2rlhx6sl47y8ztwk74bcr0000gn/T//ccwxblJX.o
f108f85f l       *ABS*	00000000 BootRAM
080021b2 l       .text	00000000 LoopCopyDataInit
080021aa l       .text	00000000 CopyDataInit
080021ca l       .text	00000000 LoopFillZerobss
080021c4 l       .text	00000000 FillZerobss
080021f4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32l1xx_gpio.c
00000000 l    df *ABS*	00000000 stm32l1xx_pwr.c
00000000 l    df *ABS*	00000000 stm32l1xx_rcc.c
20000000 l     O .data	00000009 PLLMulTable
2000000c l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32l1xx_tim.c
00000000 l    df *ABS*	00000000 stm32l1xx_lcd.c
00000000 l    df *ABS*	00000000 _thumb1_case_uhi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
080015c4 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
08001660 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 discoverylcd.c
00000000 l    df *ABS*	00000000 mini-printf.c
08001ea4 l     F .text	00000024 _putc.6581
08001ec8 l     F .text	00000032 _puts.6585
08001efa l     F .text	00000090 mini_itoa.part.0
00000000 l    df *ABS*	00000000 system_stm32l1xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /Users/nathanogates/Development/embedded/redux/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /Users/nathanogates/Development/embedded/redux/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
20000034 l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000034 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
08000470 g     F .text	00000028 PWR_EnterSTANDBYMode
08000a28 g     F .text	00000010 TIM_TimeBaseStructInit
080021f4  w    F .text	00000004 RTC_Alarm_IRQHandler
080021f4  w    F .text	00000004 EXTI2_IRQHandler
08000598 g     F .text	0000000c RCC_HSICmd
08000c90 g     F .text	00000018 TIM_ForcedOC2Config
080005d0 g     F .text	0000000c RCC_PLLCmd
0800040c g     F .text	0000002c PWR_EnterSleepMode
080021f4  w    F .text	00000004 DebugMon_Handler
08000c74 g     F .text	00000004 TIM_SetCompare2
080007c0 g     F .text	00000018 RCC_AHBPeriphResetCmd
08000324 g     F .text	00000024 GPIO_PinAFConfig
080008b4 g     F .text	0000000c RCC_ClearITPendingBit
080002ec g     F .text	0000000c GPIO_ReadOutputDataBit
08000e20 g     F .text	0000001c TIM_CCxCmd
08001194 g     F .text	0000001c TIM_SetIC4Prescaler
2000001e g     O .bss	00000014 strDisp
080021f4  w    F .text	00000004 HardFault_Handler
080021f4  w    F .text	00000004 TIM10_IRQHandler
080021f4  w    F .text	00000004 USB_HP_IRQHandler
080021f4  w    F .text	00000004 TIM6_IRQHandler
08000cd0 g     F .text	00000010 TIM_OC1PreloadConfig
08001768 g     F .text	00000040 EnableClock
080021f4  w    F .text	00000004 SysTick_Handler
080005f4 g     F .text	0000000c RCC_MCOConfig
080021f4  w    F .text	00000004 PVD_IRQHandler
080022a4 g       .text	00000000 _sidata
080021f4  w    F .text	00000004 PendSV_Handler
080021f4  w    F .text	00000004 NMI_Handler
080021f4  w    F .text	00000004 EXTI3_IRQHandler
08001320 g     F .text	00000022 TIM_ETRClockMode2Config
08000850 g     F .text	00000018 RCC_ITConfig
08000c80 g     F .text	00000010 TIM_ForcedOC1Config
08001204 g     F .text	00000014 TIM_DMACmd
080012f8 g     F .text	00000028 TIM_ETRClockMode1Config
08000808 g     F .text	00000018 RCC_AHBPeriphClockLPModeCmd
0800117c g     F .text	00000018 TIM_SetIC3Prescaler
08000d90 g     F .text	00000010 TIM_ClearOC3Ref
080022a4 g       .text	00000000 _etext
2000001c g       .bss	00000000 _sbss
08000600 g     F .text	00000014 RCC_SYSCLKConfig
08000514 g     F .text	0000003c RCC_WaitForHSEStartUp
080005dc g     F .text	0000000c RCC_ClockSecuritySystemCmd
080021f4  w    F .text	00000004 EXTI0_IRQHandler
080021f4  w    F .text	00000004 I2C2_EV_IRQHandler
0800088c g     F .text	00000014 RCC_ClearFlag
08000af4 g     F .text	00000020 TIM_Cmd
08000d08 g     F .text	00000018 TIM_OC4PreloadConfig
0800148c g     F .text	0000000c LCD_Cmd
08000504 g     F .text	00000010 RCC_HSEConfig
080015c0 g     F .text	00000088 .hidden __udivsi3
080011d4 g     F .text	00000008 TIM_ClearFlag
080014d8 g     F .text	0000001c LCD_DeadTimeConfig
08000318 g     F .text	0000000a GPIO_ToggleBits
080011f4 g     F .text	00000008 TIM_ClearITPendingBit
080021f4  w    F .text	00000004 UsageFault_Handler
08000a58 g     F .text	00000004 TIM_GetCounter
08000790 g     F .text	00000018 RCC_APB2PeriphClockCmd
08001140 g     F .text	00000004 TIM_GetCapture3
080003d8 g     F .text	00000034 PWR_EnterLowPowerRunMode
080001f0 g     F .text	000000ae GPIO_Init
080005c0 g     F .text	00000010 RCC_PLLConfig
20000000 g       .data	00000000 _sdata
080021f4  w    F .text	00000004 SPI1_IRQHandler
08001138 g     F .text	00000004 TIM_GetCapture1
08000e08 g     F .text	00000018 TIM_SelectOCREFClear
08000314 g     F .text	00000004 GPIO_Write
080002f8 g     F .text	00000006 GPIO_ReadOutputData
08000b90 g     F .text	00000040 TIM_OC3Init
080005a4 g     F .text	00000010 RCC_LSEConfig
08000760 g     F .text	0000000c RCC_RTCCLKCmd
080014b4 g     F .text	0000000c LCD_MuxSegmentCmd
080008c0 g     F .text	00000100 TIM_DeInit
080007a8 g     F .text	00000018 RCC_APB1PeriphClockCmd
080008a0 g     F .text	00000014 RCC_GetITStatus
0800038c g     F .text	00000018 PWR_WakeUpPinCmd
080021f4  w    F .text	00000004 USB_FS_WKUP_IRQHandler
080021f8 g     F .text	00000048 __libc_init_array
080011c8 g     F .text	0000000c TIM_GetFlagStatus
08000778 g     F .text	00000018 RCC_AHBPeriphClockCmd
080021f4  w    F .text	00000004 DMA1_Channel4_IRQHandler
08000d48 g     F .text	00000010 TIM_OC3FastConfig
080021f4  w    F .text	00000004 ADC1_IRQHandler
2000001c g     O .bss	00000002 t_bar
08001218 g     F .text	00000020 TIM_SelectCCDMA
08001c5c g     F .text	00000034 LCD_GLASS_DisplayString
0800228c g     F .text	00000000 _init
08000adc g     F .text	00000018 TIM_SetClockDivision
0800154c g     F .text	00000018 LCD_ITConfig
080021f4  w    F .text	00000004 USART3_IRQHandler
20000034 g       .bss	00000000 _ebss
080021f4  w    F .text	00000004 DMA1_Channel7_IRQHandler
08000b14 g     F .text	00000038 TIM_OC1Init
08000cf8 g     F .text	00000010 TIM_OC3PreloadConfig
080021a4  w    F .text	0000003c Reset_Handler
080002e4 g     F .text	00000006 GPIO_ReadInputData
08000a54 g     F .text	00000004 TIM_SetAutoreload
080021f4  w    F .text	00000004 LCD_IRQHandler
08000868 g     F .text	00000024 RCC_GetFlagStatus
08001cb8 g     F .text	00000184 LCD_GLASS_Configure_GPIO
08001864 g     F .text	00000034 LCD_bar
08000300 g     F .text	00000004 GPIO_SetBits
080021f4  w    F .text	00000004 TIM4_IRQHandler
08000614 g     F .text	00000010 RCC_GetSYSCLKSource
08000aa4 g     F .text	00000020 TIM_ARRPreloadConfig
08000308 g     F .text	0000000c GPIO_WriteBit
0800165c g     F .text	00000000 .hidden __aeabi_idiv
080021f4  w    F .text	00000004 I2C1_EV_IRQHandler
080011dc g     F .text	00000016 TIM_GetITStatus
08000668 g     F .text	000000b8 RCC_GetClocksFreq
080021f4  w    F .text	00000004 DMA1_Channel6_IRQHandler
08000c20 g     F .text	00000050 TIM_SelectOCxM
08000820 g     F .text	00000018 RCC_APB2PeriphClockLPModeCmd
08000360 g     F .text	0000000c PWR_RTCAccessCmd
0800140c g     F .text	00000014 TIM_RemapConfig
080021f4  w    F .text	00000004 TIM3_IRQHandler
080021f4  w    F .text	00000004 RCC_IRQHandler
08001564 g     F .text	00000014 LCD_GetFlagStatus
080014f4 g     F .text	00000020 LCD_BlinkConfig
2000001c g       .bss	00000000 _bss
080021f4  w    F .text	00000004 DMA1_Channel1_IRQHandler
08000d20 g     F .text	00000010 TIM_OC1FastConfig
080021f4 g       .text	00000004 Default_Handler
08000ce0 g     F .text	00000018 TIM_OC2PreloadConfig
08000720 g     F .text	00000040 RCC_RTCCLKConfig
08001344 g     F .text	00000010 TIM_SelectInputTrigger
080021f4  w    F .text	00000004 EXTI15_10_IRQHandler
080011b0 g     F .text	00000014 TIM_ITConfig
08000b4c g     F .text	00000044 TIM_OC2Init
08000a38 g     F .text	00000006 TIM_PrescalerConfig
08000304 g     F .text	00000004 GPIO_ResetBits
08000df0 g     F .text	00000018 TIM_OC4PolarityConfig
08001354 g     F .text	00000018 TIM_SelectOutputTrigger
080021f4  w    F .text	00000004 TIM7_IRQHandler
08000c78 g     F .text	00000004 TIM_SetCompare3
08000bd0 g     F .text	00000044 TIM_OC4Init
080003bc g     F .text	0000001c PWR_VoltageScalingConfig
080013ec g     F .text	00000020 TIM_SelectHallSensor
0800171c  w    F .text	00000002 .hidden __aeabi_ldiv0
080021f4  w    F .text	00000004 EXTI9_5_IRQHandler
0800055c g     F .text	00000018 RCC_MSIRangeConfig
080021f4  w    F .text	00000004 TIM9_IRQHandler
080021f4  w    F .text	00000004 TAMPER_STAMP_IRQHandler
080021f4  w    F .text	00000004 RTC_WKUP_IRQHandler
08000838 g     F .text	00000018 RCC_APB1PeriphClockLPModeCmd
08001898 g     F .text	000003c4 LCD_GLASS_WriteChar
08001148 g     F .text	00000018 TIM_SetIC1Prescaler
08000cb8 g     F .text	00000018 TIM_ForcedOC4Config
080021f4  w    F .text	00000004 SPI2_IRQHandler
08000438 g     F .text	00000038 PWR_EnterSTOPMode
08001438 g     F .text	00000044 LCD_Init
080021f4  w    F .text	00000004 MemManage_Handler
08000580 g     F .text	00000018 RCC_AdjustHSICalibrationValue
08001720 g     F .text	00000048 initTimer
080017f4 g     F .text	00000070 main
08001578 g     F .text	0000000c LCD_ClearFlag
08001248 g     F .text	0000001c TIM_ITRxExternalClockConfig
08000dd8 g     F .text	00000018 TIM_OC3PolarityConfig
080015c0 g     F .text	00000000 .hidden __aeabi_uidiv
080021f4  w    F .text	00000004 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
08001238 g     F .text	00000010 TIM_InternalClockConfig
08000db0 g     F .text	00000010 TIM_OC1PolarityConfig
08002244 g     O .text	00000034 CapLetterMap
08000d30 g     F .text	00000018 TIM_OC2FastConfig
08000638 g     F .text	00000018 RCC_PCLK1Config
08000a50 g     F .text	00000004 TIM_SetCounter
080021f4  w    F .text	00000004 DMA1_Channel5_IRQHandler
080021f4  w    F .text	00000004 USB_LP_IRQHandler
080021f4  w    F .text	00000004 EXTI4_IRQHandler
0800165c g     F .text	000000ac .hidden __divsi3
08000650 g     F .text	00000018 RCC_PCLK2Config
08000c7c g     F .text	00000004 TIM_SetCompare4
0800113c g     F .text	00000004 TIM_GetCapture2
08000a5c g     F .text	00000006 TIM_GetPrescaler
08000d80 g     F .text	00000010 TIM_ClearOC2Ref
08001c90 g     F .text	00000028 LCD_GLASS_Clear
08002090 g     F .text	00000114 SystemInit
08000e3c g     F .text	00000164 TIM_ICInit
0800010c g     F .text	000000e4 GPIO_DeInit
08002298 g     F .text	00000000 _fini
080017a8 g     F .text	0000004c RCC_Configuration
08001540 g     F .text	0000000c LCD_UpdateDisplayRequest
080004bc g     F .text	00000048 RCC_DeInit
08000348 g     F .text	00000018 PWR_DeInit
08000fa0 g     F .text	00000010 TIM_ICStructInit
08000fb0 g     F .text	00000188 TIM_PWMIConfig
080021f4  w    F .text	00000004 DMA1_Channel3_IRQHandler
080021f4  w    F .text	00000004 COMP_IRQHandler
08002078 g     F .text	00000016 mini_snprintf
00000000  w      *UND*	00000000 __preinit_array_end
08000d70 g     F .text	00000010 TIM_ClearOC1Ref
080021f4  w    F .text	00000004 WWDG_IRQHandler
08001e3c g     F .text	00000068 LCD_GLASS_Init
080005e8 g     F .text	0000000c RCC_LSEClockSecuritySystemCmd
080007f0 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
080021f4  w    F .text	00000004 TIM2_IRQHandler
08000a84 g     F .text	00000020 TIM_UpdateRequestConfig
08000ca8 g     F .text	00000010 TIM_ForcedOC3Config
08001264 g     F .text	00000094 TIM_TIxExternalClockConfig
080002a0 g     F .text	00000014 GPIO_StructInit
08000c14 g     F .text	0000000c TIM_OCStructInit
20002000 g       *ABS*	00000000 _estack
080021f4  w    F .text	00000004 DAC_IRQHandler
08001648 g     F .text	00000012 .hidden __aeabi_uidivmod
080021f4  w    F .text	00000004 EXTI1_IRQHandler
08001384 g     F .text	00000018 TIM_SelectMasterSlaveMode
08001530 g     F .text	00000010 LCD_Write
2000001c g       .data	00000000 _edata
0800076c g     F .text	0000000c RCC_RTCResetCmd
08001144 g     F .text	00000004 TIM_GetCapture4
080003a4 g     F .text	0000000c PWR_FastWakeUpCmd
080009c0 g     F .text	00000068 TIM_TimeBaseInit
080021f4  w    F .text	00000004 TIM11_IRQHandler
08000498 g     F .text	00000014 PWR_GetFlagStatus
080021f4  w    F .text	00000004 USART2_IRQHandler
0800036c g     F .text	00000014 PWR_PVDLevelConfig
08001f8a g     F .text	000000ee mini_vsnprintf
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000574 g     F .text	0000000c RCC_MSICmd
080011fc g     F .text	00000008 TIM_DMAConfig
080021f4  w    F .text	00000004 I2C2_ER_IRQHandler
080021f4  w    F .text	00000004 DMA1_Channel2_IRQHandler
08001498 g     F .text	00000010 LCD_WaitForSynchro
080011c4 g     F .text	00000004 TIM_GenerateEvent
00000000  w      *UND*	00000000 __init_array_start
0800171c  w    F .text	00000002 .hidden __aeabi_idiv0
080004ac g     F .text	00000010 PWR_ClearFlag
0800147c g     F .text	0000000e LCD_StructInit
080021f4  w    F .text	00000004 FLASH_IRQHandler
080002b4 g     F .text	00000024 GPIO_PinLockConfig
080021f4  w    F .text	00000004 BusFault_Handler
080021f4  w    F .text	00000004 USART1_IRQHandler
080005b4 g     F .text	0000000c RCC_LSICmd
08001160 g     F .text	0000001c TIM_SetIC2Prescaler
08001584 g     F .text	0000001c LCD_GetITStatus
08001420 g     F .text	00000018 LCD_DeInit
0800139c g     F .text	00000016 TIM_ETRConfig
080007d8 g     F .text	00000018 RCC_APB2PeriphResetCmd
0800136c g     F .text	00000018 TIM_SelectSlaveMode
080021f4  w    F .text	00000004 I2C1_ER_IRQHandler
080014a8 g     F .text	0000000c LCD_HighDriveCmd
08000da0 g     F .text	00000010 TIM_ClearOC4Ref
08000ac4 g     F .text	00000018 TIM_SelectOnePulseMode
08002278 g     O .text	00000014 NumberMap
080013b4 g     F .text	00000038 TIM_EncoderInterfaceConfig
080003b0 g     F .text	0000000c PWR_UltraLowPowerCmd
08000550 g     F .text	0000000c RCC_AdjustMSICalibrationValue
00000000  w      *UND*	00000000 __preinit_array_start
08000c70 g     F .text	00000004 TIM_SetCompare1
08000dc0 g     F .text	00000018 TIM_OC2PolarityConfig
080015ac g     F .text	00000014 .hidden __gnu_thumb1_case_uhi
08001708 g     F .text	00000012 .hidden __aeabi_idivmod
080015a0 g     F .text	0000000c LCD_ClearITPendingBit
08000a64 g     F .text	00000020 TIM_UpdateDisableConfig
080002d8 g     F .text	0000000c GPIO_ReadInputDataBit
08000d58 g     F .text	00000018 TIM_OC4FastConfig
08001514 g     F .text	0000001c LCD_ContrastConfig
080014c0 g     F .text	00000018 LCD_PulseOnDurationConfig
08000380 g     F .text	0000000c PWR_PVDCmd
08000624 g     F .text	00000014 RCC_HCLKConfig
08000a40 g     F .text	00000010 TIM_CounterModeConfig



Disassembly of section .text:

0800010c <GPIO_DeInit>:
 800010c:	b508      	push	{r3, lr}
 800010e:	4b30      	ldr	r3, [pc, #192]	; (80001d0 <GPIO_DeInit+0xc4>)
 8000110:	4298      	cmp	r0, r3
 8000112:	d01e      	beq.n	8000152 <GPIO_DeInit+0x46>
 8000114:	4b2f      	ldr	r3, [pc, #188]	; (80001d4 <GPIO_DeInit+0xc8>)
 8000116:	4298      	cmp	r0, r3
 8000118:	d024      	beq.n	8000164 <GPIO_DeInit+0x58>
 800011a:	4b2f      	ldr	r3, [pc, #188]	; (80001d8 <GPIO_DeInit+0xcc>)
 800011c:	4298      	cmp	r0, r3
 800011e:	d02a      	beq.n	8000176 <GPIO_DeInit+0x6a>
 8000120:	4b2e      	ldr	r3, [pc, #184]	; (80001dc <GPIO_DeInit+0xd0>)
 8000122:	4298      	cmp	r0, r3
 8000124:	d030      	beq.n	8000188 <GPIO_DeInit+0x7c>
 8000126:	4b2e      	ldr	r3, [pc, #184]	; (80001e0 <GPIO_DeInit+0xd4>)
 8000128:	4298      	cmp	r0, r3
 800012a:	d036      	beq.n	800019a <GPIO_DeInit+0x8e>
 800012c:	4b2d      	ldr	r3, [pc, #180]	; (80001e4 <GPIO_DeInit+0xd8>)
 800012e:	4298      	cmp	r0, r3
 8000130:	d03c      	beq.n	80001ac <GPIO_DeInit+0xa0>
 8000132:	4b2d      	ldr	r3, [pc, #180]	; (80001e8 <GPIO_DeInit+0xdc>)
 8000134:	4298      	cmp	r0, r3
 8000136:	d042      	beq.n	80001be <GPIO_DeInit+0xb2>
 8000138:	4b2c      	ldr	r3, [pc, #176]	; (80001ec <GPIO_DeInit+0xe0>)
 800013a:	4298      	cmp	r0, r3
 800013c:	d000      	beq.n	8000140 <GPIO_DeInit+0x34>
 800013e:	bd08      	pop	{r3, pc}
 8000140:	2020      	movs	r0, #32
 8000142:	2101      	movs	r1, #1
 8000144:	f000 fb3c 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 8000148:	2020      	movs	r0, #32
 800014a:	2100      	movs	r1, #0
 800014c:	f000 fb38 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 8000150:	e7f5      	b.n	800013e <GPIO_DeInit+0x32>
 8000152:	2001      	movs	r0, #1
 8000154:	2101      	movs	r1, #1
 8000156:	f000 fb33 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 800015a:	2001      	movs	r0, #1
 800015c:	2100      	movs	r1, #0
 800015e:	f000 fb2f 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 8000162:	e7ec      	b.n	800013e <GPIO_DeInit+0x32>
 8000164:	2002      	movs	r0, #2
 8000166:	2101      	movs	r1, #1
 8000168:	f000 fb2a 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 800016c:	2002      	movs	r0, #2
 800016e:	2100      	movs	r1, #0
 8000170:	f000 fb26 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 8000174:	e7e3      	b.n	800013e <GPIO_DeInit+0x32>
 8000176:	2004      	movs	r0, #4
 8000178:	2101      	movs	r1, #1
 800017a:	f000 fb21 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 800017e:	2004      	movs	r0, #4
 8000180:	2100      	movs	r1, #0
 8000182:	f000 fb1d 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 8000186:	e7da      	b.n	800013e <GPIO_DeInit+0x32>
 8000188:	2008      	movs	r0, #8
 800018a:	2101      	movs	r1, #1
 800018c:	f000 fb18 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 8000190:	2008      	movs	r0, #8
 8000192:	2100      	movs	r1, #0
 8000194:	f000 fb14 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 8000198:	e7d1      	b.n	800013e <GPIO_DeInit+0x32>
 800019a:	2010      	movs	r0, #16
 800019c:	2101      	movs	r1, #1
 800019e:	f000 fb0f 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 80001a2:	2010      	movs	r0, #16
 80001a4:	2100      	movs	r1, #0
 80001a6:	f000 fb0b 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 80001aa:	e7c8      	b.n	800013e <GPIO_DeInit+0x32>
 80001ac:	2040      	movs	r0, #64	; 0x40
 80001ae:	2101      	movs	r1, #1
 80001b0:	f000 fb06 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 80001b4:	2040      	movs	r0, #64	; 0x40
 80001b6:	2100      	movs	r1, #0
 80001b8:	f000 fb02 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 80001bc:	e7bf      	b.n	800013e <GPIO_DeInit+0x32>
 80001be:	2080      	movs	r0, #128	; 0x80
 80001c0:	2101      	movs	r1, #1
 80001c2:	f000 fafd 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 80001c6:	2080      	movs	r0, #128	; 0x80
 80001c8:	2100      	movs	r1, #0
 80001ca:	f000 faf9 	bl	80007c0 <RCC_AHBPeriphResetCmd>
 80001ce:	e7b6      	b.n	800013e <GPIO_DeInit+0x32>
 80001d0:	40020000 	.word	0x40020000
 80001d4:	40020400 	.word	0x40020400
 80001d8:	40020800 	.word	0x40020800
 80001dc:	40020c00 	.word	0x40020c00
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40021800 	.word	0x40021800
 80001e8:	40021c00 	.word	0x40021c00
 80001ec:	40021400 	.word	0x40021400

080001f0 <GPIO_Init>:
 80001f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001f2:	4644      	mov	r4, r8
 80001f4:	465f      	mov	r7, fp
 80001f6:	4656      	mov	r6, sl
 80001f8:	464d      	mov	r5, r9
 80001fa:	b4f0      	push	{r4, r5, r6, r7}
 80001fc:	468c      	mov	ip, r1
 80001fe:	680f      	ldr	r7, [r1, #0]
 8000200:	2103      	movs	r1, #3
 8000202:	b083      	sub	sp, #12
 8000204:	2400      	movs	r4, #0
 8000206:	2300      	movs	r3, #0
 8000208:	2601      	movs	r6, #1
 800020a:	4688      	mov	r8, r1
 800020c:	e003      	b.n	8000216 <GPIO_Init+0x26>
 800020e:	3301      	adds	r3, #1
 8000210:	3402      	adds	r4, #2
 8000212:	2b10      	cmp	r3, #16
 8000214:	d026      	beq.n	8000264 <GPIO_Init+0x74>
 8000216:	1c32      	adds	r2, r6, #0
 8000218:	409a      	lsls	r2, r3
 800021a:	1c3d      	adds	r5, r7, #0
 800021c:	4015      	ands	r5, r2
 800021e:	4295      	cmp	r5, r2
 8000220:	d1f5      	bne.n	800020e <GPIO_Init+0x1e>
 8000222:	4642      	mov	r2, r8
 8000224:	6801      	ldr	r1, [r0, #0]
 8000226:	40a2      	lsls	r2, r4
 8000228:	43d2      	mvns	r2, r2
 800022a:	4011      	ands	r1, r2
 800022c:	6001      	str	r1, [r0, #0]
 800022e:	4661      	mov	r1, ip
 8000230:	7909      	ldrb	r1, [r1, #4]
 8000232:	4693      	mov	fp, r2
 8000234:	6802      	ldr	r2, [r0, #0]
 8000236:	9101      	str	r1, [sp, #4]
 8000238:	40a1      	lsls	r1, r4
 800023a:	4311      	orrs	r1, r2
 800023c:	6001      	str	r1, [r0, #0]
 800023e:	9901      	ldr	r1, [sp, #4]
 8000240:	3901      	subs	r1, #1
 8000242:	b2c9      	uxtb	r1, r1
 8000244:	2901      	cmp	r1, #1
 8000246:	d914      	bls.n	8000272 <GPIO_Init+0x82>
 8000248:	68c1      	ldr	r1, [r0, #12]
 800024a:	465a      	mov	r2, fp
 800024c:	400a      	ands	r2, r1
 800024e:	4665      	mov	r5, ip
 8000250:	60c2      	str	r2, [r0, #12]
 8000252:	79ea      	ldrb	r2, [r5, #7]
 8000254:	68c1      	ldr	r1, [r0, #12]
 8000256:	40a2      	lsls	r2, r4
 8000258:	430a      	orrs	r2, r1
 800025a:	3301      	adds	r3, #1
 800025c:	60c2      	str	r2, [r0, #12]
 800025e:	3402      	adds	r4, #2
 8000260:	2b10      	cmp	r3, #16
 8000262:	d1d8      	bne.n	8000216 <GPIO_Init+0x26>
 8000264:	b003      	add	sp, #12
 8000266:	bc3c      	pop	{r2, r3, r4, r5}
 8000268:	4690      	mov	r8, r2
 800026a:	4699      	mov	r9, r3
 800026c:	46a2      	mov	sl, r4
 800026e:	46ab      	mov	fp, r5
 8000270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000272:	6881      	ldr	r1, [r0, #8]
 8000274:	465a      	mov	r2, fp
 8000276:	4011      	ands	r1, r2
 8000278:	4662      	mov	r2, ip
 800027a:	6081      	str	r1, [r0, #8]
 800027c:	7952      	ldrb	r2, [r2, #5]
 800027e:	6881      	ldr	r1, [r0, #8]
 8000280:	40a2      	lsls	r2, r4
 8000282:	4311      	orrs	r1, r2
 8000284:	6081      	str	r1, [r0, #8]
 8000286:	6841      	ldr	r1, [r0, #4]
 8000288:	4662      	mov	r2, ip
 800028a:	b289      	uxth	r1, r1
 800028c:	43a9      	bics	r1, r5
 800028e:	8081      	strh	r1, [r0, #4]
 8000290:	7991      	ldrb	r1, [r2, #6]
 8000292:	6845      	ldr	r5, [r0, #4]
 8000294:	4099      	lsls	r1, r3
 8000296:	4329      	orrs	r1, r5
 8000298:	b289      	uxth	r1, r1
 800029a:	8081      	strh	r1, [r0, #4]
 800029c:	e7d4      	b.n	8000248 <GPIO_Init+0x58>
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <GPIO_StructInit>:
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <GPIO_StructInit+0x10>)
 80002a2:	6003      	str	r3, [r0, #0]
 80002a4:	2300      	movs	r3, #0
 80002a6:	7103      	strb	r3, [r0, #4]
 80002a8:	7143      	strb	r3, [r0, #5]
 80002aa:	7183      	strb	r3, [r0, #6]
 80002ac:	71c3      	strb	r3, [r0, #7]
 80002ae:	4770      	bx	lr
 80002b0:	0000ffff 	.word	0x0000ffff

080002b4 <GPIO_PinLockConfig>:
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	b082      	sub	sp, #8
 80002b8:	025b      	lsls	r3, r3, #9
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	9b01      	ldr	r3, [sp, #4]
 80002be:	430b      	orrs	r3, r1
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	61c3      	str	r3, [r0, #28]
 80002c6:	61c1      	str	r1, [r0, #28]
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	61c3      	str	r3, [r0, #28]
 80002cc:	69c3      	ldr	r3, [r0, #28]
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	69c3      	ldr	r3, [r0, #28]
 80002d2:	9301      	str	r3, [sp, #4]
 80002d4:	b002      	add	sp, #8
 80002d6:	4770      	bx	lr

080002d8 <GPIO_ReadInputDataBit>:
 80002d8:	6900      	ldr	r0, [r0, #16]
 80002da:	4008      	ands	r0, r1
 80002dc:	1e43      	subs	r3, r0, #1
 80002de:	4198      	sbcs	r0, r3
 80002e0:	b2c0      	uxtb	r0, r0
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ReadInputData>:
 80002e4:	6900      	ldr	r0, [r0, #16]
 80002e6:	b280      	uxth	r0, r0
 80002e8:	4770      	bx	lr
 80002ea:	46c0      	nop			; (mov r8, r8)

080002ec <GPIO_ReadOutputDataBit>:
 80002ec:	6940      	ldr	r0, [r0, #20]
 80002ee:	4008      	ands	r0, r1
 80002f0:	1e43      	subs	r3, r0, #1
 80002f2:	4198      	sbcs	r0, r3
 80002f4:	b2c0      	uxtb	r0, r0
 80002f6:	4770      	bx	lr

080002f8 <GPIO_ReadOutputData>:
 80002f8:	6940      	ldr	r0, [r0, #20]
 80002fa:	b280      	uxth	r0, r0
 80002fc:	4770      	bx	lr
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <GPIO_SetBits>:
 8000300:	8301      	strh	r1, [r0, #24]
 8000302:	4770      	bx	lr

08000304 <GPIO_ResetBits>:
 8000304:	8341      	strh	r1, [r0, #26]
 8000306:	4770      	bx	lr

08000308 <GPIO_WriteBit>:
 8000308:	2a00      	cmp	r2, #0
 800030a:	d101      	bne.n	8000310 <GPIO_WriteBit+0x8>
 800030c:	8341      	strh	r1, [r0, #26]
 800030e:	4770      	bx	lr
 8000310:	8301      	strh	r1, [r0, #24]
 8000312:	e7fc      	b.n	800030e <GPIO_WriteBit+0x6>

08000314 <GPIO_Write>:
 8000314:	8281      	strh	r1, [r0, #20]
 8000316:	4770      	bx	lr

08000318 <GPIO_ToggleBits>:
 8000318:	6943      	ldr	r3, [r0, #20]
 800031a:	b29b      	uxth	r3, r3
 800031c:	4059      	eors	r1, r3
 800031e:	8281      	strh	r1, [r0, #20]
 8000320:	4770      	bx	lr
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <GPIO_PinAFConfig>:
 8000324:	2307      	movs	r3, #7
 8000326:	400b      	ands	r3, r1
 8000328:	08c9      	lsrs	r1, r1, #3
 800032a:	0089      	lsls	r1, r1, #2
 800032c:	1840      	adds	r0, r0, r1
 800032e:	b510      	push	{r4, lr}
 8000330:	6a01      	ldr	r1, [r0, #32]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	240f      	movs	r4, #15
 8000336:	409c      	lsls	r4, r3
 8000338:	43a1      	bics	r1, r4
 800033a:	6201      	str	r1, [r0, #32]
 800033c:	6a01      	ldr	r1, [r0, #32]
 800033e:	409a      	lsls	r2, r3
 8000340:	1c13      	adds	r3, r2, #0
 8000342:	430b      	orrs	r3, r1
 8000344:	6203      	str	r3, [r0, #32]
 8000346:	bd10      	pop	{r4, pc}

08000348 <PWR_DeInit>:
 8000348:	b510      	push	{r4, lr}
 800034a:	2480      	movs	r4, #128	; 0x80
 800034c:	0564      	lsls	r4, r4, #21
 800034e:	1c20      	adds	r0, r4, #0
 8000350:	2101      	movs	r1, #1
 8000352:	f000 fa4d 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000356:	1c20      	adds	r0, r4, #0
 8000358:	2100      	movs	r1, #0
 800035a:	f000 fa49 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 800035e:	bd10      	pop	{r4, pc}

08000360 <PWR_RTCAccessCmd>:
 8000360:	4b01      	ldr	r3, [pc, #4]	; (8000368 <PWR_RTCAccessCmd+0x8>)
 8000362:	6018      	str	r0, [r3, #0]
 8000364:	4770      	bx	lr
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	420e0020 	.word	0x420e0020

0800036c <PWR_PVDLevelConfig>:
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <PWR_PVDLevelConfig+0x10>)
 800036e:	21e0      	movs	r1, #224	; 0xe0
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	438a      	bics	r2, r1
 8000374:	4310      	orrs	r0, r2
 8000376:	6018      	str	r0, [r3, #0]
 8000378:	4770      	bx	lr
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	40007000 	.word	0x40007000

08000380 <PWR_PVDCmd>:
 8000380:	4b01      	ldr	r3, [pc, #4]	; (8000388 <PWR_PVDCmd+0x8>)
 8000382:	6018      	str	r0, [r3, #0]
 8000384:	4770      	bx	lr
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	420e0010 	.word	0x420e0010

0800038c <PWR_WakeUpPinCmd>:
 800038c:	b082      	sub	sp, #8
 800038e:	2300      	movs	r3, #0
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <PWR_WakeUpPinCmd+0x14>)
 8000394:	18c0      	adds	r0, r0, r3
 8000396:	9001      	str	r0, [sp, #4]
 8000398:	9b01      	ldr	r3, [sp, #4]
 800039a:	6019      	str	r1, [r3, #0]
 800039c:	b002      	add	sp, #8
 800039e:	4770      	bx	lr
 80003a0:	420e00a0 	.word	0x420e00a0

080003a4 <PWR_FastWakeUpCmd>:
 80003a4:	4b01      	ldr	r3, [pc, #4]	; (80003ac <PWR_FastWakeUpCmd+0x8>)
 80003a6:	6018      	str	r0, [r3, #0]
 80003a8:	4770      	bx	lr
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	420e0028 	.word	0x420e0028

080003b0 <PWR_UltraLowPowerCmd>:
 80003b0:	4b01      	ldr	r3, [pc, #4]	; (80003b8 <PWR_UltraLowPowerCmd+0x8>)
 80003b2:	6018      	str	r0, [r3, #0]
 80003b4:	4770      	bx	lr
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	420e0024 	.word	0x420e0024

080003bc <PWR_VoltageScalingConfig>:
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <PWR_VoltageScalingConfig+0x14>)
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <PWR_VoltageScalingConfig+0x18>)
 80003c0:	6819      	ldr	r1, [r3, #0]
 80003c2:	400a      	ands	r2, r1
 80003c4:	4310      	orrs	r0, r2
 80003c6:	220c      	movs	r2, #12
 80003c8:	4390      	bics	r0, r2
 80003ca:	6018      	str	r0, [r3, #0]
 80003cc:	4770      	bx	lr
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	40007000 	.word	0x40007000
 80003d4:	ffffe7ff 	.word	0xffffe7ff

080003d8 <PWR_EnterLowPowerRunMode>:
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <PWR_EnterLowPowerRunMode+0x2c>)
 80003da:	6819      	ldr	r1, [r3, #0]
 80003dc:	2800      	cmp	r0, #0
 80003de:	d107      	bne.n	80003f0 <PWR_EnterLowPowerRunMode+0x18>
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <PWR_EnterLowPowerRunMode+0x30>)
 80003e2:	400a      	ands	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	2101      	movs	r1, #1
 80003ea:	438a      	bics	r2, r1
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	4770      	bx	lr
 80003f0:	2201      	movs	r2, #1
 80003f2:	430a      	orrs	r2, r1
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	2280      	movs	r2, #128	; 0x80
 80003fa:	01d2      	lsls	r2, r2, #7
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e7f5      	b.n	80003ee <PWR_EnterLowPowerRunMode+0x16>
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40007000 	.word	0x40007000
 8000408:	ffffbfff 	.word	0xffffbfff

0800040c <PWR_EnterSleepMode>:
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <PWR_EnterSleepMode+0x24>)
 800040e:	b510      	push	{r4, lr}
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	2403      	movs	r4, #3
 8000414:	43a2      	bics	r2, r4
 8000416:	4310      	orrs	r0, r2
 8000418:	6018      	str	r0, [r3, #0]
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <PWR_EnterSleepMode+0x28>)
 800041c:	2004      	movs	r0, #4
 800041e:	691a      	ldr	r2, [r3, #16]
 8000420:	4382      	bics	r2, r0
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	2901      	cmp	r1, #1
 8000426:	d001      	beq.n	800042c <PWR_EnterSleepMode+0x20>
 8000428:	bf20      	wfe
 800042a:	bd10      	pop	{r4, pc}
 800042c:	bf30      	wfi
 800042e:	e7fc      	b.n	800042a <PWR_EnterSleepMode+0x1e>
 8000430:	40007000 	.word	0x40007000
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <PWR_EnterSTOPMode>:
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <PWR_EnterSTOPMode+0x30>)
 800043a:	b510      	push	{r4, lr}
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	2403      	movs	r4, #3
 8000440:	43a2      	bics	r2, r4
 8000442:	4310      	orrs	r0, r2
 8000444:	6018      	str	r0, [r3, #0]
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <PWR_EnterSTOPMode+0x34>)
 8000448:	2204      	movs	r2, #4
 800044a:	6918      	ldr	r0, [r3, #16]
 800044c:	4302      	orrs	r2, r0
 800044e:	611a      	str	r2, [r3, #16]
 8000450:	2901      	cmp	r1, #1
 8000452:	d006      	beq.n	8000462 <PWR_EnterSTOPMode+0x2a>
 8000454:	bf20      	wfe
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <PWR_EnterSTOPMode+0x34>)
 8000458:	2104      	movs	r1, #4
 800045a:	691a      	ldr	r2, [r3, #16]
 800045c:	438a      	bics	r2, r1
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	bd10      	pop	{r4, pc}
 8000462:	bf30      	wfi
 8000464:	e7f7      	b.n	8000456 <PWR_EnterSTOPMode+0x1e>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	40007000 	.word	0x40007000
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <PWR_EnterSTANDBYMode>:
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <PWR_EnterSTANDBYMode+0x20>)
 8000472:	2204      	movs	r2, #4
 8000474:	6819      	ldr	r1, [r3, #0]
 8000476:	4311      	orrs	r1, r2
 8000478:	6019      	str	r1, [r3, #0]
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	2102      	movs	r1, #2
 800047e:	4301      	orrs	r1, r0
 8000480:	6019      	str	r1, [r3, #0]
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <PWR_EnterSTANDBYMode+0x24>)
 8000484:	6919      	ldr	r1, [r3, #16]
 8000486:	430a      	orrs	r2, r1
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	bf30      	wfi
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	40007000 	.word	0x40007000
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <PWR_GetFlagStatus>:
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <PWR_GetFlagStatus+0x10>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4018      	ands	r0, r3
 800049e:	1e43      	subs	r3, r0, #1
 80004a0:	4198      	sbcs	r0, r3
 80004a2:	b2c0      	uxtb	r0, r0
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	40007000 	.word	0x40007000

080004ac <PWR_ClearFlag>:
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <PWR_ClearFlag+0xc>)
 80004ae:	0080      	lsls	r0, r0, #2
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4310      	orrs	r0, r2
 80004b4:	6018      	str	r0, [r3, #0]
 80004b6:	4770      	bx	lr
 80004b8:	40007000 	.word	0x40007000

080004bc <RCC_DeInit>:
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <RCC_DeInit+0x34>)
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	0052      	lsls	r2, r2, #1
 80004c4:	430a      	orrs	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	6899      	ldr	r1, [r3, #8]
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <RCC_DeInit+0x38>)
 80004cc:	400a      	ands	r2, r1
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	6819      	ldr	r1, [r3, #0]
 80004d2:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <RCC_DeInit+0x3c>)
 80004d4:	400a      	ands	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	6819      	ldr	r1, [r3, #0]
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <RCC_DeInit+0x40>)
 80004dc:	400a      	ands	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	6899      	ldr	r1, [r3, #8]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <RCC_DeInit+0x44>)
 80004e4:	400a      	ands	r2, r1
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40023800 	.word	0x40023800
 80004f4:	88ffc00c 	.word	0x88ffc00c
 80004f8:	eefefffe 	.word	0xeefefffe
 80004fc:	fffbffff 	.word	0xfffbffff
 8000500:	ff02ffff 	.word	0xff02ffff

08000504 <RCC_HSEConfig>:
 8000504:	4b02      	ldr	r3, [pc, #8]	; (8000510 <RCC_HSEConfig+0xc>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	7018      	strb	r0, [r3, #0]
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40023802 	.word	0x40023802

08000514 <RCC_WaitForHSEStartUp>:
 8000514:	2300      	movs	r3, #0
 8000516:	b082      	sub	sp, #8
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	23a0      	movs	r3, #160	; 0xa0
 800051e:	490b      	ldr	r1, [pc, #44]	; (800054c <RCC_WaitForHSEStartUp+0x38>)
 8000520:	0292      	lsls	r2, r2, #10
 8000522:	00d8      	lsls	r0, r3, #3
 8000524:	680b      	ldr	r3, [r1, #0]
 8000526:	4213      	tst	r3, r2
 8000528:	d10b      	bne.n	8000542 <RCC_WaitForHSEStartUp+0x2e>
 800052a:	9b01      	ldr	r3, [sp, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	9b01      	ldr	r3, [sp, #4]
 8000532:	4283      	cmp	r3, r0
 8000534:	d1f6      	bne.n	8000524 <RCC_WaitForHSEStartUp+0x10>
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <RCC_WaitForHSEStartUp+0x38>)
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	0380      	lsls	r0, r0, #14
 800053c:	0fc0      	lsrs	r0, r0, #31
 800053e:	b002      	add	sp, #8
 8000540:	4770      	bx	lr
 8000542:	9b01      	ldr	r3, [sp, #4]
 8000544:	3301      	adds	r3, #1
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	9b01      	ldr	r3, [sp, #4]
 800054a:	e7f4      	b.n	8000536 <RCC_WaitForHSEStartUp+0x22>
 800054c:	40023800 	.word	0x40023800

08000550 <RCC_AdjustMSICalibrationValue>:
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <RCC_AdjustMSICalibrationValue+0x8>)
 8000552:	7018      	strb	r0, [r3, #0]
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40023807 	.word	0x40023807

0800055c <RCC_MSIRangeConfig>:
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <RCC_MSIRangeConfig+0x10>)
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <RCC_MSIRangeConfig+0x14>)
 8000560:	6859      	ldr	r1, [r3, #4]
 8000562:	400a      	ands	r2, r1
 8000564:	4310      	orrs	r0, r2
 8000566:	6058      	str	r0, [r3, #4]
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40023800 	.word	0x40023800
 8000570:	ffff1fff 	.word	0xffff1fff

08000574 <RCC_MSICmd>:
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <RCC_MSICmd+0x8>)
 8000576:	6018      	str	r0, [r3, #0]
 8000578:	4770      	bx	lr
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	42470020 	.word	0x42470020

08000580 <RCC_AdjustHSICalibrationValue>:
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <RCC_AdjustHSICalibrationValue+0x10>)
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <RCC_AdjustHSICalibrationValue+0x14>)
 8000584:	6859      	ldr	r1, [r3, #4]
 8000586:	0200      	lsls	r0, r0, #8
 8000588:	400a      	ands	r2, r1
 800058a:	4310      	orrs	r0, r2
 800058c:	6058      	str	r0, [r3, #4]
 800058e:	4770      	bx	lr
 8000590:	40023800 	.word	0x40023800
 8000594:	ffffe0ff 	.word	0xffffe0ff

08000598 <RCC_HSICmd>:
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <RCC_HSICmd+0x8>)
 800059a:	6018      	str	r0, [r3, #0]
 800059c:	4770      	bx	lr
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	42470000 	.word	0x42470000

080005a4 <RCC_LSEConfig>:
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <RCC_LSEConfig+0xc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	7018      	strb	r0, [r3, #0]
 80005ac:	4770      	bx	lr
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40023835 	.word	0x40023835

080005b4 <RCC_LSICmd>:
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <RCC_LSICmd+0x8>)
 80005b6:	6018      	str	r0, [r3, #0]
 80005b8:	4770      	bx	lr
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	42470680 	.word	0x42470680

080005c0 <RCC_PLLConfig>:
 80005c0:	4310      	orrs	r0, r2
 80005c2:	4b02      	ldr	r3, [pc, #8]	; (80005cc <RCC_PLLConfig+0xc>)
 80005c4:	4301      	orrs	r1, r0
 80005c6:	7019      	strb	r1, [r3, #0]
 80005c8:	4770      	bx	lr
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	4002380a 	.word	0x4002380a

080005d0 <RCC_PLLCmd>:
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <RCC_PLLCmd+0x8>)
 80005d2:	6018      	str	r0, [r3, #0]
 80005d4:	4770      	bx	lr
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	42470060 	.word	0x42470060

080005dc <RCC_ClockSecuritySystemCmd>:
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <RCC_ClockSecuritySystemCmd+0x8>)
 80005de:	6018      	str	r0, [r3, #0]
 80005e0:	4770      	bx	lr
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	42470070 	.word	0x42470070

080005e8 <RCC_LSEClockSecuritySystemCmd>:
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <RCC_LSEClockSecuritySystemCmd+0x8>)
 80005ea:	6018      	str	r0, [r3, #0]
 80005ec:	4770      	bx	lr
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	424706ac 	.word	0x424706ac

080005f4 <RCC_MCOConfig>:
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <RCC_MCOConfig+0x8>)
 80005f6:	4308      	orrs	r0, r1
 80005f8:	7018      	strb	r0, [r3, #0]
 80005fa:	4770      	bx	lr
 80005fc:	4002380b 	.word	0x4002380b

08000600 <RCC_SYSCLKConfig>:
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <RCC_SYSCLKConfig+0x10>)
 8000602:	2103      	movs	r1, #3
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	438a      	bics	r2, r1
 8000608:	4310      	orrs	r0, r2
 800060a:	6098      	str	r0, [r3, #8]
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40023800 	.word	0x40023800

08000614 <RCC_GetSYSCLKSource>:
 8000614:	4b02      	ldr	r3, [pc, #8]	; (8000620 <RCC_GetSYSCLKSource+0xc>)
 8000616:	200c      	movs	r0, #12
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	4018      	ands	r0, r3
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40023800 	.word	0x40023800

08000624 <RCC_HCLKConfig>:
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <RCC_HCLKConfig+0x10>)
 8000626:	21f0      	movs	r1, #240	; 0xf0
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	438a      	bics	r2, r1
 800062c:	4310      	orrs	r0, r2
 800062e:	6098      	str	r0, [r3, #8]
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40023800 	.word	0x40023800

08000638 <RCC_PCLK1Config>:
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <RCC_PCLK1Config+0x10>)
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <RCC_PCLK1Config+0x14>)
 800063c:	6899      	ldr	r1, [r3, #8]
 800063e:	400a      	ands	r2, r1
 8000640:	4310      	orrs	r0, r2
 8000642:	6098      	str	r0, [r3, #8]
 8000644:	4770      	bx	lr
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40023800 	.word	0x40023800
 800064c:	fffff8ff 	.word	0xfffff8ff

08000650 <RCC_PCLK2Config>:
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <RCC_PCLK2Config+0x10>)
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <RCC_PCLK2Config+0x14>)
 8000654:	6899      	ldr	r1, [r3, #8]
 8000656:	00c0      	lsls	r0, r0, #3
 8000658:	400a      	ands	r2, r1
 800065a:	4310      	orrs	r0, r2
 800065c:	6098      	str	r0, [r3, #8]
 800065e:	4770      	bx	lr
 8000660:	40023800 	.word	0x40023800
 8000664:	ffffc7ff 	.word	0xffffc7ff

08000668 <RCC_GetClocksFreq>:
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <RCC_GetClocksFreq+0xa8>)
 800066a:	b538      	push	{r3, r4, r5, lr}
 800066c:	6893      	ldr	r3, [r2, #8]
 800066e:	210c      	movs	r1, #12
 8000670:	1c04      	adds	r4, r0, #0
 8000672:	400b      	ands	r3, r1
 8000674:	2b04      	cmp	r3, #4
 8000676:	d041      	beq.n	80006fc <RCC_GetClocksFreq+0x94>
 8000678:	d931      	bls.n	80006de <RCC_GetClocksFreq+0x76>
 800067a:	2b08      	cmp	r3, #8
 800067c:	d014      	beq.n	80006a8 <RCC_GetClocksFreq+0x40>
 800067e:	2b0c      	cmp	r3, #12
 8000680:	d139      	bne.n	80006f6 <RCC_GetClocksFreq+0x8e>
 8000682:	6893      	ldr	r3, [r2, #8]
 8000684:	4d23      	ldr	r5, [pc, #140]	; (8000714 <RCC_GetClocksFreq+0xac>)
 8000686:	6891      	ldr	r1, [r2, #8]
 8000688:	029b      	lsls	r3, r3, #10
 800068a:	0f1b      	lsrs	r3, r3, #28
 800068c:	5ceb      	ldrb	r3, [r5, r3]
 800068e:	0209      	lsls	r1, r1, #8
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	0f89      	lsrs	r1, r1, #30
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3101      	adds	r1, #1
 8000698:	03d0      	lsls	r0, r2, #15
 800069a:	d433      	bmi.n	8000704 <RCC_GetClocksFreq+0x9c>
 800069c:	481e      	ldr	r0, [pc, #120]	; (8000718 <RCC_GetClocksFreq+0xb0>)
 800069e:	4358      	muls	r0, r3
 80006a0:	f000 ff8e 	bl	80015c0 <__aeabi_uidiv>
 80006a4:	6020      	str	r0, [r4, #0]
 80006a6:	e002      	b.n	80006ae <RCC_GetClocksFreq+0x46>
 80006a8:	481c      	ldr	r0, [pc, #112]	; (800071c <RCC_GetClocksFreq+0xb4>)
 80006aa:	4d1a      	ldr	r5, [pc, #104]	; (8000714 <RCC_GetClocksFreq+0xac>)
 80006ac:	6020      	str	r0, [r4, #0]
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <RCC_GetClocksFreq+0xa8>)
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	0612      	lsls	r2, r2, #24
 80006b4:	0f12      	lsrs	r2, r2, #28
 80006b6:	18aa      	adds	r2, r5, r2
 80006b8:	7b12      	ldrb	r2, [r2, #12]
 80006ba:	40d0      	lsrs	r0, r2
 80006bc:	6060      	str	r0, [r4, #4]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	1c01      	adds	r1, r0, #0
 80006c2:	0552      	lsls	r2, r2, #21
 80006c4:	0f52      	lsrs	r2, r2, #29
 80006c6:	18aa      	adds	r2, r5, r2
 80006c8:	7b12      	ldrb	r2, [r2, #12]
 80006ca:	40d1      	lsrs	r1, r2
 80006cc:	60a1      	str	r1, [r4, #8]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	049b      	lsls	r3, r3, #18
 80006d2:	0f5b      	lsrs	r3, r3, #29
 80006d4:	18ed      	adds	r5, r5, r3
 80006d6:	7b2b      	ldrb	r3, [r5, #12]
 80006d8:	40d8      	lsrs	r0, r3
 80006da:	60e0      	str	r0, [r4, #12]
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d109      	bne.n	80006f6 <RCC_GetClocksFreq+0x8e>
 80006e2:	6853      	ldr	r3, [r2, #4]
 80006e4:	041b      	lsls	r3, r3, #16
 80006e6:	0f5b      	lsrs	r3, r3, #29
 80006e8:	2080      	movs	r0, #128	; 0x80
 80006ea:	3301      	adds	r3, #1
 80006ec:	0200      	lsls	r0, r0, #8
 80006ee:	4098      	lsls	r0, r3
 80006f0:	6020      	str	r0, [r4, #0]
 80006f2:	4d08      	ldr	r5, [pc, #32]	; (8000714 <RCC_GetClocksFreq+0xac>)
 80006f4:	e7db      	b.n	80006ae <RCC_GetClocksFreq+0x46>
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <RCC_GetClocksFreq+0xa8>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	e7f3      	b.n	80006e4 <RCC_GetClocksFreq+0x7c>
 80006fc:	4806      	ldr	r0, [pc, #24]	; (8000718 <RCC_GetClocksFreq+0xb0>)
 80006fe:	4d05      	ldr	r5, [pc, #20]	; (8000714 <RCC_GetClocksFreq+0xac>)
 8000700:	6020      	str	r0, [r4, #0]
 8000702:	e7d4      	b.n	80006ae <RCC_GetClocksFreq+0x46>
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <RCC_GetClocksFreq+0xb4>)
 8000706:	4358      	muls	r0, r3
 8000708:	f000 ff5a 	bl	80015c0 <__aeabi_uidiv>
 800070c:	6020      	str	r0, [r4, #0]
 800070e:	e7ce      	b.n	80006ae <RCC_GetClocksFreq+0x46>
 8000710:	40023800 	.word	0x40023800
 8000714:	20000000 	.word	0x20000000
 8000718:	00f42400 	.word	0x00f42400
 800071c:	007a1200 	.word	0x007a1200

08000720 <RCC_RTCCLKConfig>:
 8000720:	23c0      	movs	r3, #192	; 0xc0
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	1c02      	adds	r2, r0, #0
 8000726:	b510      	push	{r4, lr}
 8000728:	401a      	ands	r2, r3
 800072a:	429a      	cmp	r2, r3
 800072c:	d108      	bne.n	8000740 <RCC_RTCCLKConfig+0x20>
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <RCC_RTCCLKConfig+0x34>)
 8000730:	4909      	ldr	r1, [pc, #36]	; (8000758 <RCC_RTCCLKConfig+0x38>)
 8000732:	681c      	ldr	r4, [r3, #0]
 8000734:	4021      	ands	r1, r4
 8000736:	24c0      	movs	r4, #192	; 0xc0
 8000738:	05e4      	lsls	r4, r4, #23
 800073a:	4020      	ands	r0, r4
 800073c:	4308      	orrs	r0, r1
 800073e:	6018      	str	r0, [r3, #0]
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <RCC_RTCCLKConfig+0x34>)
 8000742:	4906      	ldr	r1, [pc, #24]	; (800075c <RCC_RTCCLKConfig+0x3c>)
 8000744:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000746:	4001      	ands	r1, r0
 8000748:	6359      	str	r1, [r3, #52]	; 0x34
 800074a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800074c:	430a      	orrs	r2, r1
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
 8000750:	bd10      	pop	{r4, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40023800 	.word	0x40023800
 8000758:	9fffffff 	.word	0x9fffffff
 800075c:	fffcffff 	.word	0xfffcffff

08000760 <RCC_RTCCLKCmd>:
 8000760:	4b01      	ldr	r3, [pc, #4]	; (8000768 <RCC_RTCCLKCmd+0x8>)
 8000762:	6018      	str	r0, [r3, #0]
 8000764:	4770      	bx	lr
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	424706d8 	.word	0x424706d8

0800076c <RCC_RTCResetCmd>:
 800076c:	4b01      	ldr	r3, [pc, #4]	; (8000774 <RCC_RTCResetCmd+0x8>)
 800076e:	6018      	str	r0, [r3, #0]
 8000770:	4770      	bx	lr
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	424706dc 	.word	0x424706dc

08000778 <RCC_AHBPeriphClockCmd>:
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <RCC_AHBPeriphClockCmd+0x14>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	2900      	cmp	r1, #0
 800077e:	d102      	bne.n	8000786 <RCC_AHBPeriphClockCmd+0xe>
 8000780:	4382      	bics	r2, r0
 8000782:	61da      	str	r2, [r3, #28]
 8000784:	4770      	bx	lr
 8000786:	4310      	orrs	r0, r2
 8000788:	61d8      	str	r0, [r3, #28]
 800078a:	e7fb      	b.n	8000784 <RCC_AHBPeriphClockCmd+0xc>
 800078c:	40023800 	.word	0x40023800

08000790 <RCC_APB2PeriphClockCmd>:
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <RCC_APB2PeriphClockCmd+0x14>)
 8000792:	6a1a      	ldr	r2, [r3, #32]
 8000794:	2900      	cmp	r1, #0
 8000796:	d102      	bne.n	800079e <RCC_APB2PeriphClockCmd+0xe>
 8000798:	4382      	bics	r2, r0
 800079a:	621a      	str	r2, [r3, #32]
 800079c:	4770      	bx	lr
 800079e:	4310      	orrs	r0, r2
 80007a0:	6218      	str	r0, [r3, #32]
 80007a2:	e7fb      	b.n	800079c <RCC_APB2PeriphClockCmd+0xc>
 80007a4:	40023800 	.word	0x40023800

080007a8 <RCC_APB1PeriphClockCmd>:
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <RCC_APB1PeriphClockCmd+0x14>)
 80007aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007ac:	2900      	cmp	r1, #0
 80007ae:	d102      	bne.n	80007b6 <RCC_APB1PeriphClockCmd+0xe>
 80007b0:	4382      	bics	r2, r0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
 80007b4:	4770      	bx	lr
 80007b6:	4310      	orrs	r0, r2
 80007b8:	6258      	str	r0, [r3, #36]	; 0x24
 80007ba:	e7fb      	b.n	80007b4 <RCC_APB1PeriphClockCmd+0xc>
 80007bc:	40023800 	.word	0x40023800

080007c0 <RCC_AHBPeriphResetCmd>:
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <RCC_AHBPeriphResetCmd+0x14>)
 80007c2:	691a      	ldr	r2, [r3, #16]
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d102      	bne.n	80007ce <RCC_AHBPeriphResetCmd+0xe>
 80007c8:	4382      	bics	r2, r0
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	4770      	bx	lr
 80007ce:	4310      	orrs	r0, r2
 80007d0:	6118      	str	r0, [r3, #16]
 80007d2:	e7fb      	b.n	80007cc <RCC_AHBPeriphResetCmd+0xc>
 80007d4:	40023800 	.word	0x40023800

080007d8 <RCC_APB2PeriphResetCmd>:
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <RCC_APB2PeriphResetCmd+0x14>)
 80007da:	695a      	ldr	r2, [r3, #20]
 80007dc:	2900      	cmp	r1, #0
 80007de:	d102      	bne.n	80007e6 <RCC_APB2PeriphResetCmd+0xe>
 80007e0:	4382      	bics	r2, r0
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4770      	bx	lr
 80007e6:	4310      	orrs	r0, r2
 80007e8:	6158      	str	r0, [r3, #20]
 80007ea:	e7fb      	b.n	80007e4 <RCC_APB2PeriphResetCmd+0xc>
 80007ec:	40023800 	.word	0x40023800

080007f0 <RCC_APB1PeriphResetCmd>:
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <RCC_APB1PeriphResetCmd+0x14>)
 80007f2:	699a      	ldr	r2, [r3, #24]
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d102      	bne.n	80007fe <RCC_APB1PeriphResetCmd+0xe>
 80007f8:	4382      	bics	r2, r0
 80007fa:	619a      	str	r2, [r3, #24]
 80007fc:	4770      	bx	lr
 80007fe:	4310      	orrs	r0, r2
 8000800:	6198      	str	r0, [r3, #24]
 8000802:	e7fb      	b.n	80007fc <RCC_APB1PeriphResetCmd+0xc>
 8000804:	40023800 	.word	0x40023800

08000808 <RCC_AHBPeriphClockLPModeCmd>:
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <RCC_AHBPeriphClockLPModeCmd+0x14>)
 800080a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800080c:	2900      	cmp	r1, #0
 800080e:	d102      	bne.n	8000816 <RCC_AHBPeriphClockLPModeCmd+0xe>
 8000810:	4382      	bics	r2, r0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
 8000814:	4770      	bx	lr
 8000816:	4310      	orrs	r0, r2
 8000818:	6298      	str	r0, [r3, #40]	; 0x28
 800081a:	e7fb      	b.n	8000814 <RCC_AHBPeriphClockLPModeCmd+0xc>
 800081c:	40023800 	.word	0x40023800

08000820 <RCC_APB2PeriphClockLPModeCmd>:
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 8000822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000824:	2900      	cmp	r1, #0
 8000826:	d102      	bne.n	800082e <RCC_APB2PeriphClockLPModeCmd+0xe>
 8000828:	4382      	bics	r2, r0
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
 800082c:	4770      	bx	lr
 800082e:	4310      	orrs	r0, r2
 8000830:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000832:	e7fb      	b.n	800082c <RCC_APB2PeriphClockLPModeCmd+0xc>
 8000834:	40023800 	.word	0x40023800

08000838 <RCC_APB1PeriphClockLPModeCmd>:
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <RCC_APB1PeriphClockLPModeCmd+0x14>)
 800083a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800083c:	2900      	cmp	r1, #0
 800083e:	d102      	bne.n	8000846 <RCC_APB1PeriphClockLPModeCmd+0xe>
 8000840:	4382      	bics	r2, r0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
 8000844:	4770      	bx	lr
 8000846:	4310      	orrs	r0, r2
 8000848:	6318      	str	r0, [r3, #48]	; 0x30
 800084a:	e7fb      	b.n	8000844 <RCC_APB1PeriphClockLPModeCmd+0xc>
 800084c:	40023800 	.word	0x40023800

08000850 <RCC_ITConfig>:
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <RCC_ITConfig+0x14>)
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	2900      	cmp	r1, #0
 8000856:	d102      	bne.n	800085e <RCC_ITConfig+0xe>
 8000858:	4382      	bics	r2, r0
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	4770      	bx	lr
 800085e:	4310      	orrs	r0, r2
 8000860:	7018      	strb	r0, [r3, #0]
 8000862:	e7fb      	b.n	800085c <RCC_ITConfig+0xc>
 8000864:	4002380d 	.word	0x4002380d

08000868 <RCC_GetFlagStatus>:
 8000868:	0943      	lsrs	r3, r0, #5
 800086a:	2b01      	cmp	r3, #1
 800086c:	d008      	beq.n	8000880 <RCC_GetFlagStatus+0x18>
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <RCC_GetFlagStatus+0x20>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	221f      	movs	r2, #31
 8000874:	4010      	ands	r0, r2
 8000876:	40c3      	lsrs	r3, r0
 8000878:	1c18      	adds	r0, r3, #0
 800087a:	2301      	movs	r3, #1
 800087c:	4018      	ands	r0, r3
 800087e:	4770      	bx	lr
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <RCC_GetFlagStatus+0x20>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	e7f5      	b.n	8000872 <RCC_GetFlagStatus+0xa>
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40023800 	.word	0x40023800

0800088c <RCC_ClearFlag>:
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <RCC_ClearFlag+0x10>)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000892:	0452      	lsls	r2, r2, #17
 8000894:	430a      	orrs	r2, r1
 8000896:	635a      	str	r2, [r3, #52]	; 0x34
 8000898:	4770      	bx	lr
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40023800 	.word	0x40023800

080008a0 <RCC_GetITStatus>:
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <RCC_GetITStatus+0x10>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	4018      	ands	r0, r3
 80008a6:	1e43      	subs	r3, r0, #1
 80008a8:	4198      	sbcs	r0, r3
 80008aa:	b2c0      	uxtb	r0, r0
 80008ac:	4770      	bx	lr
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40023800 	.word	0x40023800

080008b4 <RCC_ClearITPendingBit>:
 80008b4:	4b01      	ldr	r3, [pc, #4]	; (80008bc <RCC_ClearITPendingBit+0x8>)
 80008b6:	7018      	strb	r0, [r3, #0]
 80008b8:	4770      	bx	lr
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	4002380e 	.word	0x4002380e

080008c0 <TIM_DeInit>:
 80008c0:	b508      	push	{r3, lr}
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	4298      	cmp	r0, r3
 80008c8:	d021      	beq.n	800090e <TIM_DeInit+0x4e>
 80008ca:	4b35      	ldr	r3, [pc, #212]	; (80009a0 <TIM_DeInit+0xe0>)
 80008cc:	4298      	cmp	r0, r3
 80008ce:	d027      	beq.n	8000920 <TIM_DeInit+0x60>
 80008d0:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <TIM_DeInit+0xe4>)
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d02d      	beq.n	8000932 <TIM_DeInit+0x72>
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <TIM_DeInit+0xe8>)
 80008d8:	4298      	cmp	r0, r3
 80008da:	d033      	beq.n	8000944 <TIM_DeInit+0x84>
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <TIM_DeInit+0xec>)
 80008de:	4298      	cmp	r0, r3
 80008e0:	d039      	beq.n	8000956 <TIM_DeInit+0x96>
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <TIM_DeInit+0xf0>)
 80008e4:	4298      	cmp	r0, r3
 80008e6:	d03f      	beq.n	8000968 <TIM_DeInit+0xa8>
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <TIM_DeInit+0xf4>)
 80008ea:	4298      	cmp	r0, r3
 80008ec:	d045      	beq.n	800097a <TIM_DeInit+0xba>
 80008ee:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <TIM_DeInit+0xf8>)
 80008f0:	4298      	cmp	r0, r3
 80008f2:	d04b      	beq.n	800098c <TIM_DeInit+0xcc>
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <TIM_DeInit+0xfc>)
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d000      	beq.n	80008fc <TIM_DeInit+0x3c>
 80008fa:	bd08      	pop	{r3, pc}
 80008fc:	2010      	movs	r0, #16
 80008fe:	2101      	movs	r1, #1
 8000900:	f7ff ff6a 	bl	80007d8 <RCC_APB2PeriphResetCmd>
 8000904:	2010      	movs	r0, #16
 8000906:	2100      	movs	r1, #0
 8000908:	f7ff ff66 	bl	80007d8 <RCC_APB2PeriphResetCmd>
 800090c:	e7f5      	b.n	80008fa <TIM_DeInit+0x3a>
 800090e:	2001      	movs	r0, #1
 8000910:	2101      	movs	r1, #1
 8000912:	f7ff ff6d 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000916:	2001      	movs	r0, #1
 8000918:	2100      	movs	r1, #0
 800091a:	f7ff ff69 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 800091e:	e7ec      	b.n	80008fa <TIM_DeInit+0x3a>
 8000920:	2002      	movs	r0, #2
 8000922:	2101      	movs	r1, #1
 8000924:	f7ff ff64 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000928:	2002      	movs	r0, #2
 800092a:	2100      	movs	r1, #0
 800092c:	f7ff ff60 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000930:	e7e3      	b.n	80008fa <TIM_DeInit+0x3a>
 8000932:	2004      	movs	r0, #4
 8000934:	2101      	movs	r1, #1
 8000936:	f7ff ff5b 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 800093a:	2004      	movs	r0, #4
 800093c:	2100      	movs	r1, #0
 800093e:	f7ff ff57 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000942:	e7da      	b.n	80008fa <TIM_DeInit+0x3a>
 8000944:	2008      	movs	r0, #8
 8000946:	2101      	movs	r1, #1
 8000948:	f7ff ff52 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 800094c:	2008      	movs	r0, #8
 800094e:	2100      	movs	r1, #0
 8000950:	f7ff ff4e 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000954:	e7d1      	b.n	80008fa <TIM_DeInit+0x3a>
 8000956:	2010      	movs	r0, #16
 8000958:	2101      	movs	r1, #1
 800095a:	f7ff ff49 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 800095e:	2010      	movs	r0, #16
 8000960:	2100      	movs	r1, #0
 8000962:	f7ff ff45 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000966:	e7c8      	b.n	80008fa <TIM_DeInit+0x3a>
 8000968:	2020      	movs	r0, #32
 800096a:	2101      	movs	r1, #1
 800096c:	f7ff ff40 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000970:	2020      	movs	r0, #32
 8000972:	2100      	movs	r1, #0
 8000974:	f7ff ff3c 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8000978:	e7bf      	b.n	80008fa <TIM_DeInit+0x3a>
 800097a:	2004      	movs	r0, #4
 800097c:	2101      	movs	r1, #1
 800097e:	f7ff ff2b 	bl	80007d8 <RCC_APB2PeriphResetCmd>
 8000982:	2004      	movs	r0, #4
 8000984:	2100      	movs	r1, #0
 8000986:	f7ff ff27 	bl	80007d8 <RCC_APB2PeriphResetCmd>
 800098a:	e7b6      	b.n	80008fa <TIM_DeInit+0x3a>
 800098c:	2008      	movs	r0, #8
 800098e:	2101      	movs	r1, #1
 8000990:	f7ff ff22 	bl	80007d8 <RCC_APB2PeriphResetCmd>
 8000994:	2008      	movs	r0, #8
 8000996:	2100      	movs	r1, #0
 8000998:	f7ff ff1e 	bl	80007d8 <RCC_APB2PeriphResetCmd>
 800099c:	e7ad      	b.n	80008fa <TIM_DeInit+0x3a>
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40000400 	.word	0x40000400
 80009a4:	40000800 	.word	0x40000800
 80009a8:	40000c00 	.word	0x40000c00
 80009ac:	40001000 	.word	0x40001000
 80009b0:	40001400 	.word	0x40001400
 80009b4:	40010800 	.word	0x40010800
 80009b8:	40010c00 	.word	0x40010c00
 80009bc:	40011000 	.word	0x40011000

080009c0 <TIM_TimeBaseInit>:
 80009c0:	6803      	ldr	r3, [r0, #0]
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	b510      	push	{r4, lr}
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	05d2      	lsls	r2, r2, #23
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d01a      	beq.n	8000a04 <TIM_TimeBaseInit+0x44>
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <TIM_TimeBaseInit+0x50>)
 80009d0:	4290      	cmp	r0, r2
 80009d2:	d017      	beq.n	8000a04 <TIM_TimeBaseInit+0x44>
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <TIM_TimeBaseInit+0x54>)
 80009d6:	4290      	cmp	r0, r2
 80009d8:	d014      	beq.n	8000a04 <TIM_TimeBaseInit+0x44>
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <TIM_TimeBaseInit+0x58>)
 80009dc:	4290      	cmp	r0, r2
 80009de:	d011      	beq.n	8000a04 <TIM_TimeBaseInit+0x44>
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <TIM_TimeBaseInit+0x5c>)
 80009e2:	4290      	cmp	r0, r2
 80009e4:	d006      	beq.n	80009f4 <TIM_TimeBaseInit+0x34>
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <TIM_TimeBaseInit+0x60>)
 80009e8:	4290      	cmp	r0, r2
 80009ea:	d003      	beq.n	80009f4 <TIM_TimeBaseInit+0x34>
 80009ec:	4c0d      	ldr	r4, [pc, #52]	; (8000a24 <TIM_TimeBaseInit+0x64>)
 80009ee:	890a      	ldrh	r2, [r1, #8]
 80009f0:	4023      	ands	r3, r4
 80009f2:	4313      	orrs	r3, r2
 80009f4:	8003      	strh	r3, [r0, #0]
 80009f6:	684b      	ldr	r3, [r1, #4]
 80009f8:	62c3      	str	r3, [r0, #44]	; 0x2c
 80009fa:	880b      	ldrh	r3, [r1, #0]
 80009fc:	8503      	strh	r3, [r0, #40]	; 0x28
 80009fe:	2301      	movs	r3, #1
 8000a00:	8283      	strh	r3, [r0, #20]
 8000a02:	bd10      	pop	{r4, pc}
 8000a04:	2270      	movs	r2, #112	; 0x70
 8000a06:	4393      	bics	r3, r2
 8000a08:	884a      	ldrh	r2, [r1, #2]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	e7e8      	b.n	80009e0 <TIM_TimeBaseInit+0x20>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40000400 	.word	0x40000400
 8000a14:	40000800 	.word	0x40000800
 8000a18:	40000c00 	.word	0x40000c00
 8000a1c:	40001000 	.word	0x40001000
 8000a20:	40001400 	.word	0x40001400
 8000a24:	fffffcff 	.word	0xfffffcff

08000a28 <TIM_TimeBaseStructInit>:
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	6043      	str	r3, [r0, #4]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	8003      	strh	r3, [r0, #0]
 8000a32:	8103      	strh	r3, [r0, #8]
 8000a34:	8043      	strh	r3, [r0, #2]
 8000a36:	4770      	bx	lr

08000a38 <TIM_PrescalerConfig>:
 8000a38:	8501      	strh	r1, [r0, #40]	; 0x28
 8000a3a:	8282      	strh	r2, [r0, #20]
 8000a3c:	4770      	bx	lr
 8000a3e:	46c0      	nop			; (mov r8, r8)

08000a40 <TIM_CounterModeConfig>:
 8000a40:	6802      	ldr	r2, [r0, #0]
 8000a42:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <TIM_CounterModeConfig+0xc>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	4319      	orrs	r1, r3
 8000a48:	8001      	strh	r1, [r0, #0]
 8000a4a:	4770      	bx	lr
 8000a4c:	0000ff8f 	.word	0x0000ff8f

08000a50 <TIM_SetCounter>:
 8000a50:	6241      	str	r1, [r0, #36]	; 0x24
 8000a52:	4770      	bx	lr

08000a54 <TIM_SetAutoreload>:
 8000a54:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000a56:	4770      	bx	lr

08000a58 <TIM_GetCounter>:
 8000a58:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000a5a:	4770      	bx	lr

08000a5c <TIM_GetPrescaler>:
 8000a5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000a5e:	b280      	uxth	r0, r0
 8000a60:	4770      	bx	lr
 8000a62:	46c0      	nop			; (mov r8, r8)

08000a64 <TIM_UpdateDisableConfig>:
 8000a64:	2900      	cmp	r1, #0
 8000a66:	d104      	bne.n	8000a72 <TIM_UpdateDisableConfig+0xe>
 8000a68:	6802      	ldr	r2, [r0, #0]
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <TIM_UpdateDisableConfig+0x1c>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	8003      	strh	r3, [r0, #0]
 8000a70:	4770      	bx	lr
 8000a72:	6803      	ldr	r3, [r0, #0]
 8000a74:	2202      	movs	r2, #2
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	8003      	strh	r3, [r0, #0]
 8000a7c:	e7f8      	b.n	8000a70 <TIM_UpdateDisableConfig+0xc>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	0000fffd 	.word	0x0000fffd

08000a84 <TIM_UpdateRequestConfig>:
 8000a84:	2900      	cmp	r1, #0
 8000a86:	d104      	bne.n	8000a92 <TIM_UpdateRequestConfig+0xe>
 8000a88:	6802      	ldr	r2, [r0, #0]
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <TIM_UpdateRequestConfig+0x1c>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	8003      	strh	r3, [r0, #0]
 8000a90:	4770      	bx	lr
 8000a92:	6803      	ldr	r3, [r0, #0]
 8000a94:	2204      	movs	r2, #4
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	8003      	strh	r3, [r0, #0]
 8000a9c:	e7f8      	b.n	8000a90 <TIM_UpdateRequestConfig+0xc>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	0000fffb 	.word	0x0000fffb

08000aa4 <TIM_ARRPreloadConfig>:
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d104      	bne.n	8000ab2 <TIM_ARRPreloadConfig+0xe>
 8000aa8:	6802      	ldr	r2, [r0, #0]
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <TIM_ARRPreloadConfig+0x1c>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	8003      	strh	r3, [r0, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	6803      	ldr	r3, [r0, #0]
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	8003      	strh	r3, [r0, #0]
 8000abc:	e7f8      	b.n	8000ab0 <TIM_ARRPreloadConfig+0xc>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	0000ff7f 	.word	0x0000ff7f

08000ac4 <TIM_SelectOnePulseMode>:
 8000ac4:	6802      	ldr	r2, [r0, #0]
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <TIM_SelectOnePulseMode+0x14>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	8003      	strh	r3, [r0, #0]
 8000acc:	6803      	ldr	r3, [r0, #0]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4319      	orrs	r1, r3
 8000ad2:	8001      	strh	r1, [r0, #0]
 8000ad4:	4770      	bx	lr
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	0000fff7 	.word	0x0000fff7

08000adc <TIM_SetClockDivision>:
 8000adc:	6802      	ldr	r2, [r0, #0]
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <TIM_SetClockDivision+0x14>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	8003      	strh	r3, [r0, #0]
 8000ae4:	6803      	ldr	r3, [r0, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4319      	orrs	r1, r3
 8000aea:	8001      	strh	r1, [r0, #0]
 8000aec:	4770      	bx	lr
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	0000fcff 	.word	0x0000fcff

08000af4 <TIM_Cmd>:
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d104      	bne.n	8000b02 <TIM_Cmd+0xe>
 8000af8:	6802      	ldr	r2, [r0, #0]
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <TIM_Cmd+0x1c>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	8003      	strh	r3, [r0, #0]
 8000b00:	4770      	bx	lr
 8000b02:	6803      	ldr	r3, [r0, #0]
 8000b04:	2201      	movs	r2, #1
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	8003      	strh	r3, [r0, #0]
 8000b0c:	e7f8      	b.n	8000b00 <TIM_Cmd+0xc>
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	0000fffe 	.word	0x0000fffe

08000b14 <TIM_OC1Init>:
 8000b14:	6a02      	ldr	r2, [r0, #32]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <TIM_OC1Init+0x2c>)
 8000b18:	b530      	push	{r4, r5, lr}
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	8403      	strh	r3, [r0, #32]
 8000b1e:	6a04      	ldr	r4, [r0, #32]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <TIM_OC1Init+0x30>)
 8000b22:	6982      	ldr	r2, [r0, #24]
 8000b24:	884d      	ldrh	r5, [r1, #2]
 8000b26:	401a      	ands	r2, r3
 8000b28:	880b      	ldrh	r3, [r1, #0]
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <TIM_OC1Init+0x34>)
 8000b2e:	401c      	ands	r4, r3
 8000b30:	890b      	ldrh	r3, [r1, #8]
 8000b32:	6849      	ldr	r1, [r1, #4]
 8000b34:	432b      	orrs	r3, r5
 8000b36:	4323      	orrs	r3, r4
 8000b38:	6341      	str	r1, [r0, #52]	; 0x34
 8000b3a:	8302      	strh	r2, [r0, #24]
 8000b3c:	8403      	strh	r3, [r0, #32]
 8000b3e:	bd30      	pop	{r4, r5, pc}
 8000b40:	0000fffe 	.word	0x0000fffe
 8000b44:	0000ff8c 	.word	0x0000ff8c
 8000b48:	0000fffd 	.word	0x0000fffd

08000b4c <TIM_OC2Init>:
 8000b4c:	6a02      	ldr	r2, [r0, #32]
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <TIM_OC2Init+0x38>)
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4013      	ands	r3, r2
 8000b54:	8403      	strh	r3, [r0, #32]
 8000b56:	6a04      	ldr	r4, [r0, #32]
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <TIM_OC2Init+0x3c>)
 8000b5a:	6982      	ldr	r2, [r0, #24]
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	880b      	ldrh	r3, [r1, #0]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	431a      	orrs	r2, r3
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <TIM_OC2Init+0x40>)
 8000b66:	b292      	uxth	r2, r2
 8000b68:	4023      	ands	r3, r4
 8000b6a:	890c      	ldrh	r4, [r1, #8]
 8000b6c:	0124      	lsls	r4, r4, #4
 8000b6e:	4323      	orrs	r3, r4
 8000b70:	884c      	ldrh	r4, [r1, #2]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	0124      	lsls	r4, r4, #4
 8000b76:	6849      	ldr	r1, [r1, #4]
 8000b78:	4323      	orrs	r3, r4
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	6381      	str	r1, [r0, #56]	; 0x38
 8000b7e:	8302      	strh	r2, [r0, #24]
 8000b80:	8403      	strh	r3, [r0, #32]
 8000b82:	bd10      	pop	{r4, pc}
 8000b84:	0000ffef 	.word	0x0000ffef
 8000b88:	00008fff 	.word	0x00008fff
 8000b8c:	0000ffdf 	.word	0x0000ffdf

08000b90 <TIM_OC3Init>:
 8000b90:	6a02      	ldr	r2, [r0, #32]
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <TIM_OC3Init+0x34>)
 8000b94:	b510      	push	{r4, lr}
 8000b96:	4013      	ands	r3, r2
 8000b98:	8403      	strh	r3, [r0, #32]
 8000b9a:	6a04      	ldr	r4, [r0, #32]
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <TIM_OC3Init+0x38>)
 8000b9e:	69c2      	ldr	r2, [r0, #28]
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	880b      	ldrh	r3, [r1, #0]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <TIM_OC3Init+0x3c>)
 8000ba8:	4023      	ands	r3, r4
 8000baa:	890c      	ldrh	r4, [r1, #8]
 8000bac:	0224      	lsls	r4, r4, #8
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	884c      	ldrh	r4, [r1, #2]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	0224      	lsls	r4, r4, #8
 8000bb6:	6849      	ldr	r1, [r1, #4]
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000bbe:	8382      	strh	r2, [r0, #28]
 8000bc0:	8403      	strh	r3, [r0, #32]
 8000bc2:	bd10      	pop	{r4, pc}
 8000bc4:	0000feff 	.word	0x0000feff
 8000bc8:	0000ff8f 	.word	0x0000ff8f
 8000bcc:	0000fdff 	.word	0x0000fdff

08000bd0 <TIM_OC4Init>:
 8000bd0:	6a02      	ldr	r2, [r0, #32]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <TIM_OC4Init+0x38>)
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	8403      	strh	r3, [r0, #32]
 8000bda:	6a04      	ldr	r4, [r0, #32]
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <TIM_OC4Init+0x3c>)
 8000bde:	69c2      	ldr	r2, [r0, #28]
 8000be0:	401a      	ands	r2, r3
 8000be2:	880b      	ldrh	r3, [r1, #0]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	431a      	orrs	r2, r3
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <TIM_OC4Init+0x40>)
 8000bea:	b292      	uxth	r2, r2
 8000bec:	4023      	ands	r3, r4
 8000bee:	890c      	ldrh	r4, [r1, #8]
 8000bf0:	0324      	lsls	r4, r4, #12
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	884c      	ldrh	r4, [r1, #2]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	0324      	lsls	r4, r4, #12
 8000bfa:	6849      	ldr	r1, [r1, #4]
 8000bfc:	4323      	orrs	r3, r4
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	6401      	str	r1, [r0, #64]	; 0x40
 8000c02:	8382      	strh	r2, [r0, #28]
 8000c04:	8403      	strh	r3, [r0, #32]
 8000c06:	bd10      	pop	{r4, pc}
 8000c08:	0000efff 	.word	0x0000efff
 8000c0c:	00008fff 	.word	0x00008fff
 8000c10:	0000dfff 	.word	0x0000dfff

08000c14 <TIM_OCStructInit>:
 8000c14:	2300      	movs	r3, #0
 8000c16:	8003      	strh	r3, [r0, #0]
 8000c18:	8043      	strh	r3, [r0, #2]
 8000c1a:	6043      	str	r3, [r0, #4]
 8000c1c:	8103      	strh	r3, [r0, #8]
 8000c1e:	4770      	bx	lr

08000c20 <TIM_SelectOCxM>:
 8000c20:	b530      	push	{r4, r5, lr}
 8000c22:	6a03      	ldr	r3, [r0, #32]
 8000c24:	2401      	movs	r4, #1
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	408c      	lsls	r4, r1
 8000c2a:	43a3      	bics	r3, r4
 8000c2c:	1c05      	adds	r5, r0, #0
 8000c2e:	8403      	strh	r3, [r0, #32]
 8000c30:	2308      	movs	r3, #8
 8000c32:	1c08      	adds	r0, r1, #0
 8000c34:	3518      	adds	r5, #24
 8000c36:	4398      	bics	r0, r3
 8000c38:	d00d      	beq.n	8000c56 <TIM_SelectOCxM+0x36>
 8000c3a:	3904      	subs	r1, #4
 8000c3c:	b289      	uxth	r1, r1
 8000c3e:	0849      	lsrs	r1, r1, #1
 8000c40:	1949      	adds	r1, r1, r5
 8000c42:	6808      	ldr	r0, [r1, #0]
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <TIM_SelectOCxM+0x4c>)
 8000c46:	0212      	lsls	r2, r2, #8
 8000c48:	4003      	ands	r3, r0
 8000c4a:	600b      	str	r3, [r1, #0]
 8000c4c:	680b      	ldr	r3, [r1, #0]
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	431a      	orrs	r2, r3
 8000c52:	600a      	str	r2, [r1, #0]
 8000c54:	bd30      	pop	{r4, r5, pc}
 8000c56:	0849      	lsrs	r1, r1, #1
 8000c58:	1869      	adds	r1, r5, r1
 8000c5a:	680b      	ldr	r3, [r1, #0]
 8000c5c:	2070      	movs	r0, #112	; 0x70
 8000c5e:	4383      	bics	r3, r0
 8000c60:	600b      	str	r3, [r1, #0]
 8000c62:	680b      	ldr	r3, [r1, #0]
 8000c64:	431a      	orrs	r2, r3
 8000c66:	600a      	str	r2, [r1, #0]
 8000c68:	e7f4      	b.n	8000c54 <TIM_SelectOCxM+0x34>
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	ffff8fff 	.word	0xffff8fff

08000c70 <TIM_SetCompare1>:
 8000c70:	6341      	str	r1, [r0, #52]	; 0x34
 8000c72:	4770      	bx	lr

08000c74 <TIM_SetCompare2>:
 8000c74:	6381      	str	r1, [r0, #56]	; 0x38
 8000c76:	4770      	bx	lr

08000c78 <TIM_SetCompare3>:
 8000c78:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000c7a:	4770      	bx	lr

08000c7c <TIM_SetCompare4>:
 8000c7c:	6401      	str	r1, [r0, #64]	; 0x40
 8000c7e:	4770      	bx	lr

08000c80 <TIM_ForcedOC1Config>:
 8000c80:	6982      	ldr	r2, [r0, #24]
 8000c82:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <TIM_ForcedOC1Config+0xc>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	4319      	orrs	r1, r3
 8000c88:	8301      	strh	r1, [r0, #24]
 8000c8a:	4770      	bx	lr
 8000c8c:	0000ff8f 	.word	0x0000ff8f

08000c90 <TIM_ForcedOC2Config>:
 8000c90:	6982      	ldr	r2, [r0, #24]
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <TIM_ForcedOC2Config+0x14>)
 8000c94:	401a      	ands	r2, r3
 8000c96:	020b      	lsls	r3, r1, #8
 8000c98:	1c11      	adds	r1, r2, #0
 8000c9a:	4319      	orrs	r1, r3
 8000c9c:	b289      	uxth	r1, r1
 8000c9e:	8301      	strh	r1, [r0, #24]
 8000ca0:	4770      	bx	lr
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	00008fff 	.word	0x00008fff

08000ca8 <TIM_ForcedOC3Config>:
 8000ca8:	69c2      	ldr	r2, [r0, #28]
 8000caa:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <TIM_ForcedOC3Config+0xc>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	4319      	orrs	r1, r3
 8000cb0:	8381      	strh	r1, [r0, #28]
 8000cb2:	4770      	bx	lr
 8000cb4:	0000ff8f 	.word	0x0000ff8f

08000cb8 <TIM_ForcedOC4Config>:
 8000cb8:	69c2      	ldr	r2, [r0, #28]
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <TIM_ForcedOC4Config+0x14>)
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	020b      	lsls	r3, r1, #8
 8000cc0:	1c11      	adds	r1, r2, #0
 8000cc2:	4319      	orrs	r1, r3
 8000cc4:	b289      	uxth	r1, r1
 8000cc6:	8381      	strh	r1, [r0, #28]
 8000cc8:	4770      	bx	lr
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	00008fff 	.word	0x00008fff

08000cd0 <TIM_OC1PreloadConfig>:
 8000cd0:	6982      	ldr	r2, [r0, #24]
 8000cd2:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <TIM_OC1PreloadConfig+0xc>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	4319      	orrs	r1, r3
 8000cd8:	8301      	strh	r1, [r0, #24]
 8000cda:	4770      	bx	lr
 8000cdc:	0000fff7 	.word	0x0000fff7

08000ce0 <TIM_OC2PreloadConfig>:
 8000ce0:	6982      	ldr	r2, [r0, #24]
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <TIM_OC2PreloadConfig+0x14>)
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	020b      	lsls	r3, r1, #8
 8000ce8:	1c11      	adds	r1, r2, #0
 8000cea:	4319      	orrs	r1, r3
 8000cec:	b289      	uxth	r1, r1
 8000cee:	8301      	strh	r1, [r0, #24]
 8000cf0:	4770      	bx	lr
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	0000f7ff 	.word	0x0000f7ff

08000cf8 <TIM_OC3PreloadConfig>:
 8000cf8:	69c2      	ldr	r2, [r0, #28]
 8000cfa:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <TIM_OC3PreloadConfig+0xc>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	4319      	orrs	r1, r3
 8000d00:	8381      	strh	r1, [r0, #28]
 8000d02:	4770      	bx	lr
 8000d04:	0000fff7 	.word	0x0000fff7

08000d08 <TIM_OC4PreloadConfig>:
 8000d08:	69c2      	ldr	r2, [r0, #28]
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <TIM_OC4PreloadConfig+0x14>)
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	020b      	lsls	r3, r1, #8
 8000d10:	1c11      	adds	r1, r2, #0
 8000d12:	4319      	orrs	r1, r3
 8000d14:	b289      	uxth	r1, r1
 8000d16:	8381      	strh	r1, [r0, #28]
 8000d18:	4770      	bx	lr
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	0000f7ff 	.word	0x0000f7ff

08000d20 <TIM_OC1FastConfig>:
 8000d20:	6982      	ldr	r2, [r0, #24]
 8000d22:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <TIM_OC1FastConfig+0xc>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	4319      	orrs	r1, r3
 8000d28:	8301      	strh	r1, [r0, #24]
 8000d2a:	4770      	bx	lr
 8000d2c:	0000fffb 	.word	0x0000fffb

08000d30 <TIM_OC2FastConfig>:
 8000d30:	6982      	ldr	r2, [r0, #24]
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <TIM_OC2FastConfig+0x14>)
 8000d34:	401a      	ands	r2, r3
 8000d36:	020b      	lsls	r3, r1, #8
 8000d38:	1c11      	adds	r1, r2, #0
 8000d3a:	4319      	orrs	r1, r3
 8000d3c:	b289      	uxth	r1, r1
 8000d3e:	8301      	strh	r1, [r0, #24]
 8000d40:	4770      	bx	lr
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	0000fbff 	.word	0x0000fbff

08000d48 <TIM_OC3FastConfig>:
 8000d48:	69c2      	ldr	r2, [r0, #28]
 8000d4a:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <TIM_OC3FastConfig+0xc>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	4319      	orrs	r1, r3
 8000d50:	8381      	strh	r1, [r0, #28]
 8000d52:	4770      	bx	lr
 8000d54:	0000fffb 	.word	0x0000fffb

08000d58 <TIM_OC4FastConfig>:
 8000d58:	69c2      	ldr	r2, [r0, #28]
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <TIM_OC4FastConfig+0x14>)
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	020b      	lsls	r3, r1, #8
 8000d60:	1c11      	adds	r1, r2, #0
 8000d62:	4319      	orrs	r1, r3
 8000d64:	b289      	uxth	r1, r1
 8000d66:	8381      	strh	r1, [r0, #28]
 8000d68:	4770      	bx	lr
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	0000fbff 	.word	0x0000fbff

08000d70 <TIM_ClearOC1Ref>:
 8000d70:	6982      	ldr	r2, [r0, #24]
 8000d72:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <TIM_ClearOC1Ref+0xc>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	4319      	orrs	r1, r3
 8000d78:	8301      	strh	r1, [r0, #24]
 8000d7a:	4770      	bx	lr
 8000d7c:	0000ff7f 	.word	0x0000ff7f

08000d80 <TIM_ClearOC2Ref>:
 8000d80:	6983      	ldr	r3, [r0, #24]
 8000d82:	0209      	lsls	r1, r1, #8
 8000d84:	045b      	lsls	r3, r3, #17
 8000d86:	0c5b      	lsrs	r3, r3, #17
 8000d88:	4319      	orrs	r1, r3
 8000d8a:	b289      	uxth	r1, r1
 8000d8c:	8301      	strh	r1, [r0, #24]
 8000d8e:	4770      	bx	lr

08000d90 <TIM_ClearOC3Ref>:
 8000d90:	69c2      	ldr	r2, [r0, #28]
 8000d92:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <TIM_ClearOC3Ref+0xc>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	4319      	orrs	r1, r3
 8000d98:	8381      	strh	r1, [r0, #28]
 8000d9a:	4770      	bx	lr
 8000d9c:	0000ff7f 	.word	0x0000ff7f

08000da0 <TIM_ClearOC4Ref>:
 8000da0:	69c3      	ldr	r3, [r0, #28]
 8000da2:	0209      	lsls	r1, r1, #8
 8000da4:	045b      	lsls	r3, r3, #17
 8000da6:	0c5b      	lsrs	r3, r3, #17
 8000da8:	4319      	orrs	r1, r3
 8000daa:	b289      	uxth	r1, r1
 8000dac:	8381      	strh	r1, [r0, #28]
 8000dae:	4770      	bx	lr

08000db0 <TIM_OC1PolarityConfig>:
 8000db0:	6a02      	ldr	r2, [r0, #32]
 8000db2:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <TIM_OC1PolarityConfig+0xc>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	4319      	orrs	r1, r3
 8000db8:	8401      	strh	r1, [r0, #32]
 8000dba:	4770      	bx	lr
 8000dbc:	0000fffd 	.word	0x0000fffd

08000dc0 <TIM_OC2PolarityConfig>:
 8000dc0:	6a02      	ldr	r2, [r0, #32]
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <TIM_OC2PolarityConfig+0x14>)
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	010b      	lsls	r3, r1, #4
 8000dc8:	1c11      	adds	r1, r2, #0
 8000dca:	4319      	orrs	r1, r3
 8000dcc:	b289      	uxth	r1, r1
 8000dce:	8401      	strh	r1, [r0, #32]
 8000dd0:	4770      	bx	lr
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	0000ffdf 	.word	0x0000ffdf

08000dd8 <TIM_OC3PolarityConfig>:
 8000dd8:	6a02      	ldr	r2, [r0, #32]
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <TIM_OC3PolarityConfig+0x14>)
 8000ddc:	401a      	ands	r2, r3
 8000dde:	020b      	lsls	r3, r1, #8
 8000de0:	1c11      	adds	r1, r2, #0
 8000de2:	4319      	orrs	r1, r3
 8000de4:	b289      	uxth	r1, r1
 8000de6:	8401      	strh	r1, [r0, #32]
 8000de8:	4770      	bx	lr
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	0000fdff 	.word	0x0000fdff

08000df0 <TIM_OC4PolarityConfig>:
 8000df0:	6a02      	ldr	r2, [r0, #32]
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <TIM_OC4PolarityConfig+0x14>)
 8000df4:	401a      	ands	r2, r3
 8000df6:	030b      	lsls	r3, r1, #12
 8000df8:	1c11      	adds	r1, r2, #0
 8000dfa:	4319      	orrs	r1, r3
 8000dfc:	b289      	uxth	r1, r1
 8000dfe:	8401      	strh	r1, [r0, #32]
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	0000dfff 	.word	0x0000dfff

08000e08 <TIM_SelectOCREFClear>:
 8000e08:	6882      	ldr	r2, [r0, #8]
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <TIM_SelectOCREFClear+0x14>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	8103      	strh	r3, [r0, #8]
 8000e10:	6883      	ldr	r3, [r0, #8]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4319      	orrs	r1, r3
 8000e16:	8101      	strh	r1, [r0, #8]
 8000e18:	4770      	bx	lr
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	0000fff7 	.word	0x0000fff7

08000e20 <TIM_CCxCmd>:
 8000e20:	6a03      	ldr	r3, [r0, #32]
 8000e22:	b510      	push	{r4, lr}
 8000e24:	2401      	movs	r4, #1
 8000e26:	408c      	lsls	r4, r1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	43a3      	bics	r3, r4
 8000e2c:	8403      	strh	r3, [r0, #32]
 8000e2e:	6a03      	ldr	r3, [r0, #32]
 8000e30:	408a      	lsls	r2, r1
 8000e32:	1c11      	adds	r1, r2, #0
 8000e34:	4319      	orrs	r1, r3
 8000e36:	b289      	uxth	r1, r1
 8000e38:	8401      	strh	r1, [r0, #32]
 8000e3a:	bd10      	pop	{r4, pc}

08000e3c <TIM_ICInit>:
 8000e3c:	880b      	ldrh	r3, [r1, #0]
 8000e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d02b      	beq.n	8000e9c <TIM_ICInit+0x60>
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d04a      	beq.n	8000ede <TIM_ICInit+0xa2>
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d100      	bne.n	8000e4e <TIM_ICInit+0x12>
 8000e4c:	e06d      	b.n	8000f2a <TIM_ICInit+0xee>
 8000e4e:	6a05      	ldr	r5, [r0, #32]
 8000e50:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <TIM_ICInit+0x134>)
 8000e52:	884b      	ldrh	r3, [r1, #2]
 8000e54:	402a      	ands	r2, r5
 8000e56:	888e      	ldrh	r6, [r1, #4]
 8000e58:	890c      	ldrh	r4, [r1, #8]
 8000e5a:	8402      	strh	r2, [r0, #32]
 8000e5c:	69c7      	ldr	r7, [r0, #28]
 8000e5e:	4a45      	ldr	r2, [pc, #276]	; (8000f74 <TIM_ICInit+0x138>)
 8000e60:	0236      	lsls	r6, r6, #8
 8000e62:	403a      	ands	r2, r7
 8000e64:	4332      	orrs	r2, r6
 8000e66:	0324      	lsls	r4, r4, #12
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	6a05      	ldr	r5, [r0, #32]
 8000e6c:	4322      	orrs	r2, r4
 8000e6e:	4c42      	ldr	r4, [pc, #264]	; (8000f78 <TIM_ICInit+0x13c>)
 8000e70:	031b      	lsls	r3, r3, #12
 8000e72:	402c      	ands	r4, r5
 8000e74:	431c      	orrs	r4, r3
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	015b      	lsls	r3, r3, #5
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	8382      	strh	r2, [r0, #28]
 8000e82:	8403      	strh	r3, [r0, #32]
 8000e84:	4a3d      	ldr	r2, [pc, #244]	; (8000f7c <TIM_ICInit+0x140>)
 8000e86:	88cb      	ldrh	r3, [r1, #6]
 8000e88:	69c1      	ldr	r1, [r0, #28]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	8382      	strh	r2, [r0, #28]
 8000e90:	69c2      	ldr	r2, [r0, #28]
 8000e92:	b292      	uxth	r2, r2
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	8383      	strh	r3, [r0, #28]
 8000e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9c:	6a04      	ldr	r4, [r0, #32]
 8000e9e:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <TIM_ICInit+0x144>)
 8000ea0:	888b      	ldrh	r3, [r1, #4]
 8000ea2:	4022      	ands	r2, r4
 8000ea4:	884d      	ldrh	r5, [r1, #2]
 8000ea6:	890e      	ldrh	r6, [r1, #8]
 8000ea8:	8402      	strh	r2, [r0, #32]
 8000eaa:	6987      	ldr	r7, [r0, #24]
 8000eac:	4a35      	ldr	r2, [pc, #212]	; (8000f84 <TIM_ICInit+0x148>)
 8000eae:	0136      	lsls	r6, r6, #4
 8000eb0:	403a      	ands	r2, r7
 8000eb2:	4332      	orrs	r2, r6
 8000eb4:	b292      	uxth	r2, r2
 8000eb6:	6a04      	ldr	r4, [r0, #32]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <TIM_ICInit+0x14c>)
 8000ebc:	8302      	strh	r2, [r0, #24]
 8000ebe:	401c      	ands	r4, r3
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	432b      	orrs	r3, r5
 8000ec4:	4323      	orrs	r3, r4
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	8403      	strh	r3, [r0, #32]
 8000eca:	88ca      	ldrh	r2, [r1, #6]
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <TIM_ICInit+0x150>)
 8000ece:	6981      	ldr	r1, [r0, #24]
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	8303      	strh	r3, [r0, #24]
 8000ed4:	6983      	ldr	r3, [r0, #24]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	8303      	strh	r3, [r0, #24]
 8000edc:	e7dd      	b.n	8000e9a <TIM_ICInit+0x5e>
 8000ede:	6a05      	ldr	r5, [r0, #32]
 8000ee0:	4a2b      	ldr	r2, [pc, #172]	; (8000f90 <TIM_ICInit+0x154>)
 8000ee2:	884c      	ldrh	r4, [r1, #2]
 8000ee4:	402a      	ands	r2, r5
 8000ee6:	888b      	ldrh	r3, [r1, #4]
 8000ee8:	890e      	ldrh	r6, [r1, #8]
 8000eea:	8402      	strh	r2, [r0, #32]
 8000eec:	6987      	ldr	r7, [r0, #24]
 8000eee:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <TIM_ICInit+0x138>)
 8000ef0:	0336      	lsls	r6, r6, #12
 8000ef2:	403a      	ands	r2, r7
 8000ef4:	4332      	orrs	r2, r6
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	6a05      	ldr	r5, [r0, #32]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <TIM_ICInit+0x158>)
 8000f00:	0124      	lsls	r4, r4, #4
 8000f02:	402b      	ands	r3, r5
 8000f04:	4323      	orrs	r3, r4
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	2410      	movs	r4, #16
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	8302      	strh	r2, [r0, #24]
 8000f10:	8403      	strh	r3, [r0, #32]
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <TIM_ICInit+0x140>)
 8000f14:	88cb      	ldrh	r3, [r1, #6]
 8000f16:	6981      	ldr	r1, [r0, #24]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	8302      	strh	r2, [r0, #24]
 8000f1e:	6982      	ldr	r2, [r0, #24]
 8000f20:	b292      	uxth	r2, r2
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	8303      	strh	r3, [r0, #24]
 8000f28:	e7b7      	b.n	8000e9a <TIM_ICInit+0x5e>
 8000f2a:	6a05      	ldr	r5, [r0, #32]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <TIM_ICInit+0x15c>)
 8000f2e:	888c      	ldrh	r4, [r1, #4]
 8000f30:	402a      	ands	r2, r5
 8000f32:	884b      	ldrh	r3, [r1, #2]
 8000f34:	890e      	ldrh	r6, [r1, #8]
 8000f36:	8402      	strh	r2, [r0, #32]
 8000f38:	69c7      	ldr	r7, [r0, #28]
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <TIM_ICInit+0x148>)
 8000f3c:	0136      	lsls	r6, r6, #4
 8000f3e:	403a      	ands	r2, r7
 8000f40:	4332      	orrs	r2, r6
 8000f42:	b292      	uxth	r2, r2
 8000f44:	6a05      	ldr	r5, [r0, #32]
 8000f46:	4322      	orrs	r2, r4
 8000f48:	4c14      	ldr	r4, [pc, #80]	; (8000f9c <TIM_ICInit+0x160>)
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	402c      	ands	r4, r5
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4323      	orrs	r3, r4
 8000f58:	8382      	strh	r2, [r0, #28]
 8000f5a:	8403      	strh	r3, [r0, #32]
 8000f5c:	88ca      	ldrh	r2, [r1, #6]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <TIM_ICInit+0x150>)
 8000f60:	69c1      	ldr	r1, [r0, #28]
 8000f62:	400b      	ands	r3, r1
 8000f64:	8383      	strh	r3, [r0, #28]
 8000f66:	69c3      	ldr	r3, [r0, #28]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	8383      	strh	r3, [r0, #28]
 8000f6e:	e794      	b.n	8000e9a <TIM_ICInit+0x5e>
 8000f70:	0000efff 	.word	0x0000efff
 8000f74:	00000cff 	.word	0x00000cff
 8000f78:	00005fff 	.word	0x00005fff
 8000f7c:	0000f3ff 	.word	0x0000f3ff
 8000f80:	0000fffe 	.word	0x0000fffe
 8000f84:	0000ff0c 	.word	0x0000ff0c
 8000f88:	0000fff5 	.word	0x0000fff5
 8000f8c:	0000fff3 	.word	0x0000fff3
 8000f90:	0000ffef 	.word	0x0000ffef
 8000f94:	0000ff5f 	.word	0x0000ff5f
 8000f98:	0000feff 	.word	0x0000feff
 8000f9c:	0000f5ff 	.word	0x0000f5ff

08000fa0 <TIM_ICStructInit>:
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	8003      	strh	r3, [r0, #0]
 8000fa6:	8043      	strh	r3, [r0, #2]
 8000fa8:	8082      	strh	r2, [r0, #4]
 8000faa:	80c3      	strh	r3, [r0, #6]
 8000fac:	8103      	strh	r3, [r0, #8]
 8000fae:	4770      	bx	lr

08000fb0 <TIM_PWMIConfig>:
 8000fb0:	884b      	ldrh	r3, [r1, #2]
 8000fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb4:	425c      	negs	r4, r3
 8000fb6:	415c      	adcs	r4, r3
 8000fb8:	0062      	lsls	r2, r4, #1
 8000fba:	4657      	mov	r7, sl
 8000fbc:	4692      	mov	sl, r2
 8000fbe:	888a      	ldrh	r2, [r1, #4]
 8000fc0:	464e      	mov	r6, r9
 8000fc2:	4645      	mov	r5, r8
 8000fc4:	b4e0      	push	{r5, r6, r7}
 8000fc6:	1e55      	subs	r5, r2, #1
 8000fc8:	1e6e      	subs	r6, r5, #1
 8000fca:	41b5      	sbcs	r5, r6
 8000fcc:	2602      	movs	r6, #2
 8000fce:	1b75      	subs	r5, r6, r5
 8000fd0:	880e      	ldrh	r6, [r1, #0]
 8000fd2:	2e00      	cmp	r6, #0
 8000fd4:	d04e      	beq.n	8001074 <TIM_PWMIConfig+0xc4>
 8000fd6:	6a07      	ldr	r7, [r0, #32]
 8000fd8:	4e4f      	ldr	r6, [pc, #316]	; (8001118 <TIM_PWMIConfig+0x168>)
 8000fda:	46bc      	mov	ip, r7
 8000fdc:	1c37      	adds	r7, r6, #0
 8000fde:	4666      	mov	r6, ip
 8000fe0:	4037      	ands	r7, r6
 8000fe2:	890c      	ldrh	r4, [r1, #8]
 8000fe4:	8407      	strh	r7, [r0, #32]
 8000fe6:	6986      	ldr	r6, [r0, #24]
 8000fe8:	6a07      	ldr	r7, [r0, #32]
 8000fea:	46b0      	mov	r8, r6
 8000fec:	4e4b      	ldr	r6, [pc, #300]	; (800111c <TIM_PWMIConfig+0x16c>)
 8000fee:	46bc      	mov	ip, r7
 8000ff0:	4647      	mov	r7, r8
 8000ff2:	4037      	ands	r7, r6
 8000ff4:	46b8      	mov	r8, r7
 8000ff6:	4646      	mov	r6, r8
 8000ff8:	0327      	lsls	r7, r4, #12
 8000ffa:	4337      	orrs	r7, r6
 8000ffc:	b2be      	uxth	r6, r7
 8000ffe:	4f48      	ldr	r7, [pc, #288]	; (8001120 <TIM_PWMIConfig+0x170>)
 8001000:	0212      	lsls	r2, r2, #8
 8001002:	4332      	orrs	r2, r6
 8001004:	011e      	lsls	r6, r3, #4
 8001006:	1c3b      	adds	r3, r7, #0
 8001008:	4667      	mov	r7, ip
 800100a:	403b      	ands	r3, r7
 800100c:	4333      	orrs	r3, r6
 800100e:	b29b      	uxth	r3, r3
 8001010:	2610      	movs	r6, #16
 8001012:	4333      	orrs	r3, r6
 8001014:	b292      	uxth	r2, r2
 8001016:	8302      	strh	r2, [r0, #24]
 8001018:	8403      	strh	r3, [r0, #32]
 800101a:	4a42      	ldr	r2, [pc, #264]	; (8001124 <TIM_PWMIConfig+0x174>)
 800101c:	88cb      	ldrh	r3, [r1, #6]
 800101e:	6981      	ldr	r1, [r0, #24]
 8001020:	4657      	mov	r7, sl
 8001022:	400a      	ands	r2, r1
 8001024:	8302      	strh	r2, [r0, #24]
 8001026:	6982      	ldr	r2, [r0, #24]
 8001028:	0219      	lsls	r1, r3, #8
 800102a:	b292      	uxth	r2, r2
 800102c:	430a      	orrs	r2, r1
 800102e:	b292      	uxth	r2, r2
 8001030:	8302      	strh	r2, [r0, #24]
 8001032:	6a01      	ldr	r1, [r0, #32]
 8001034:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <TIM_PWMIConfig+0x178>)
 8001036:	400a      	ands	r2, r1
 8001038:	8402      	strh	r2, [r0, #32]
 800103a:	6986      	ldr	r6, [r0, #24]
 800103c:	0122      	lsls	r2, r4, #4
 800103e:	4c3b      	ldr	r4, [pc, #236]	; (800112c <TIM_PWMIConfig+0x17c>)
 8001040:	6a01      	ldr	r1, [r0, #32]
 8001042:	4034      	ands	r4, r6
 8001044:	4314      	orrs	r4, r2
 8001046:	4a3a      	ldr	r2, [pc, #232]	; (8001130 <TIM_PWMIConfig+0x180>)
 8001048:	b2a4      	uxth	r4, r4
 800104a:	400a      	ands	r2, r1
 800104c:	2101      	movs	r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	4325      	orrs	r5, r4
 8001052:	4317      	orrs	r7, r2
 8001054:	b2ad      	uxth	r5, r5
 8001056:	8305      	strh	r5, [r0, #24]
 8001058:	8407      	strh	r7, [r0, #32]
 800105a:	6981      	ldr	r1, [r0, #24]
 800105c:	4a35      	ldr	r2, [pc, #212]	; (8001134 <TIM_PWMIConfig+0x184>)
 800105e:	400a      	ands	r2, r1
 8001060:	8302      	strh	r2, [r0, #24]
 8001062:	6982      	ldr	r2, [r0, #24]
 8001064:	b292      	uxth	r2, r2
 8001066:	4313      	orrs	r3, r2
 8001068:	8303      	strh	r3, [r0, #24]
 800106a:	bc1c      	pop	{r2, r3, r4}
 800106c:	4690      	mov	r8, r2
 800106e:	4699      	mov	r9, r3
 8001070:	46a2      	mov	sl, r4
 8001072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001074:	890e      	ldrh	r6, [r1, #8]
 8001076:	6a07      	ldr	r7, [r0, #32]
 8001078:	46b2      	mov	sl, r6
 800107a:	4e2b      	ldr	r6, [pc, #172]	; (8001128 <TIM_PWMIConfig+0x178>)
 800107c:	46bc      	mov	ip, r7
 800107e:	1c37      	adds	r7, r6, #0
 8001080:	4666      	mov	r6, ip
 8001082:	4037      	ands	r7, r6
 8001084:	8407      	strh	r7, [r0, #32]
 8001086:	6986      	ldr	r6, [r0, #24]
 8001088:	6a07      	ldr	r7, [r0, #32]
 800108a:	46b0      	mov	r8, r6
 800108c:	4e27      	ldr	r6, [pc, #156]	; (800112c <TIM_PWMIConfig+0x17c>)
 800108e:	46bc      	mov	ip, r7
 8001090:	4647      	mov	r7, r8
 8001092:	4037      	ands	r7, r6
 8001094:	46b8      	mov	r8, r7
 8001096:	4657      	mov	r7, sl
 8001098:	4646      	mov	r6, r8
 800109a:	013f      	lsls	r7, r7, #4
 800109c:	4337      	orrs	r7, r6
 800109e:	b2bf      	uxth	r7, r7
 80010a0:	433a      	orrs	r2, r7
 80010a2:	2601      	movs	r6, #1
 80010a4:	4f22      	ldr	r7, [pc, #136]	; (8001130 <TIM_PWMIConfig+0x180>)
 80010a6:	4690      	mov	r8, r2
 80010a8:	4662      	mov	r2, ip
 80010aa:	46b4      	mov	ip, r6
 80010ac:	4017      	ands	r7, r2
 80010ae:	4662      	mov	r2, ip
 80010b0:	4313      	orrs	r3, r2
 80010b2:	433b      	orrs	r3, r7
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4646      	mov	r6, r8
 80010b8:	8306      	strh	r6, [r0, #24]
 80010ba:	8403      	strh	r3, [r0, #32]
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <TIM_PWMIConfig+0x184>)
 80010be:	88cb      	ldrh	r3, [r1, #6]
 80010c0:	6981      	ldr	r1, [r0, #24]
 80010c2:	4656      	mov	r6, sl
 80010c4:	400a      	ands	r2, r1
 80010c6:	8302      	strh	r2, [r0, #24]
 80010c8:	6982      	ldr	r2, [r0, #24]
 80010ca:	022d      	lsls	r5, r5, #8
 80010cc:	b292      	uxth	r2, r2
 80010ce:	431a      	orrs	r2, r3
 80010d0:	8302      	strh	r2, [r0, #24]
 80010d2:	6a01      	ldr	r1, [r0, #32]
 80010d4:	4a10      	ldr	r2, [pc, #64]	; (8001118 <TIM_PWMIConfig+0x168>)
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	400a      	ands	r2, r1
 80010da:	8402      	strh	r2, [r0, #32]
 80010dc:	6987      	ldr	r7, [r0, #24]
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <TIM_PWMIConfig+0x16c>)
 80010e0:	6a01      	ldr	r1, [r0, #32]
 80010e2:	4017      	ands	r7, r2
 80010e4:	0332      	lsls	r2, r6, #12
 80010e6:	1c3e      	adds	r6, r7, #0
 80010e8:	4316      	orrs	r6, r2
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <TIM_PWMIConfig+0x170>)
 80010ec:	b2b6      	uxth	r6, r6
 80010ee:	4011      	ands	r1, r2
 80010f0:	2210      	movs	r2, #16
 80010f2:	4311      	orrs	r1, r2
 80010f4:	4335      	orrs	r5, r6
 80010f6:	0162      	lsls	r2, r4, #5
 80010f8:	1c0c      	adds	r4, r1, #0
 80010fa:	4314      	orrs	r4, r2
 80010fc:	b2ad      	uxth	r5, r5
 80010fe:	8305      	strh	r5, [r0, #24]
 8001100:	8404      	strh	r4, [r0, #32]
 8001102:	6981      	ldr	r1, [r0, #24]
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <TIM_PWMIConfig+0x174>)
 8001106:	400a      	ands	r2, r1
 8001108:	8302      	strh	r2, [r0, #24]
 800110a:	6982      	ldr	r2, [r0, #24]
 800110c:	b292      	uxth	r2, r2
 800110e:	4313      	orrs	r3, r2
 8001110:	b29b      	uxth	r3, r3
 8001112:	8303      	strh	r3, [r0, #24]
 8001114:	e7a9      	b.n	800106a <TIM_PWMIConfig+0xba>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	0000ffef 	.word	0x0000ffef
 800111c:	00000cff 	.word	0x00000cff
 8001120:	0000ff5f 	.word	0x0000ff5f
 8001124:	0000f3ff 	.word	0x0000f3ff
 8001128:	0000fffe 	.word	0x0000fffe
 800112c:	0000ff0c 	.word	0x0000ff0c
 8001130:	0000fff5 	.word	0x0000fff5
 8001134:	0000fff3 	.word	0x0000fff3

08001138 <TIM_GetCapture1>:
 8001138:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800113a:	4770      	bx	lr

0800113c <TIM_GetCapture2>:
 800113c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800113e:	4770      	bx	lr

08001140 <TIM_GetCapture3>:
 8001140:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001142:	4770      	bx	lr

08001144 <TIM_GetCapture4>:
 8001144:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001146:	4770      	bx	lr

08001148 <TIM_SetIC1Prescaler>:
 8001148:	6982      	ldr	r2, [r0, #24]
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <TIM_SetIC1Prescaler+0x14>)
 800114c:	4013      	ands	r3, r2
 800114e:	8303      	strh	r3, [r0, #24]
 8001150:	6983      	ldr	r3, [r0, #24]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4319      	orrs	r1, r3
 8001156:	8301      	strh	r1, [r0, #24]
 8001158:	4770      	bx	lr
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	0000fff3 	.word	0x0000fff3

08001160 <TIM_SetIC2Prescaler>:
 8001160:	6982      	ldr	r2, [r0, #24]
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <TIM_SetIC2Prescaler+0x18>)
 8001164:	0209      	lsls	r1, r1, #8
 8001166:	4013      	ands	r3, r2
 8001168:	8303      	strh	r3, [r0, #24]
 800116a:	6983      	ldr	r3, [r0, #24]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4319      	orrs	r1, r3
 8001170:	b289      	uxth	r1, r1
 8001172:	8301      	strh	r1, [r0, #24]
 8001174:	4770      	bx	lr
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	0000f3ff 	.word	0x0000f3ff

0800117c <TIM_SetIC3Prescaler>:
 800117c:	69c2      	ldr	r2, [r0, #28]
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <TIM_SetIC3Prescaler+0x14>)
 8001180:	4013      	ands	r3, r2
 8001182:	8383      	strh	r3, [r0, #28]
 8001184:	69c3      	ldr	r3, [r0, #28]
 8001186:	b29b      	uxth	r3, r3
 8001188:	4319      	orrs	r1, r3
 800118a:	8381      	strh	r1, [r0, #28]
 800118c:	4770      	bx	lr
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	0000fff3 	.word	0x0000fff3

08001194 <TIM_SetIC4Prescaler>:
 8001194:	69c2      	ldr	r2, [r0, #28]
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <TIM_SetIC4Prescaler+0x18>)
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	4013      	ands	r3, r2
 800119c:	8383      	strh	r3, [r0, #28]
 800119e:	69c3      	ldr	r3, [r0, #28]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4319      	orrs	r1, r3
 80011a4:	b289      	uxth	r1, r1
 80011a6:	8381      	strh	r1, [r0, #28]
 80011a8:	4770      	bx	lr
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	0000f3ff 	.word	0x0000f3ff

080011b0 <TIM_ITConfig>:
 80011b0:	68c3      	ldr	r3, [r0, #12]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	d102      	bne.n	80011be <TIM_ITConfig+0xe>
 80011b8:	438b      	bics	r3, r1
 80011ba:	8183      	strh	r3, [r0, #12]
 80011bc:	4770      	bx	lr
 80011be:	4319      	orrs	r1, r3
 80011c0:	8181      	strh	r1, [r0, #12]
 80011c2:	e7fb      	b.n	80011bc <TIM_ITConfig+0xc>

080011c4 <TIM_GenerateEvent>:
 80011c4:	8281      	strh	r1, [r0, #20]
 80011c6:	4770      	bx	lr

080011c8 <TIM_GetFlagStatus>:
 80011c8:	6900      	ldr	r0, [r0, #16]
 80011ca:	4008      	ands	r0, r1
 80011cc:	1e43      	subs	r3, r0, #1
 80011ce:	4198      	sbcs	r0, r3
 80011d0:	b2c0      	uxtb	r0, r0
 80011d2:	4770      	bx	lr

080011d4 <TIM_ClearFlag>:
 80011d4:	43c9      	mvns	r1, r1
 80011d6:	b289      	uxth	r1, r1
 80011d8:	8201      	strh	r1, [r0, #16]
 80011da:	4770      	bx	lr

080011dc <TIM_GetITStatus>:
 80011dc:	6903      	ldr	r3, [r0, #16]
 80011de:	68c0      	ldr	r0, [r0, #12]
 80011e0:	b282      	uxth	r2, r0
 80011e2:	2000      	movs	r0, #0
 80011e4:	420b      	tst	r3, r1
 80011e6:	d003      	beq.n	80011f0 <TIM_GetITStatus+0x14>
 80011e8:	4011      	ands	r1, r2
 80011ea:	1e4a      	subs	r2, r1, #1
 80011ec:	4191      	sbcs	r1, r2
 80011ee:	b2c8      	uxtb	r0, r1
 80011f0:	4770      	bx	lr
 80011f2:	46c0      	nop			; (mov r8, r8)

080011f4 <TIM_ClearITPendingBit>:
 80011f4:	43c9      	mvns	r1, r1
 80011f6:	b289      	uxth	r1, r1
 80011f8:	8201      	strh	r1, [r0, #16]
 80011fa:	4770      	bx	lr

080011fc <TIM_DMAConfig>:
 80011fc:	4311      	orrs	r1, r2
 80011fe:	2348      	movs	r3, #72	; 0x48
 8001200:	52c1      	strh	r1, [r0, r3]
 8001202:	4770      	bx	lr

08001204 <TIM_DMACmd>:
 8001204:	68c3      	ldr	r3, [r0, #12]
 8001206:	b29b      	uxth	r3, r3
 8001208:	2a00      	cmp	r2, #0
 800120a:	d102      	bne.n	8001212 <TIM_DMACmd+0xe>
 800120c:	438b      	bics	r3, r1
 800120e:	8183      	strh	r3, [r0, #12]
 8001210:	4770      	bx	lr
 8001212:	4319      	orrs	r1, r3
 8001214:	8181      	strh	r1, [r0, #12]
 8001216:	e7fb      	b.n	8001210 <TIM_DMACmd+0xc>

08001218 <TIM_SelectCCDMA>:
 8001218:	2900      	cmp	r1, #0
 800121a:	d104      	bne.n	8001226 <TIM_SelectCCDMA+0xe>
 800121c:	6842      	ldr	r2, [r0, #4]
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <TIM_SelectCCDMA+0x1c>)
 8001220:	4013      	ands	r3, r2
 8001222:	8083      	strh	r3, [r0, #4]
 8001224:	4770      	bx	lr
 8001226:	6843      	ldr	r3, [r0, #4]
 8001228:	2208      	movs	r2, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	8083      	strh	r3, [r0, #4]
 8001230:	e7f8      	b.n	8001224 <TIM_SelectCCDMA+0xc>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	0000fff7 	.word	0x0000fff7

08001238 <TIM_InternalClockConfig>:
 8001238:	6882      	ldr	r2, [r0, #8]
 800123a:	4b02      	ldr	r3, [pc, #8]	; (8001244 <TIM_InternalClockConfig+0xc>)
 800123c:	4013      	ands	r3, r2
 800123e:	8103      	strh	r3, [r0, #8]
 8001240:	4770      	bx	lr
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	0000fff8 	.word	0x0000fff8

08001248 <TIM_ITRxExternalClockConfig>:
 8001248:	6882      	ldr	r2, [r0, #8]
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <TIM_ITRxExternalClockConfig+0x18>)
 800124c:	4013      	ands	r3, r2
 800124e:	4319      	orrs	r1, r3
 8001250:	8101      	strh	r1, [r0, #8]
 8001252:	6883      	ldr	r3, [r0, #8]
 8001254:	2207      	movs	r2, #7
 8001256:	b29b      	uxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	8103      	strh	r3, [r0, #8]
 800125c:	4770      	bx	lr
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	0000ff8f 	.word	0x0000ff8f

08001264 <TIM_TIxExternalClockConfig>:
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	6a05      	ldr	r5, [r0, #32]
 8001268:	2960      	cmp	r1, #96	; 0x60
 800126a:	d01e      	beq.n	80012aa <TIM_TIxExternalClockConfig+0x46>
 800126c:	4c1b      	ldr	r4, [pc, #108]	; (80012dc <TIM_TIxExternalClockConfig+0x78>)
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	402c      	ands	r4, r5
 8001272:	8404      	strh	r4, [r0, #32]
 8001274:	6985      	ldr	r5, [r0, #24]
 8001276:	4c1a      	ldr	r4, [pc, #104]	; (80012e0 <TIM_TIxExternalClockConfig+0x7c>)
 8001278:	6a06      	ldr	r6, [r0, #32]
 800127a:	4025      	ands	r5, r4
 800127c:	2401      	movs	r4, #1
 800127e:	4325      	orrs	r5, r4
 8001280:	b2ad      	uxth	r5, r5
 8001282:	432b      	orrs	r3, r5
 8001284:	4d17      	ldr	r5, [pc, #92]	; (80012e4 <TIM_TIxExternalClockConfig+0x80>)
 8001286:	b29b      	uxth	r3, r3
 8001288:	4035      	ands	r5, r6
 800128a:	432c      	orrs	r4, r5
 800128c:	b2a4      	uxth	r4, r4
 800128e:	4322      	orrs	r2, r4
 8001290:	8303      	strh	r3, [r0, #24]
 8001292:	8402      	strh	r2, [r0, #32]
 8001294:	6882      	ldr	r2, [r0, #8]
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <TIM_TIxExternalClockConfig+0x84>)
 8001298:	4013      	ands	r3, r2
 800129a:	4319      	orrs	r1, r3
 800129c:	8101      	strh	r1, [r0, #8]
 800129e:	6883      	ldr	r3, [r0, #8]
 80012a0:	2207      	movs	r2, #7
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	8103      	strh	r3, [r0, #8]
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
 80012aa:	4c10      	ldr	r4, [pc, #64]	; (80012ec <TIM_TIxExternalClockConfig+0x88>)
 80012ac:	402c      	ands	r4, r5
 80012ae:	8404      	strh	r4, [r0, #32]
 80012b0:	6986      	ldr	r6, [r0, #24]
 80012b2:	4c0f      	ldr	r4, [pc, #60]	; (80012f0 <TIM_TIxExternalClockConfig+0x8c>)
 80012b4:	6a05      	ldr	r5, [r0, #32]
 80012b6:	4026      	ands	r6, r4
 80012b8:	2480      	movs	r4, #128	; 0x80
 80012ba:	0064      	lsls	r4, r4, #1
 80012bc:	4326      	orrs	r6, r4
 80012be:	031c      	lsls	r4, r3, #12
 80012c0:	1c33      	adds	r3, r6, #0
 80012c2:	4323      	orrs	r3, r4
 80012c4:	4c0b      	ldr	r4, [pc, #44]	; (80012f4 <TIM_TIxExternalClockConfig+0x90>)
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4025      	ands	r5, r4
 80012ca:	2410      	movs	r4, #16
 80012cc:	4325      	orrs	r5, r4
 80012ce:	0114      	lsls	r4, r2, #4
 80012d0:	1c2a      	adds	r2, r5, #0
 80012d2:	4322      	orrs	r2, r4
 80012d4:	b292      	uxth	r2, r2
 80012d6:	8303      	strh	r3, [r0, #24]
 80012d8:	8402      	strh	r2, [r0, #32]
 80012da:	e7db      	b.n	8001294 <TIM_TIxExternalClockConfig+0x30>
 80012dc:	0000fffe 	.word	0x0000fffe
 80012e0:	0000ff0c 	.word	0x0000ff0c
 80012e4:	0000fff5 	.word	0x0000fff5
 80012e8:	0000ff8f 	.word	0x0000ff8f
 80012ec:	0000ffef 	.word	0x0000ffef
 80012f0:	00000cff 	.word	0x00000cff
 80012f4:	0000ff5f 	.word	0x0000ff5f

080012f8 <TIM_ETRClockMode1Config>:
 80012f8:	b510      	push	{r4, lr}
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	6884      	ldr	r4, [r0, #8]
 80012fe:	431a      	orrs	r2, r3
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	401c      	ands	r4, r3
 8001304:	4322      	orrs	r2, r4
 8001306:	b292      	uxth	r2, r2
 8001308:	4311      	orrs	r1, r2
 800130a:	8101      	strh	r1, [r0, #8]
 800130c:	6882      	ldr	r2, [r0, #8]
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <TIM_ETRClockMode1Config+0x24>)
 8001310:	4013      	ands	r3, r2
 8001312:	2277      	movs	r2, #119	; 0x77
 8001314:	4313      	orrs	r3, r2
 8001316:	8103      	strh	r3, [r0, #8]
 8001318:	bd10      	pop	{r4, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	0000ff88 	.word	0x0000ff88

08001320 <TIM_ETRClockMode2Config>:
 8001320:	b510      	push	{r4, lr}
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	6884      	ldr	r4, [r0, #8]
 8001326:	431a      	orrs	r2, r3
 8001328:	23ff      	movs	r3, #255	; 0xff
 800132a:	401c      	ands	r4, r3
 800132c:	4322      	orrs	r2, r4
 800132e:	b292      	uxth	r2, r2
 8001330:	4311      	orrs	r1, r2
 8001332:	8101      	strh	r1, [r0, #8]
 8001334:	6882      	ldr	r2, [r0, #8]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	b292      	uxth	r2, r2
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	4313      	orrs	r3, r2
 800133e:	8103      	strh	r3, [r0, #8]
 8001340:	bd10      	pop	{r4, pc}
 8001342:	46c0      	nop			; (mov r8, r8)

08001344 <TIM_SelectInputTrigger>:
 8001344:	6882      	ldr	r2, [r0, #8]
 8001346:	4b02      	ldr	r3, [pc, #8]	; (8001350 <TIM_SelectInputTrigger+0xc>)
 8001348:	4013      	ands	r3, r2
 800134a:	4319      	orrs	r1, r3
 800134c:	8101      	strh	r1, [r0, #8]
 800134e:	4770      	bx	lr
 8001350:	0000ff8f 	.word	0x0000ff8f

08001354 <TIM_SelectOutputTrigger>:
 8001354:	6842      	ldr	r2, [r0, #4]
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <TIM_SelectOutputTrigger+0x14>)
 8001358:	4013      	ands	r3, r2
 800135a:	8083      	strh	r3, [r0, #4]
 800135c:	6843      	ldr	r3, [r0, #4]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4319      	orrs	r1, r3
 8001362:	8081      	strh	r1, [r0, #4]
 8001364:	4770      	bx	lr
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	0000ff8f 	.word	0x0000ff8f

0800136c <TIM_SelectSlaveMode>:
 800136c:	6882      	ldr	r2, [r0, #8]
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <TIM_SelectSlaveMode+0x14>)
 8001370:	4013      	ands	r3, r2
 8001372:	8103      	strh	r3, [r0, #8]
 8001374:	6883      	ldr	r3, [r0, #8]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4319      	orrs	r1, r3
 800137a:	8101      	strh	r1, [r0, #8]
 800137c:	4770      	bx	lr
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	0000fff8 	.word	0x0000fff8

08001384 <TIM_SelectMasterSlaveMode>:
 8001384:	6882      	ldr	r2, [r0, #8]
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <TIM_SelectMasterSlaveMode+0x14>)
 8001388:	4013      	ands	r3, r2
 800138a:	8103      	strh	r3, [r0, #8]
 800138c:	6883      	ldr	r3, [r0, #8]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4319      	orrs	r1, r3
 8001392:	8101      	strh	r1, [r0, #8]
 8001394:	4770      	bx	lr
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	0000ff7f 	.word	0x0000ff7f

0800139c <TIM_ETRConfig>:
 800139c:	b530      	push	{r4, r5, lr}
 800139e:	6885      	ldr	r5, [r0, #8]
 80013a0:	24ff      	movs	r4, #255	; 0xff
 80013a2:	402c      	ands	r4, r5
 80013a4:	4321      	orrs	r1, r4
 80013a6:	430a      	orrs	r2, r1
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	431a      	orrs	r2, r3
 80013ac:	b292      	uxth	r2, r2
 80013ae:	8102      	strh	r2, [r0, #8]
 80013b0:	bd30      	pop	{r4, r5, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)

080013b4 <TIM_EncoderInterfaceConfig>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	6887      	ldr	r7, [r0, #8]
 80013b8:	4c09      	ldr	r4, [pc, #36]	; (80013e0 <TIM_EncoderInterfaceConfig+0x2c>)
 80013ba:	6985      	ldr	r5, [r0, #24]
 80013bc:	403c      	ands	r4, r7
 80013be:	4321      	orrs	r1, r4
 80013c0:	4c08      	ldr	r4, [pc, #32]	; (80013e4 <TIM_EncoderInterfaceConfig+0x30>)
 80013c2:	6a06      	ldr	r6, [r0, #32]
 80013c4:	402c      	ands	r4, r5
 80013c6:	2502      	movs	r5, #2
 80013c8:	35ff      	adds	r5, #255	; 0xff
 80013ca:	432c      	orrs	r4, r5
 80013cc:	4d06      	ldr	r5, [pc, #24]	; (80013e8 <TIM_EncoderInterfaceConfig+0x34>)
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4035      	ands	r5, r6
 80013d2:	432a      	orrs	r2, r5
 80013d4:	431a      	orrs	r2, r3
 80013d6:	b292      	uxth	r2, r2
 80013d8:	8101      	strh	r1, [r0, #8]
 80013da:	8304      	strh	r4, [r0, #24]
 80013dc:	8402      	strh	r2, [r0, #32]
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e0:	0000fff8 	.word	0x0000fff8
 80013e4:	0000fcfc 	.word	0x0000fcfc
 80013e8:	0000ffdd 	.word	0x0000ffdd

080013ec <TIM_SelectHallSensor>:
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d104      	bne.n	80013fa <TIM_SelectHallSensor+0xe>
 80013f0:	6842      	ldr	r2, [r0, #4]
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <TIM_SelectHallSensor+0x1c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	8083      	strh	r3, [r0, #4]
 80013f8:	4770      	bx	lr
 80013fa:	6843      	ldr	r3, [r0, #4]
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	8083      	strh	r3, [r0, #4]
 8001404:	e7f8      	b.n	80013f8 <TIM_SelectHallSensor+0xc>
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	0000ff7f 	.word	0x0000ff7f

0800140c <TIM_RemapConfig>:
 800140c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800140e:	0c0b      	lsrs	r3, r1, #16
 8001410:	401a      	ands	r2, r3
 8001412:	2350      	movs	r3, #80	; 0x50
 8001414:	52c2      	strh	r2, [r0, r3]
 8001416:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001418:	4311      	orrs	r1, r2
 800141a:	b289      	uxth	r1, r1
 800141c:	52c1      	strh	r1, [r0, r3]
 800141e:	4770      	bx	lr

08001420 <LCD_DeInit>:
 8001420:	b510      	push	{r4, lr}
 8001422:	2480      	movs	r4, #128	; 0x80
 8001424:	00a4      	lsls	r4, r4, #2
 8001426:	1c20      	adds	r0, r4, #0
 8001428:	2101      	movs	r1, #1
 800142a:	f7ff f9e1 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 800142e:	1c20      	adds	r0, r4, #0
 8001430:	2100      	movs	r1, #0
 8001432:	f7ff f9dd 	bl	80007f0 <RCC_APB1PeriphResetCmd>
 8001436:	bd10      	pop	{r4, pc}

08001438 <LCD_Init>:
 8001438:	b510      	push	{r4, lr}
 800143a:	4c0e      	ldr	r4, [pc, #56]	; (8001474 <LCD_Init+0x3c>)
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <LCD_Init+0x40>)
 800143e:	6862      	ldr	r2, [r4, #4]
 8001440:	4013      	ands	r3, r2
 8001442:	6063      	str	r3, [r4, #4]
 8001444:	6801      	ldr	r1, [r0, #0]
 8001446:	6863      	ldr	r3, [r4, #4]
 8001448:	6842      	ldr	r2, [r0, #4]
 800144a:	430b      	orrs	r3, r1
 800144c:	4313      	orrs	r3, r2
 800144e:	6063      	str	r3, [r4, #4]
 8001450:	2120      	movs	r1, #32
 8001452:	68a3      	ldr	r3, [r4, #8]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <LCD_Init+0x3c>)
 8001456:	4219      	tst	r1, r3
 8001458:	d0fb      	beq.n	8001452 <LCD_Init+0x1a>
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	217e      	movs	r1, #126	; 0x7e
 800145e:	438b      	bics	r3, r1
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	6881      	ldr	r1, [r0, #8]
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	430b      	orrs	r3, r1
 8001468:	68c1      	ldr	r1, [r0, #12]
 800146a:	430b      	orrs	r3, r1
 800146c:	6901      	ldr	r1, [r0, #16]
 800146e:	430b      	orrs	r3, r1
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	bd10      	pop	{r4, pc}
 8001474:	40002400 	.word	0x40002400
 8001478:	fc03ffff 	.word	0xfc03ffff

0800147c <LCD_StructInit>:
 800147c:	2300      	movs	r3, #0
 800147e:	6003      	str	r3, [r0, #0]
 8001480:	6043      	str	r3, [r0, #4]
 8001482:	6083      	str	r3, [r0, #8]
 8001484:	60c3      	str	r3, [r0, #12]
 8001486:	6103      	str	r3, [r0, #16]
 8001488:	4770      	bx	lr
 800148a:	46c0      	nop			; (mov r8, r8)

0800148c <LCD_Cmd>:
 800148c:	4b01      	ldr	r3, [pc, #4]	; (8001494 <LCD_Cmd+0x8>)
 800148e:	6018      	str	r0, [r3, #0]
 8001490:	4770      	bx	lr
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	42048000 	.word	0x42048000

08001498 <LCD_WaitForSynchro>:
 8001498:	4902      	ldr	r1, [pc, #8]	; (80014a4 <LCD_WaitForSynchro+0xc>)
 800149a:	2220      	movs	r2, #32
 800149c:	688b      	ldr	r3, [r1, #8]
 800149e:	421a      	tst	r2, r3
 80014a0:	d0fc      	beq.n	800149c <LCD_WaitForSynchro+0x4>
 80014a2:	4770      	bx	lr
 80014a4:	40002400 	.word	0x40002400

080014a8 <LCD_HighDriveCmd>:
 80014a8:	4b01      	ldr	r3, [pc, #4]	; (80014b0 <LCD_HighDriveCmd+0x8>)
 80014aa:	6018      	str	r0, [r3, #0]
 80014ac:	4770      	bx	lr
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	42048080 	.word	0x42048080

080014b4 <LCD_MuxSegmentCmd>:
 80014b4:	4b01      	ldr	r3, [pc, #4]	; (80014bc <LCD_MuxSegmentCmd+0x8>)
 80014b6:	6018      	str	r0, [r3, #0]
 80014b8:	4770      	bx	lr
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	4204801c 	.word	0x4204801c

080014c0 <LCD_PulseOnDurationConfig>:
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <LCD_PulseOnDurationConfig+0x14>)
 80014c2:	2170      	movs	r1, #112	; 0x70
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	438a      	bics	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4310      	orrs	r0, r2
 80014ce:	6058      	str	r0, [r3, #4]
 80014d0:	4770      	bx	lr
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40002400 	.word	0x40002400

080014d8 <LCD_DeadTimeConfig>:
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <LCD_DeadTimeConfig+0x14>)
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <LCD_DeadTimeConfig+0x18>)
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	400a      	ands	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4310      	orrs	r0, r2
 80014e6:	6058      	str	r0, [r3, #4]
 80014e8:	4770      	bx	lr
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40002400 	.word	0x40002400
 80014f0:	fffffc7f 	.word	0xfffffc7f

080014f4 <LCD_BlinkConfig>:
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <LCD_BlinkConfig+0x18>)
 80014f6:	b510      	push	{r4, lr}
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <LCD_BlinkConfig+0x1c>)
 80014fa:	685c      	ldr	r4, [r3, #4]
 80014fc:	4022      	ands	r2, r4
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4311      	orrs	r1, r2
 8001504:	4308      	orrs	r0, r1
 8001506:	6058      	str	r0, [r3, #4]
 8001508:	bd10      	pop	{r4, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	40002400 	.word	0x40002400
 8001510:	fffc1fff 	.word	0xfffc1fff

08001514 <LCD_ContrastConfig>:
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <LCD_ContrastConfig+0x14>)
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <LCD_ContrastConfig+0x18>)
 8001518:	6859      	ldr	r1, [r3, #4]
 800151a:	400a      	ands	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4310      	orrs	r0, r2
 8001522:	6058      	str	r0, [r3, #4]
 8001524:	4770      	bx	lr
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	40002400 	.word	0x40002400
 800152c:	ffffe3ff 	.word	0xffffe3ff

08001530 <LCD_Write>:
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <LCD_Write+0xc>)
 8001532:	0080      	lsls	r0, r0, #2
 8001534:	18c0      	adds	r0, r0, r3
 8001536:	6041      	str	r1, [r0, #4]
 8001538:	4770      	bx	lr
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	40002410 	.word	0x40002410

08001540 <LCD_UpdateDisplayRequest>:
 8001540:	4b01      	ldr	r3, [pc, #4]	; (8001548 <LCD_UpdateDisplayRequest+0x8>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	4770      	bx	lr
 8001548:	42048108 	.word	0x42048108

0800154c <LCD_ITConfig>:
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <LCD_ITConfig+0x14>)
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	2900      	cmp	r1, #0
 8001552:	d102      	bne.n	800155a <LCD_ITConfig+0xe>
 8001554:	4382      	bics	r2, r0
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	4770      	bx	lr
 800155a:	4310      	orrs	r0, r2
 800155c:	6058      	str	r0, [r3, #4]
 800155e:	e7fb      	b.n	8001558 <LCD_ITConfig+0xc>
 8001560:	40002400 	.word	0x40002400

08001564 <LCD_GetFlagStatus>:
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <LCD_GetFlagStatus+0x10>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4018      	ands	r0, r3
 800156a:	1e43      	subs	r3, r0, #1
 800156c:	4198      	sbcs	r0, r3
 800156e:	b2c0      	uxtb	r0, r0
 8001570:	4770      	bx	lr
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	40002400 	.word	0x40002400

08001578 <LCD_ClearFlag>:
 8001578:	4b01      	ldr	r3, [pc, #4]	; (8001580 <LCD_ClearFlag+0x8>)
 800157a:	60d8      	str	r0, [r3, #12]
 800157c:	4770      	bx	lr
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40002400 	.word	0x40002400

08001584 <LCD_GetITStatus>:
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <LCD_GetITStatus+0x18>)
 8001586:	6899      	ldr	r1, [r3, #8]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	2300      	movs	r3, #0
 800158c:	4202      	tst	r2, r0
 800158e:	d003      	beq.n	8001598 <LCD_GetITStatus+0x14>
 8001590:	4008      	ands	r0, r1
 8001592:	1e41      	subs	r1, r0, #1
 8001594:	4188      	sbcs	r0, r1
 8001596:	b2c3      	uxtb	r3, r0
 8001598:	1c18      	adds	r0, r3, #0
 800159a:	4770      	bx	lr
 800159c:	40002400 	.word	0x40002400

080015a0 <LCD_ClearITPendingBit>:
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <LCD_ClearITPendingBit+0x8>)
 80015a2:	60d8      	str	r0, [r3, #12]
 80015a4:	4770      	bx	lr
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40002400 	.word	0x40002400

080015ac <__gnu_thumb1_case_uhi>:
 80015ac:	b403      	push	{r0, r1}
 80015ae:	4671      	mov	r1, lr
 80015b0:	0849      	lsrs	r1, r1, #1
 80015b2:	0040      	lsls	r0, r0, #1
 80015b4:	0049      	lsls	r1, r1, #1
 80015b6:	5a09      	ldrh	r1, [r1, r0]
 80015b8:	0049      	lsls	r1, r1, #1
 80015ba:	448e      	add	lr, r1
 80015bc:	bc03      	pop	{r0, r1}
 80015be:	4770      	bx	lr

080015c0 <__aeabi_uidiv>:
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d034      	beq.n	800162e <.udivsi3_skip_div0_test+0x6a>

080015c4 <.udivsi3_skip_div0_test>:
 80015c4:	2301      	movs	r3, #1
 80015c6:	2200      	movs	r2, #0
 80015c8:	b410      	push	{r4}
 80015ca:	4288      	cmp	r0, r1
 80015cc:	d32c      	bcc.n	8001628 <.udivsi3_skip_div0_test+0x64>
 80015ce:	2401      	movs	r4, #1
 80015d0:	0724      	lsls	r4, r4, #28
 80015d2:	42a1      	cmp	r1, r4
 80015d4:	d204      	bcs.n	80015e0 <.udivsi3_skip_div0_test+0x1c>
 80015d6:	4281      	cmp	r1, r0
 80015d8:	d202      	bcs.n	80015e0 <.udivsi3_skip_div0_test+0x1c>
 80015da:	0109      	lsls	r1, r1, #4
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	e7f8      	b.n	80015d2 <.udivsi3_skip_div0_test+0xe>
 80015e0:	00e4      	lsls	r4, r4, #3
 80015e2:	42a1      	cmp	r1, r4
 80015e4:	d204      	bcs.n	80015f0 <.udivsi3_skip_div0_test+0x2c>
 80015e6:	4281      	cmp	r1, r0
 80015e8:	d202      	bcs.n	80015f0 <.udivsi3_skip_div0_test+0x2c>
 80015ea:	0049      	lsls	r1, r1, #1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	e7f8      	b.n	80015e2 <.udivsi3_skip_div0_test+0x1e>
 80015f0:	4288      	cmp	r0, r1
 80015f2:	d301      	bcc.n	80015f8 <.udivsi3_skip_div0_test+0x34>
 80015f4:	1a40      	subs	r0, r0, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	084c      	lsrs	r4, r1, #1
 80015fa:	42a0      	cmp	r0, r4
 80015fc:	d302      	bcc.n	8001604 <.udivsi3_skip_div0_test+0x40>
 80015fe:	1b00      	subs	r0, r0, r4
 8001600:	085c      	lsrs	r4, r3, #1
 8001602:	4322      	orrs	r2, r4
 8001604:	088c      	lsrs	r4, r1, #2
 8001606:	42a0      	cmp	r0, r4
 8001608:	d302      	bcc.n	8001610 <.udivsi3_skip_div0_test+0x4c>
 800160a:	1b00      	subs	r0, r0, r4
 800160c:	089c      	lsrs	r4, r3, #2
 800160e:	4322      	orrs	r2, r4
 8001610:	08cc      	lsrs	r4, r1, #3
 8001612:	42a0      	cmp	r0, r4
 8001614:	d302      	bcc.n	800161c <.udivsi3_skip_div0_test+0x58>
 8001616:	1b00      	subs	r0, r0, r4
 8001618:	08dc      	lsrs	r4, r3, #3
 800161a:	4322      	orrs	r2, r4
 800161c:	2800      	cmp	r0, #0
 800161e:	d003      	beq.n	8001628 <.udivsi3_skip_div0_test+0x64>
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	d001      	beq.n	8001628 <.udivsi3_skip_div0_test+0x64>
 8001624:	0909      	lsrs	r1, r1, #4
 8001626:	e7e3      	b.n	80015f0 <.udivsi3_skip_div0_test+0x2c>
 8001628:	1c10      	adds	r0, r2, #0
 800162a:	bc10      	pop	{r4}
 800162c:	4770      	bx	lr
 800162e:	2800      	cmp	r0, #0
 8001630:	d001      	beq.n	8001636 <.udivsi3_skip_div0_test+0x72>
 8001632:	2000      	movs	r0, #0
 8001634:	43c0      	mvns	r0, r0
 8001636:	b407      	push	{r0, r1, r2}
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <.udivsi3_skip_div0_test+0x80>)
 800163a:	a102      	add	r1, pc, #8	; (adr r1, 8001644 <.udivsi3_skip_div0_test+0x80>)
 800163c:	1840      	adds	r0, r0, r1
 800163e:	9002      	str	r0, [sp, #8]
 8001640:	bd03      	pop	{r0, r1, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	000000d9 	.word	0x000000d9

08001648 <__aeabi_uidivmod>:
 8001648:	2900      	cmp	r1, #0
 800164a:	d0f0      	beq.n	800162e <.udivsi3_skip_div0_test+0x6a>
 800164c:	b503      	push	{r0, r1, lr}
 800164e:	f7ff ffb9 	bl	80015c4 <.udivsi3_skip_div0_test>
 8001652:	bc0e      	pop	{r1, r2, r3}
 8001654:	4342      	muls	r2, r0
 8001656:	1a89      	subs	r1, r1, r2
 8001658:	4718      	bx	r3
 800165a:	46c0      	nop			; (mov r8, r8)

0800165c <__aeabi_idiv>:
 800165c:	2900      	cmp	r1, #0
 800165e:	d041      	beq.n	80016e4 <.divsi3_skip_div0_test+0x84>

08001660 <.divsi3_skip_div0_test>:
 8001660:	b410      	push	{r4}
 8001662:	1c04      	adds	r4, r0, #0
 8001664:	404c      	eors	r4, r1
 8001666:	46a4      	mov	ip, r4
 8001668:	2301      	movs	r3, #1
 800166a:	2200      	movs	r2, #0
 800166c:	2900      	cmp	r1, #0
 800166e:	d500      	bpl.n	8001672 <.divsi3_skip_div0_test+0x12>
 8001670:	4249      	negs	r1, r1
 8001672:	2800      	cmp	r0, #0
 8001674:	d500      	bpl.n	8001678 <.divsi3_skip_div0_test+0x18>
 8001676:	4240      	negs	r0, r0
 8001678:	4288      	cmp	r0, r1
 800167a:	d32c      	bcc.n	80016d6 <.divsi3_skip_div0_test+0x76>
 800167c:	2401      	movs	r4, #1
 800167e:	0724      	lsls	r4, r4, #28
 8001680:	42a1      	cmp	r1, r4
 8001682:	d204      	bcs.n	800168e <.divsi3_skip_div0_test+0x2e>
 8001684:	4281      	cmp	r1, r0
 8001686:	d202      	bcs.n	800168e <.divsi3_skip_div0_test+0x2e>
 8001688:	0109      	lsls	r1, r1, #4
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	e7f8      	b.n	8001680 <.divsi3_skip_div0_test+0x20>
 800168e:	00e4      	lsls	r4, r4, #3
 8001690:	42a1      	cmp	r1, r4
 8001692:	d204      	bcs.n	800169e <.divsi3_skip_div0_test+0x3e>
 8001694:	4281      	cmp	r1, r0
 8001696:	d202      	bcs.n	800169e <.divsi3_skip_div0_test+0x3e>
 8001698:	0049      	lsls	r1, r1, #1
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	e7f8      	b.n	8001690 <.divsi3_skip_div0_test+0x30>
 800169e:	4288      	cmp	r0, r1
 80016a0:	d301      	bcc.n	80016a6 <.divsi3_skip_div0_test+0x46>
 80016a2:	1a40      	subs	r0, r0, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	084c      	lsrs	r4, r1, #1
 80016a8:	42a0      	cmp	r0, r4
 80016aa:	d302      	bcc.n	80016b2 <.divsi3_skip_div0_test+0x52>
 80016ac:	1b00      	subs	r0, r0, r4
 80016ae:	085c      	lsrs	r4, r3, #1
 80016b0:	4322      	orrs	r2, r4
 80016b2:	088c      	lsrs	r4, r1, #2
 80016b4:	42a0      	cmp	r0, r4
 80016b6:	d302      	bcc.n	80016be <.divsi3_skip_div0_test+0x5e>
 80016b8:	1b00      	subs	r0, r0, r4
 80016ba:	089c      	lsrs	r4, r3, #2
 80016bc:	4322      	orrs	r2, r4
 80016be:	08cc      	lsrs	r4, r1, #3
 80016c0:	42a0      	cmp	r0, r4
 80016c2:	d302      	bcc.n	80016ca <.divsi3_skip_div0_test+0x6a>
 80016c4:	1b00      	subs	r0, r0, r4
 80016c6:	08dc      	lsrs	r4, r3, #3
 80016c8:	4322      	orrs	r2, r4
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d003      	beq.n	80016d6 <.divsi3_skip_div0_test+0x76>
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	d001      	beq.n	80016d6 <.divsi3_skip_div0_test+0x76>
 80016d2:	0909      	lsrs	r1, r1, #4
 80016d4:	e7e3      	b.n	800169e <.divsi3_skip_div0_test+0x3e>
 80016d6:	1c10      	adds	r0, r2, #0
 80016d8:	4664      	mov	r4, ip
 80016da:	2c00      	cmp	r4, #0
 80016dc:	d500      	bpl.n	80016e0 <.divsi3_skip_div0_test+0x80>
 80016de:	4240      	negs	r0, r0
 80016e0:	bc10      	pop	{r4}
 80016e2:	4770      	bx	lr
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d006      	beq.n	80016f6 <.divsi3_skip_div0_test+0x96>
 80016e8:	db03      	blt.n	80016f2 <.divsi3_skip_div0_test+0x92>
 80016ea:	2000      	movs	r0, #0
 80016ec:	43c0      	mvns	r0, r0
 80016ee:	0840      	lsrs	r0, r0, #1
 80016f0:	e001      	b.n	80016f6 <.divsi3_skip_div0_test+0x96>
 80016f2:	2080      	movs	r0, #128	; 0x80
 80016f4:	0600      	lsls	r0, r0, #24
 80016f6:	b407      	push	{r0, r1, r2}
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <.divsi3_skip_div0_test+0xa4>)
 80016fa:	a102      	add	r1, pc, #8	; (adr r1, 8001704 <.divsi3_skip_div0_test+0xa4>)
 80016fc:	1840      	adds	r0, r0, r1
 80016fe:	9002      	str	r0, [sp, #8]
 8001700:	bd03      	pop	{r0, r1, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	00000019 	.word	0x00000019

08001708 <__aeabi_idivmod>:
 8001708:	2900      	cmp	r1, #0
 800170a:	d0eb      	beq.n	80016e4 <.divsi3_skip_div0_test+0x84>
 800170c:	b503      	push	{r0, r1, lr}
 800170e:	f7ff ffa7 	bl	8001660 <.divsi3_skip_div0_test>
 8001712:	bc0e      	pop	{r1, r2, r3}
 8001714:	4342      	muls	r2, r0
 8001716:	1a89      	subs	r1, r1, r2
 8001718:	4718      	bx	r3
 800171a:	46c0      	nop			; (mov r8, r8)

0800171c <__aeabi_idiv0>:
 800171c:	4770      	bx	lr
 800171e:	46c0      	nop			; (mov r8, r8)

08001720 <initTimer>:
char strDisp[20] ;

int main(void);

void initTimer()
{
 8001720:	b530      	push	{r4, r5, lr}
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001722:	2001      	movs	r0, #1
char strDisp[20] ;

int main(void);

void initTimer()
{
 8001724:	b089      	sub	sp, #36	; 0x24
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001726:	1c01      	adds	r1, r0, #0
 8001728:	f7ff f83e 	bl	80007a8 <RCC_APB1PeriphClockCmd>
    TIM_TimeBaseInitTypeDef timerInitStructure; 
    // trigger every ms

    // get current clock
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 800172c:	a804      	add	r0, sp, #16
 800172e:	f7fe ff9b 	bl	8000668 <RCC_GetClocksFreq>

    timerInitStructure.TIM_Prescaler = ((RCC_Clocks.SYSCLK_Frequency / 2) / 1000)-1;
 8001732:	21fa      	movs	r1, #250	; 0xfa
 8001734:	9804      	ldr	r0, [sp, #16]
 8001736:	00c9      	lsls	r1, r1, #3
 8001738:	f7ff ff42 	bl	80015c0 <__aeabi_uidiv>
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    // timer range (16bit value) - 10 seconds
    timerInitStructure.TIM_Period = 10000-1;
    timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInit(TIM2, &timerInitStructure);
 800173c:	2580      	movs	r5, #128	; 0x80

    // get current clock
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);

    timerInitStructure.TIM_Prescaler = ((RCC_Clocks.SYSCLK_Frequency / 2) / 1000)-1;
 800173e:	ac01      	add	r4, sp, #4
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    // timer range (16bit value) - 10 seconds
    timerInitStructure.TIM_Period = 10000-1;
 8001740:	4a08      	ldr	r2, [pc, #32]	; (8001764 <initTimer+0x44>)
    timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8001742:	05ed      	lsls	r5, r5, #23

    // get current clock
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);

    timerInitStructure.TIM_Prescaler = ((RCC_Clocks.SYSCLK_Frequency / 2) / 1000)-1;
 8001744:	3801      	subs	r0, #1
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001746:	2300      	movs	r3, #0

    // get current clock
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);

    timerInitStructure.TIM_Prescaler = ((RCC_Clocks.SYSCLK_Frequency / 2) / 1000)-1;
 8001748:	8020      	strh	r0, [r4, #0]
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    // timer range (16bit value) - 10 seconds
    timerInitStructure.TIM_Period = 10000-1;
    timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInit(TIM2, &timerInitStructure);
 800174a:	1c21      	adds	r1, r4, #0
 800174c:	1c28      	adds	r0, r5, #0
    // get current clock
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);

    timerInitStructure.TIM_Prescaler = ((RCC_Clocks.SYSCLK_Frequency / 2) / 1000)-1;
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800174e:	8063      	strh	r3, [r4, #2]
    // timer range (16bit value) - 10 seconds
    timerInitStructure.TIM_Period = 10000-1;
 8001750:	6062      	str	r2, [r4, #4]
    timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001752:	8123      	strh	r3, [r4, #8]
    TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8001754:	f7ff f934 	bl	80009c0 <TIM_TimeBaseInit>
    TIM_Cmd(TIM2, ENABLE);  
 8001758:	1c28      	adds	r0, r5, #0
 800175a:	2101      	movs	r1, #1
 800175c:	f7ff f9ca 	bl	8000af4 <TIM_Cmd>
}
 8001760:	b009      	add	sp, #36	; 0x24
 8001762:	bd30      	pop	{r4, r5, pc}
 8001764:	0000270f 	.word	0x0000270f

08001768 <EnableClock>:

void EnableClock()
{
 8001768:	b508      	push	{r3, lr}

  // divide HCLK / 2
  RCC_HCLKConfig(RCC_SYSCLK_Div2);
 800176a:	2080      	movs	r0, #128	; 0x80
 800176c:	f7fe ff5a 	bl	8000624 <RCC_HCLKConfig>

  // enable HSI
  RCC_HSICmd(ENABLE);
 8001770:	2001      	movs	r0, #1
 8001772:	f7fe ff11 	bl	8000598 <RCC_HSICmd>
  RCC_PLLCmd(DISABLE);
 8001776:	2000      	movs	r0, #0
 8001778:	f7fe ff2a 	bl	80005d0 <RCC_PLLCmd>
  // wait for HSI to get ready
  while (RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 800177c:	2021      	movs	r0, #33	; 0x21
 800177e:	f7ff f873 	bl	8000868 <RCC_GetFlagStatus>
 8001782:	2800      	cmp	r0, #0
 8001784:	d0fa      	beq.n	800177c <EnableClock+0x14>

  // configure PLL - x4 /2 
  RCC_PLLConfig( RCC_PLLSource_HSI, RCC_PLLMul_8,  RCC_PLLDiv_4 );
 8001786:	2000      	movs	r0, #0
 8001788:	210c      	movs	r1, #12
 800178a:	22c0      	movs	r2, #192	; 0xc0
 800178c:	f7fe ff18 	bl	80005c0 <RCC_PLLConfig>
  RCC_PLLCmd(ENABLE);
 8001790:	2001      	movs	r0, #1
 8001792:	f7fe ff1d 	bl	80005d0 <RCC_PLLCmd>

  while ( RCC_GetFlagStatus( RCC_FLAG_PLLRDY ) == RESET );
 8001796:	2039      	movs	r0, #57	; 0x39
 8001798:	f7ff f866 	bl	8000868 <RCC_GetFlagStatus>
 800179c:	2800      	cmp	r0, #0
 800179e:	d0fa      	beq.n	8001796 <EnableClock+0x2e>

  // set hsi as clock
  //RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);

  // set pll as clock
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f7fe ff2d 	bl	8000600 <RCC_SYSCLKConfig>
}
 80017a6:	bd08      	pop	{r3, pc}

080017a8 <RCC_Configuration>:

void RCC_Configuration(void)
{  
 80017a8:	b508      	push	{r3, lr}
  
  /* Enable comparator, LCD and PWR mngt clocks */
  // RCC_APB1Periph_COMP |
  RCC_APB1PeriphClockCmd( RCC_APB1Periph_LCD | RCC_APB1Periph_PWR,ENABLE);
 80017aa:	4810      	ldr	r0, [pc, #64]	; (80017ec <RCC_Configuration+0x44>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	f7fe fffb 	bl	80007a8 <RCC_APB1PeriphClockCmd>
    
  /* Enable ADC & SYSCFG clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_SYSCFG , ENABLE);
 80017b2:	2101      	movs	r1, #1
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <RCC_Configuration+0x48>)
 80017b6:	f7fe ffeb 	bl	8000790 <RCC_APB2PeriphClockCmd>

  /* Allow access to the RTC */
  PWR_RTCAccessCmd(ENABLE);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7fe fdd0 	bl	8000360 <PWR_RTCAccessCmd>

  /* Reset RTC Backup Domain */
  RCC_RTCResetCmd(ENABLE);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7fe ffd3 	bl	800076c <RCC_RTCResetCmd>
  RCC_RTCResetCmd(DISABLE);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7fe ffd0 	bl	800076c <RCC_RTCResetCmd>

  /* LSE Enable */
  RCC_LSEConfig(RCC_LSE_ON);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7fe fee9 	bl	80005a4 <RCC_LSEConfig>

  /* Wait until LSE is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
 80017d2:	2049      	movs	r0, #73	; 0x49
 80017d4:	f7ff f848 	bl	8000868 <RCC_GetFlagStatus>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d0fa      	beq.n	80017d2 <RCC_Configuration+0x2a>
  
   /* RTC Clock Source Selection */ 
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE); 
 80017dc:	2080      	movs	r0, #128	; 0x80
 80017de:	0240      	lsls	r0, r0, #9
 80017e0:	f7fe ff9e 	bl	8000720 <RCC_RTCCLKConfig>
  
  /* Enable the RTC */
  RCC_RTCCLKCmd(ENABLE);   
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7fe ffbb 	bl	8000760 <RCC_RTCCLKCmd>
  
}
 80017ea:	bd08      	pop	{r3, pc}
 80017ec:	10000200 	.word	0x10000200
 80017f0:	00000201 	.word	0x00000201

080017f4 <main>:


int main(void)
{
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RCC_Configuration();
 80017f6:	f7ff ffd7 	bl	80017a8 <RCC_Configuration>

	LCD_GLASS_Configure_GPIO();
 80017fa:	f000 fa5d 	bl	8001cb8 <LCD_GLASS_Configure_GPIO>
	LCD_GLASS_Init();
 80017fe:	f000 fb1d 	bl	8001e3c <LCD_GLASS_Init>

  EnableClock();
 8001802:	f7ff ffb1 	bl	8001768 <EnableClock>
  mini_snprintf( strDisp, 11,  "%d", (RCC_Clocks.SYSCLK_Frequency / 10));
  LCD_GLASS_Clear();
  LCD_GLASS_DisplayString( strDisp );
  */
  
  initTimer();
 8001806:	f7ff ff8b 	bl	8001720 <initTimer>

  int value = 5;

  mini_snprintf( strDisp, 5,  "%d", value);
 800180a:	4c14      	ldr	r4, [pc, #80]	; (800185c <main+0x68>)
 800180c:	4f14      	ldr	r7, [pc, #80]	; (8001860 <main+0x6c>)
 800180e:	2105      	movs	r1, #5
 8001810:	1c3a      	adds	r2, r7, #0
 8001812:	1c0b      	adds	r3, r1, #0
 8001814:	1c20      	adds	r0, r4, #0
 8001816:	f000 fc2f 	bl	8002078 <mini_snprintf>
  LCD_GLASS_DisplayString( strDisp );
 800181a:	1c20      	adds	r0, r4, #0
 800181c:	f000 fa1e 	bl	8001c5c <LCD_GLASS_DisplayString>

  int timerValue = 0;
  int prevTimerValue = -1;
 8001820:	2501      	movs	r5, #1
 8001822:	426d      	negs	r5, r5
 8001824:	1c26      	adds	r6, r4, #0

  while (1)
  {
    timerValue = TIM_GetCounter(TIM2);
 8001826:	2080      	movs	r0, #128	; 0x80
 8001828:	05c0      	lsls	r0, r0, #23
 800182a:	f7ff f915 	bl	8000a58 <TIM_GetCounter>
 800182e:	1e04      	subs	r4, r0, #0

    if ( timerValue != prevTimerValue )
 8001830:	42ac      	cmp	r4, r5
 8001832:	d0f8      	beq.n	8001826 <main+0x32>
    {
        mini_snprintf( strDisp, 10,  "%d", timerValue/1000);
 8001834:	21fa      	movs	r1, #250	; 0xfa
 8001836:	0089      	lsls	r1, r1, #2
 8001838:	f7ff ff10 	bl	800165c <__aeabi_idiv>
 800183c:	210a      	movs	r1, #10
 800183e:	1c03      	adds	r3, r0, #0
 8001840:	1c3a      	adds	r2, r7, #0
 8001842:	1c30      	adds	r0, r6, #0
 8001844:	f000 fc18 	bl	8002078 <mini_snprintf>
        if ( timerValue < prevTimerValue ) // overflowed
 8001848:	42ac      	cmp	r4, r5
 800184a:	da01      	bge.n	8001850 <main+0x5c>
          LCD_GLASS_Clear();
 800184c:	f000 fa20 	bl	8001c90 <LCD_GLASS_Clear>
        LCD_GLASS_DisplayString( strDisp );
 8001850:	1c30      	adds	r0, r6, #0
 8001852:	f000 fa03 	bl	8001c5c <LCD_GLASS_DisplayString>
  int timerValue = 0;
  int prevTimerValue = -1;

  while (1)
  {
    timerValue = TIM_GetCounter(TIM2);
 8001856:	1c25      	adds	r5, r4, #0
 8001858:	e7e5      	b.n	8001826 <main+0x32>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	2000001e 	.word	0x2000001e
 8001860:	08002240 	.word	0x08002240

08001864 <LCD_bar>:
uint8_t t_bar[2]={0x0,0X0};

void LCD_bar()
{
        
  LCD->RAM[LCD_RAMRegister_4] &= 0xffff5fff;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <LCD_bar+0x28>)
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LCD_bar+0x2c>)
 8001868:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800186a:	4011      	ands	r1, r2
 800186c:	6259      	str	r1, [r3, #36]	; 0x24
  LCD->RAM[LCD_RAMRegister_6] &= 0xffff5fff;
 800186e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001870:	400a      	ands	r2, r1
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
/* bar1 bar3 */
  LCD->RAM[LCD_RAMRegister_4] |= (uint32_t)(t_bar[0]<<12);
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <LCD_bar+0x30>)
 8001876:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001878:	7811      	ldrb	r1, [r2, #0]
 800187a:	0309      	lsls	r1, r1, #12
 800187c:	4301      	orrs	r1, r0
 800187e:	6259      	str	r1, [r3, #36]	; 0x24
  
/*bar0 bar2 */
  LCD->RAM[LCD_RAMRegister_6] |= (uint32_t)(t_bar[1]<<12);
 8001880:	7852      	ldrb	r2, [r2, #1]
 8001882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001884:	0312      	lsls	r2, r2, #12
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 
}
 800188a:	4770      	bx	lr
 800188c:	40002400 	.word	0x40002400
 8001890:	ffff5fff 	.word	0xffff5fff
 8001894:	2000001c 	.word	0x2000001c

08001898 <LCD_GLASS_WriteChar>:
    digit[j] = (ch >> i) & 0x0f; //To isolate the less signifiant dibit
  }
}

void LCD_GLASS_WriteChar(uint8_t* ch, bool point, bool column, uint8_t position)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    digit[j] = (ch >> i) & 0x0f; //To isolate the less signifiant dibit
  }
}

void LCD_GLASS_WriteChar(uint8_t* ch, bool point, bool column, uint8_t position)
 800189a:	7804      	ldrb	r4, [r0, #0]
{
 800189c:	b085      	sub	sp, #20
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 800189e:	2c2f      	cmp	r4, #47	; 0x2f
 80018a0:	d020      	beq.n	80018e4 <LCD_GLASS_WriteChar+0x4c>
 80018a2:	d80c      	bhi.n	80018be <LCD_GLASS_WriteChar+0x26>
 80018a4:	2c25      	cmp	r4, #37	; 0x25
 80018a6:	d01f      	beq.n	80018e8 <LCD_GLASS_WriteChar+0x50>
 80018a8:	d803      	bhi.n	80018b2 <LCD_GLASS_WriteChar+0x1a>
    {
    case ' ' : 
      ch = 0x00;
 80018aa:	2700      	movs	r7, #0
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 80018ac:	2c20      	cmp	r4, #32
 80018ae:	d030      	beq.n	8001912 <LCD_GLASS_WriteChar+0x7a>
 80018b0:	e01d      	b.n	80018ee <LCD_GLASS_WriteChar+0x56>
 80018b2:	2c2a      	cmp	r4, #42	; 0x2a
 80018b4:	d02c      	beq.n	8001910 <LCD_GLASS_WriteChar+0x78>
    case 'n' :
      ch = C_nMap;
      break;					
                  
    case '-' :
      ch = C_minus;
 80018b6:	27a0      	movs	r7, #160	; 0xa0
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 80018b8:	2c2d      	cmp	r4, #45	; 0x2d
 80018ba:	d016      	beq.n	80018ea <LCD_GLASS_WriteChar+0x52>
 80018bc:	e017      	b.n	80018ee <LCD_GLASS_WriteChar+0x56>
 80018be:	2c6d      	cmp	r4, #109	; 0x6d
 80018c0:	d00c      	beq.n	80018dc <LCD_GLASS_WriteChar+0x44>
 80018c2:	d805      	bhi.n	80018d0 <LCD_GLASS_WriteChar+0x38>
 80018c4:	2c39      	cmp	r4, #57	; 0x39
 80018c6:	d812      	bhi.n	80018ee <LCD_GLASS_WriteChar+0x56>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':			
      ch = NumberMap[*c-0x30];		
 80018c8:	3c30      	subs	r4, #48	; 0x30
 80018ca:	0064      	lsls	r4, r4, #1
 80018cc:	48d5      	ldr	r0, [pc, #852]	; (8001c24 <LCD_GLASS_WriteChar+0x38c>)
 80018ce:	e01d      	b.n	800190c <LCD_GLASS_WriteChar+0x74>
static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
  uint8_t i,j;
  
  switch (*c)
 80018d0:	2c6e      	cmp	r4, #110	; 0x6e
 80018d2:	d005      	beq.n	80018e0 <LCD_GLASS_WriteChar+0x48>
 80018d4:	2cff      	cmp	r4, #255	; 0xff
 80018d6:	d10a      	bne.n	80018ee <LCD_GLASS_WriteChar+0x56>
      
    case '%' :
      ch = C_percent_2; 
      break;
    case 255 :
      ch = C_full;
 80018d8:	4fd3      	ldr	r7, [pc, #844]	; (8001c28 <LCD_GLASS_WriteChar+0x390>)
 80018da:	e01a      	b.n	8001912 <LCD_GLASS_WriteChar+0x7a>
    case '*':
      ch = star;
      break;
                     
    case 'm' :
      ch = C_mMap;
 80018dc:	4fd3      	ldr	r7, [pc, #844]	; (8001c2c <LCD_GLASS_WriteChar+0x394>)
 80018de:	e018      	b.n	8001912 <LCD_GLASS_WriteChar+0x7a>
      break;
                  
    case 'n' :
      ch = C_nMap;
 80018e0:	4fd3      	ldr	r7, [pc, #844]	; (8001c30 <LCD_GLASS_WriteChar+0x398>)
 80018e2:	e016      	b.n	8001912 <LCD_GLASS_WriteChar+0x7a>
    case '-' :
      ch = C_minus;
      break;
      
    case '/' :
      ch = C_slatch;
 80018e4:	27c0      	movs	r7, #192	; 0xc0
 80018e6:	e014      	b.n	8001912 <LCD_GLASS_WriteChar+0x7a>
      break;  
      
    case '%' :
      ch = C_percent_2; 
 80018e8:	27b3      	movs	r7, #179	; 0xb3
 80018ea:	023f      	lsls	r7, r7, #8
 80018ec:	e011      	b.n	8001912 <LCD_GLASS_WriteChar+0x7a>
      ch = NumberMap[*c-0x30];		
      break;
          
    default:
      /* The character c is one letter in upper case*/
      if ( (*c < 0x5b) && (*c > 0x40) )
 80018ee:	1c20      	adds	r0, r4, #0
 80018f0:	3841      	subs	r0, #65	; 0x41
 80018f2:	b2c5      	uxtb	r5, r0
        0x5F00,0x4200,0xF500,0x6700,0xEa00,0xAF00,0xBF00,0x04600,0xFF00,0xEF00
    };

static void LCD_Conv_Char_Seg(uint8_t* c,bool point,bool column, uint8_t* digit)
{
  uint16_t ch = 0 ;
 80018f4:	2700      	movs	r7, #0
      ch = NumberMap[*c-0x30];		
      break;
          
    default:
      /* The character c is one letter in upper case*/
      if ( (*c < 0x5b) && (*c > 0x40) )
 80018f6:	2d19      	cmp	r5, #25
 80018f8:	d802      	bhi.n	8001900 <LCD_GLASS_WriteChar+0x68>
      {
        ch = CapLetterMap[*c-'A'];
 80018fa:	4dce      	ldr	r5, [pc, #824]	; (8001c34 <LCD_GLASS_WriteChar+0x39c>)
 80018fc:	0040      	lsls	r0, r0, #1
 80018fe:	5b47      	ldrh	r7, [r0, r5]
      }
      /* The character c is one letter in lower case*/
      if ( (*c <0x7b) && ( *c> 0x60) )
 8001900:	3c61      	subs	r4, #97	; 0x61
 8001902:	b2e0      	uxtb	r0, r4
 8001904:	2819      	cmp	r0, #25
 8001906:	d804      	bhi.n	8001912 <LCD_GLASS_WriteChar+0x7a>
      {
        ch = CapLetterMap[*c-'a'];
 8001908:	48ca      	ldr	r0, [pc, #808]	; (8001c34 <LCD_GLASS_WriteChar+0x39c>)
 800190a:	0064      	lsls	r4, r4, #1
 800190c:	5a27      	ldrh	r7, [r4, r0]
 800190e:	e000      	b.n	8001912 <LCD_GLASS_WriteChar+0x7a>
    case ' ' : 
      ch = 0x00;
      break;
    
    case '*':
      ch = star;
 8001910:	4fc9      	ldr	r7, [pc, #804]	; (8001c38 <LCD_GLASS_WriteChar+0x3a0>)
      }
      break;
  }
       
  /* Set the digital point can be displayed if the point is on */
  if (point)
 8001912:	2900      	cmp	r1, #0
 8001914:	d001      	beq.n	800191a <LCD_GLASS_WriteChar+0x82>
  {
    ch |= 0x0002;
 8001916:	2102      	movs	r1, #2
 8001918:	430f      	orrs	r7, r1
  }

  /* Set the "COL" segment in the character that can be displayed if the column is on */
  if (column)
 800191a:	2a00      	cmp	r2, #0
 800191c:	d001      	beq.n	8001922 <LCD_GLASS_WriteChar+0x8a>
  {
    ch |= 0x0020;
 800191e:	2220      	movs	r2, #32
 8001920:	4317      	orrs	r7, r2
  }		

  for (i = 12,j=0 ;j<4; i-=4,j++)
  {
    digit[j] = (ch >> i) & 0x0f; //To isolate the less signifiant dibit
 8001922:	133a      	asrs	r2, r7, #12
 8001924:	1139      	asrs	r1, r7, #4
   
/* To convert displayed character in segment in array digit */
  LCD_Conv_Char_Seg(ch,point,column,digit);

 
  switch (position)
 8001926:	1e58      	subs	r0, r3, #1
    ch |= 0x0020;
  }		

  for (i = 12,j=0 ;j<4; i-=4,j++)
  {
    digit[j] = (ch >> i) & 0x0f; //To isolate the less signifiant dibit
 8001928:	9201      	str	r2, [sp, #4]
 800192a:	b2d5      	uxtb	r5, r2
 800192c:	0a3c      	lsrs	r4, r7, #8
 800192e:	b2c9      	uxtb	r1, r1
 8001930:	b2fa      	uxtb	r2, r7
   
/* To convert displayed character in segment in array digit */
  LCD_Conv_Char_Seg(ch,point,column,digit);

 
  switch (position)
 8001932:	2805      	cmp	r0, #5
 8001934:	d900      	bls.n	8001938 <LCD_GLASS_WriteChar+0xa0>
 8001936:	e170      	b.n	8001c1a <LCD_GLASS_WriteChar+0x382>
 8001938:	4bc0      	ldr	r3, [pc, #768]	; (8001c3c <LCD_GLASS_WriteChar+0x3a4>)
 800193a:	f7ff fe37 	bl	80015ac <__gnu_thumb1_case_uhi>
 800193e:	0006      	.short	0x0006
 8001940:	00800036 	.word	0x00800036
 8001944:	00e900b4 	.word	0x00e900b4
 8001948:	011e      	.short	0x011e
  {
    /* Position 1 on LCD (Digit1)*/
    case 1:
      LCD->RAM[LCD_RAMRegister_0] &= 0xcffffffc;
 800194a:	695e      	ldr	r6, [r3, #20]
 800194c:	48bc      	ldr	r0, [pc, #752]	; (8001c40 <LCD_GLASS_WriteChar+0x3a8>)
 800194e:	4006      	ands	r6, r0
 8001950:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xcffffffc;
 8001952:	69de      	ldr	r6, [r3, #28]
 8001954:	4006      	ands	r6, r0
 8001956:	61de      	str	r6, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
 8001958:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800195a:	4006      	ands	r6, r0
 800195c:	625e      	str	r6, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;
 800195e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001960:	4030      	ands	r0, r6
 8001962:	62d8      	str	r0, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
 8001964:	695e      	ldr	r6, [r3, #20]
 8001966:	1c28      	adds	r0, r5, #0
 8001968:	9602      	str	r6, [sp, #8]
 800196a:	260c      	movs	r6, #12
 800196c:	4030      	ands	r0, r6
 800196e:	0680      	lsls	r0, r0, #26
 8001970:	4684      	mov	ip, r0
 8001972:	2003      	movs	r0, #3
 8001974:	4667      	mov	r7, ip
 8001976:	4005      	ands	r5, r0
 8001978:	433d      	orrs	r5, r7
 800197a:	9f02      	ldr	r7, [sp, #8]
 800197c:	433d      	orrs	r5, r7
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 26 ) | (digit[1]& 0x03) ; // 1F 1A 1C 1D 
 800197e:	1c27      	adds	r7, r4, #0
      LCD->RAM[LCD_RAMRegister_0] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_2] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
 8001980:	615d      	str	r5, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 26 ) | (digit[1]& 0x03) ; // 1F 1A 1C 1D 
 8001982:	4037      	ands	r7, r6
 8001984:	69dd      	ldr	r5, [r3, #28]
 8001986:	06bf      	lsls	r7, r7, #26
 8001988:	4004      	ands	r4, r0
 800198a:	433c      	orrs	r4, r7
 800198c:	432c      	orrs	r4, r5
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 26 ) | (digit[2]& 0x03) ; // 1Q 1K 1Col 1P                                                                                                                                    
 800198e:	1c0d      	adds	r5, r1, #0
      LCD->RAM[LCD_RAMRegister_2] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 26 ) | (digit[1]& 0x03) ; // 1F 1A 1C 1D 
 8001990:	61dc      	str	r4, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 26 ) | (digit[2]& 0x03) ; // 1Q 1K 1Col 1P                                                                                                                                    
 8001992:	4035      	ands	r5, r6
 8001994:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001996:	06ad      	lsls	r5, r5, #26
 8001998:	4001      	ands	r1, r0
 800199a:	4329      	orrs	r1, r5
 800199c:	4321      	orrs	r1, r4
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 26 ) | (digit[3]& 0x03) ; // 1H 1J 1DP 1N
 800199e:	4016      	ands	r6, r2
      LCD->RAM[LCD_RAMRegister_4] &= 0xcffffffc;
      LCD->RAM[LCD_RAMRegister_6] &= 0xcffffffc;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 26 ) | (digit[0]& 0x03) ; // 1G 1B 1M 1E	    
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 26 ) | (digit[1]& 0x03) ; // 1F 1A 1C 1D 
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 26 ) | (digit[2]& 0x03) ; // 1Q 1K 1Col 1P                                                                                                                                    
 80019a0:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 26 ) | (digit[3]& 0x03) ; // 1H 1J 1DP 1N
 80019a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a4:	06b6      	lsls	r6, r6, #26
 80019a6:	4002      	ands	r2, r0
 80019a8:	e0b0      	b.n	8001b0c <LCD_GLASS_WriteChar+0x274>

      break;
    
    /* Position 2 on LCD (Digit2)*/
    case 2:
      LCD->RAM[LCD_RAMRegister_0] &= 0xf3ffff03;
 80019aa:	695e      	ldr	r6, [r3, #20]
 80019ac:	48a5      	ldr	r0, [pc, #660]	; (8001c44 <LCD_GLASS_WriteChar+0x3ac>)
      LCD->RAM[LCD_RAMRegister_2] &= 0xf3ffff03;      
      LCD->RAM[LCD_RAMRegister_4] &= 0xf3ffff03;
      LCD->RAM[LCD_RAMRegister_6] &= 0xf3ffff03;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E	  
 80019ae:	1c2f      	adds	r7, r5, #0

      break;
    
    /* Position 2 on LCD (Digit2)*/
    case 2:
      LCD->RAM[LCD_RAMRegister_0] &= 0xf3ffff03;
 80019b0:	4006      	ands	r6, r0
 80019b2:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xf3ffff03;      
 80019b4:	69de      	ldr	r6, [r3, #28]
 80019b6:	4006      	ands	r6, r0
 80019b8:	61de      	str	r6, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xf3ffff03;
 80019ba:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80019bc:	4006      	ands	r6, r0
 80019be:	625e      	str	r6, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xf3ffff03;
 80019c0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80019c2:	4030      	ands	r0, r6
 80019c4:	62d8      	str	r0, [r3, #44]	; 0x2c
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E	  
 80019c6:	6958      	ldr	r0, [r3, #20]
 80019c8:	2602      	movs	r6, #2
 80019ca:	9003      	str	r0, [sp, #12]
 80019cc:	200c      	movs	r0, #12
 80019ce:	4684      	mov	ip, r0
 80019d0:	4037      	ands	r7, r6
 80019d2:	4028      	ands	r0, r5
 80019d4:	0600      	lsls	r0, r0, #24
 80019d6:	01bf      	lsls	r7, r7, #6
 80019d8:	4307      	orrs	r7, r0
 80019da:	2001      	movs	r0, #1
 80019dc:	4005      	ands	r5, r0
 80019de:	40b5      	lsls	r5, r6
 80019e0:	433d      	orrs	r5, r7
 80019e2:	9f03      	ldr	r7, [sp, #12]
 80019e4:	433d      	orrs	r5, r7
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 24 )|((digit[1]& 0x02) << 6 )|((digit[1]& 0x01) << 2 ) ; // 2F 2A 2C 2D
 80019e6:	1c27      	adds	r7, r4, #0
      LCD->RAM[LCD_RAMRegister_0] &= 0xf3ffff03;
      LCD->RAM[LCD_RAMRegister_2] &= 0xf3ffff03;      
      LCD->RAM[LCD_RAMRegister_4] &= 0xf3ffff03;
      LCD->RAM[LCD_RAMRegister_6] &= 0xf3ffff03;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E	  
 80019e8:	615d      	str	r5, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 24 )|((digit[1]& 0x02) << 6 )|((digit[1]& 0x01) << 2 ) ; // 2F 2A 2C 2D
 80019ea:	4037      	ands	r7, r6
 80019ec:	69dd      	ldr	r5, [r3, #28]
 80019ee:	01bf      	lsls	r7, r7, #6
 80019f0:	9703      	str	r7, [sp, #12]
 80019f2:	4667      	mov	r7, ip
 80019f4:	9502      	str	r5, [sp, #8]
 80019f6:	4027      	ands	r7, r4
 80019f8:	9d03      	ldr	r5, [sp, #12]
 80019fa:	4004      	ands	r4, r0
 80019fc:	063f      	lsls	r7, r7, #24
 80019fe:	40b4      	lsls	r4, r6
 8001a00:	432f      	orrs	r7, r5
 8001a02:	9d02      	ldr	r5, [sp, #8]
 8001a04:	4327      	orrs	r7, r4
 8001a06:	433d      	orrs	r5, r7
 8001a08:	61dd      	str	r5, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 24 )|((digit[2]& 0x02) << 6 )|((digit[2]& 0x01) << 2 ) ; // 2Q 2K 2Col 2P
 8001a0a:	1c0f      	adds	r7, r1, #0
 8001a0c:	4665      	mov	r5, ip
 8001a0e:	4037      	ands	r7, r6
 8001a10:	400d      	ands	r5, r1
 8001a12:	062d      	lsls	r5, r5, #24
 8001a14:	01bf      	lsls	r7, r7, #6
 8001a16:	4001      	ands	r1, r0
 8001a18:	432f      	orrs	r7, r5
 8001a1a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001a1c:	008d      	lsls	r5, r1, #2
 8001a1e:	1c39      	adds	r1, r7, #0
 8001a20:	4329      	orrs	r1, r5
 8001a22:	4321      	orrs	r1, r4
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 24 )|((digit[3]& 0x02) << 6 )|((digit[3]& 0x01) << 2 ) ; // 2H 2J 2DP 2N
 8001a24:	4664      	mov	r4, ip
 8001a26:	4016      	ands	r6, r2
 8001a28:	4014      	ands	r4, r2
 8001a2a:	01b6      	lsls	r6, r6, #6
 8001a2c:	0624      	lsls	r4, r4, #24
 8001a2e:	4010      	ands	r0, r2
 8001a30:	4326      	orrs	r6, r4
      LCD->RAM[LCD_RAMRegister_4] &= 0xf3ffff03;
      LCD->RAM[LCD_RAMRegister_6] &= 0xf3ffff03;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 24 )|((digit[0]& 0x02) << 6 )|((digit[0]& 0x01) << 2 ) ; // 2G 2B 2M 2E	  
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 24 )|((digit[1]& 0x02) << 6 )|((digit[1]& 0x01) << 2 ) ; // 2F 2A 2C 2D
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 24 )|((digit[2]& 0x02) << 6 )|((digit[2]& 0x01) << 2 ) ; // 2Q 2K 2Col 2P
 8001a32:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 24 )|((digit[3]& 0x02) << 6 )|((digit[3]& 0x01) << 2 ) ; // 2H 2J 2DP 2N
 8001a34:	0080      	lsls	r0, r0, #2
 8001a36:	1c32      	adds	r2, r6, #0
 8001a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	e0eb      	b.n	8001c16 <LCD_GLASS_WriteChar+0x37e>
      
      break;
    
    /* Position 3 on LCD (Digit3)*/
    case 3:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfcfffcff;
 8001a3e:	695e      	ldr	r6, [r3, #20]
 8001a40:	4881      	ldr	r0, [pc, #516]	; (8001c48 <LCD_GLASS_WriteChar+0x3b0>)
 8001a42:	4006      	ands	r6, r0
 8001a44:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xfcfffcff;
 8001a46:	69de      	ldr	r6, [r3, #28]
 8001a48:	4006      	ands	r6, r0
 8001a4a:	61de      	str	r6, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfcfffcff;
 8001a4c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8001a4e:	4006      	ands	r6, r0
 8001a50:	625e      	str	r6, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xfcfffcff;
 8001a52:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001a54:	4030      	ands	r0, r6
 8001a56:	62d8      	str	r0, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 22 ) | ((digit[0]& 0x03) << 8 ) ; // 3G 3B 3M 3E	
 8001a58:	695e      	ldr	r6, [r3, #20]
 8001a5a:	1c28      	adds	r0, r5, #0
 8001a5c:	9602      	str	r6, [sp, #8]
 8001a5e:	2603      	movs	r6, #3
 8001a60:	4030      	ands	r0, r6
 8001a62:	0200      	lsls	r0, r0, #8
 8001a64:	4684      	mov	ip, r0
 8001a66:	200c      	movs	r0, #12
 8001a68:	4005      	ands	r5, r0
 8001a6a:	4667      	mov	r7, ip
 8001a6c:	05ad      	lsls	r5, r5, #22
 8001a6e:	433d      	orrs	r5, r7
 8001a70:	9f02      	ldr	r7, [sp, #8]
 8001a72:	433d      	orrs	r5, r7
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 22 ) | ((digit[1]& 0x03) << 8 ) ; // 3F 3A 3C 3D
 8001a74:	1c27      	adds	r7, r4, #0
      LCD->RAM[LCD_RAMRegister_0] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_2] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfcfffcff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 22 ) | ((digit[0]& 0x03) << 8 ) ; // 3G 3B 3M 3E	
 8001a76:	615d      	str	r5, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 22 ) | ((digit[1]& 0x03) << 8 ) ; // 3F 3A 3C 3D
 8001a78:	4037      	ands	r7, r6
 8001a7a:	4004      	ands	r4, r0
 8001a7c:	69dd      	ldr	r5, [r3, #28]
 8001a7e:	023f      	lsls	r7, r7, #8
 8001a80:	05a4      	lsls	r4, r4, #22
 8001a82:	433c      	orrs	r4, r7
 8001a84:	432c      	orrs	r4, r5
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 22 ) | ((digit[2]& 0x03) << 8 ) ; // 3Q 3K 3Col 3P
 8001a86:	1c0d      	adds	r5, r1, #0
      LCD->RAM[LCD_RAMRegister_2] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfcfffcff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 22 ) | ((digit[0]& 0x03) << 8 ) ; // 3G 3B 3M 3E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 22 ) | ((digit[1]& 0x03) << 8 ) ; // 3F 3A 3C 3D
 8001a88:	61dc      	str	r4, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 22 ) | ((digit[2]& 0x03) << 8 ) ; // 3Q 3K 3Col 3P
 8001a8a:	4035      	ands	r5, r6
 8001a8c:	4001      	ands	r1, r0
 8001a8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001a90:	022d      	lsls	r5, r5, #8
 8001a92:	0589      	lsls	r1, r1, #22
 8001a94:	4329      	orrs	r1, r5
 8001a96:	4321      	orrs	r1, r4
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 22 ) | ((digit[3]& 0x03) << 8 ) ; // 3H 3J 3DP 3N
 8001a98:	4016      	ands	r6, r2
      LCD->RAM[LCD_RAMRegister_4] &= 0xfcfffcff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfcfffcff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 22 ) | ((digit[0]& 0x03) << 8 ) ; // 3G 3B 3M 3E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 22 ) | ((digit[1]& 0x03) << 8 ) ; // 3F 3A 3C 3D
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 22 ) | ((digit[2]& 0x03) << 8 ) ; // 3Q 3K 3Col 3P
 8001a9a:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 22 ) | ((digit[3]& 0x03) << 8 ) ; // 3H 3J 3DP 3N
 8001a9c:	4002      	ands	r2, r0
 8001a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aa0:	0236      	lsls	r6, r6, #8
 8001aa2:	0592      	lsls	r2, r2, #22
 8001aa4:	e032      	b.n	8001b0c <LCD_GLASS_WriteChar+0x274>
      
      break;
    
    /* Position 4 on LCD (Digit4)*/
    case 4:
      LCD->RAM[LCD_RAMRegister_0] &= 0xffcff3ff;
 8001aa6:	695e      	ldr	r6, [r3, #20]
 8001aa8:	4868      	ldr	r0, [pc, #416]	; (8001c4c <LCD_GLASS_WriteChar+0x3b4>)
 8001aaa:	4006      	ands	r6, r0
 8001aac:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xffcff3ff;
 8001aae:	69de      	ldr	r6, [r3, #28]
 8001ab0:	4006      	ands	r6, r0
 8001ab2:	61de      	str	r6, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xffcff3ff;
 8001ab4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8001ab6:	4006      	ands	r6, r0
 8001ab8:	625e      	str	r6, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xffcff3ff;
 8001aba:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001abc:	4030      	ands	r0, r6
 8001abe:	62d8      	str	r0, [r3, #44]	; 0x2c
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 18 ) | ((digit[0]& 0x03) << 10 ) ; // 4G 4B 4M 4E	
 8001ac0:	6958      	ldr	r0, [r3, #20]
 8001ac2:	2603      	movs	r6, #3
 8001ac4:	9002      	str	r0, [sp, #8]
 8001ac6:	1c28      	adds	r0, r5, #0
 8001ac8:	4030      	ands	r0, r6
 8001aca:	0280      	lsls	r0, r0, #10
 8001acc:	4684      	mov	ip, r0
 8001ace:	200c      	movs	r0, #12
 8001ad0:	4005      	ands	r5, r0
 8001ad2:	4667      	mov	r7, ip
 8001ad4:	04ad      	lsls	r5, r5, #18
 8001ad6:	433d      	orrs	r5, r7
 8001ad8:	9f02      	ldr	r7, [sp, #8]
 8001ada:	433d      	orrs	r5, r7
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 18 ) | ((digit[1]& 0x03) << 10 ) ; // 4F 4A 4C 4D
 8001adc:	1c27      	adds	r7, r4, #0
      LCD->RAM[LCD_RAMRegister_0] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_2] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xffcff3ff;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 18 ) | ((digit[0]& 0x03) << 10 ) ; // 4G 4B 4M 4E	
 8001ade:	615d      	str	r5, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 18 ) | ((digit[1]& 0x03) << 10 ) ; // 4F 4A 4C 4D
 8001ae0:	4037      	ands	r7, r6
 8001ae2:	4004      	ands	r4, r0
 8001ae4:	69dd      	ldr	r5, [r3, #28]
 8001ae6:	02bf      	lsls	r7, r7, #10
 8001ae8:	04a4      	lsls	r4, r4, #18
 8001aea:	433c      	orrs	r4, r7
 8001aec:	432c      	orrs	r4, r5
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 18 ) | ((digit[2]& 0x03) << 10 ) ; // 4Q 4K 4Col 4P
 8001aee:	1c0d      	adds	r5, r1, #0
      LCD->RAM[LCD_RAMRegister_2] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xffcff3ff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xffcff3ff;
      
      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 18 ) | ((digit[0]& 0x03) << 10 ) ; // 4G 4B 4M 4E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 18 ) | ((digit[1]& 0x03) << 10 ) ; // 4F 4A 4C 4D
 8001af0:	61dc      	str	r4, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 18 ) | ((digit[2]& 0x03) << 10 ) ; // 4Q 4K 4Col 4P
 8001af2:	4035      	ands	r5, r6
 8001af4:	4001      	ands	r1, r0
 8001af6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001af8:	02ad      	lsls	r5, r5, #10
 8001afa:	0489      	lsls	r1, r1, #18
 8001afc:	4329      	orrs	r1, r5
 8001afe:	4321      	orrs	r1, r4
 8001b00:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 18 ) | ((digit[3]& 0x03) << 10 ) ; // 4H 4J 4DP 4N
 8001b02:	4016      	ands	r6, r2
 8001b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b06:	4002      	ands	r2, r0
 8001b08:	02b6      	lsls	r6, r6, #10
 8001b0a:	0492      	lsls	r2, r2, #18
 8001b0c:	4332      	orrs	r2, r6
 8001b0e:	e082      	b.n	8001c16 <LCD_GLASS_WriteChar+0x37e>
      
      break;
    
    /* Position 5 on LCD (Digit5)*/
    case 5:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfff3cfff;
 8001b10:	695e      	ldr	r6, [r3, #20]
 8001b12:	484f      	ldr	r0, [pc, #316]	; (8001c50 <LCD_GLASS_WriteChar+0x3b8>)
 8001b14:	4006      	ands	r6, r0
 8001b16:	615e      	str	r6, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xfff3cfff;
 8001b18:	69de      	ldr	r6, [r3, #28]
 8001b1a:	4030      	ands	r0, r6
 8001b1c:	61d8      	str	r0, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfff3efff;
 8001b1e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8001b20:	484c      	ldr	r0, [pc, #304]	; (8001c54 <LCD_GLASS_WriteChar+0x3bc>)
 8001b22:	4006      	ands	r6, r0
 8001b24:	625e      	str	r6, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xfff3efff;
 8001b26:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001b28:	4030      	ands	r0, r6
 8001b2a:	62d8      	str	r0, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 16 ) | ((digit[0]& 0x03) << 12 ) ; // 5G 5B 5M 5E	
 8001b2c:	6958      	ldr	r0, [r3, #20]
 8001b2e:	2603      	movs	r6, #3
 8001b30:	9002      	str	r0, [sp, #8]
 8001b32:	1c28      	adds	r0, r5, #0
 8001b34:	4030      	ands	r0, r6
 8001b36:	0300      	lsls	r0, r0, #12
 8001b38:	4684      	mov	ip, r0
 8001b3a:	200c      	movs	r0, #12
 8001b3c:	4005      	ands	r5, r0
 8001b3e:	4667      	mov	r7, ip
 8001b40:	042d      	lsls	r5, r5, #16
 8001b42:	433d      	orrs	r5, r7
 8001b44:	9f02      	ldr	r7, [sp, #8]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 16 ) | ((digit[1]& 0x03) << 12 ) ; // 5F 5A 5C 5D
 8001b46:	4026      	ands	r6, r4
      LCD->RAM[LCD_RAMRegister_0] &= 0xfff3cfff;
      LCD->RAM[LCD_RAMRegister_2] &= 0xfff3cfff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfff3efff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfff3efff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 16 ) | ((digit[0]& 0x03) << 12 ) ; // 5G 5B 5M 5E	
 8001b48:	433d      	orrs	r5, r7
 8001b4a:	615d      	str	r5, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 16 ) | ((digit[1]& 0x03) << 12 ) ; // 5F 5A 5C 5D
 8001b4c:	4004      	ands	r4, r0
 8001b4e:	69dd      	ldr	r5, [r3, #28]
 8001b50:	4086      	lsls	r6, r0
 8001b52:	0424      	lsls	r4, r4, #16
 8001b54:	4334      	orrs	r4, r6
 8001b56:	432c      	orrs	r4, r5
 8001b58:	61dc      	str	r4, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 16 ) | ((digit[2]& 0x01) << 12 ) ; // 5Q 5K   5P 
 8001b5a:	1c0e      	adds	r6, r1, #0
 8001b5c:	2401      	movs	r4, #1
 8001b5e:	4026      	ands	r6, r4
 8001b60:	4001      	ands	r1, r0
 8001b62:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001b64:	4086      	lsls	r6, r0
 8001b66:	0409      	lsls	r1, r1, #16
 8001b68:	4331      	orrs	r1, r6
 8001b6a:	4329      	orrs	r1, r5
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 16 ) | ((digit[3]& 0x01) << 12 ) ; // 5H 5J   5N
 8001b6c:	4014      	ands	r4, r2
      LCD->RAM[LCD_RAMRegister_4] &= 0xfff3efff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfff3efff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x0c) << 16 ) | ((digit[0]& 0x03) << 12 ) ; // 5G 5B 5M 5E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x0c) << 16 ) | ((digit[1]& 0x03) << 12 ) ; // 5F 5A 5C 5D
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x0c) << 16 ) | ((digit[2]& 0x01) << 12 ) ; // 5Q 5K   5P 
 8001b6e:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x0c) << 16 ) | ((digit[3]& 0x01) << 12 ) ; // 5H 5J   5N
 8001b70:	4002      	ands	r2, r0
 8001b72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b74:	4084      	lsls	r4, r0
 8001b76:	0412      	lsls	r2, r2, #16
 8001b78:	e04c      	b.n	8001c14 <LCD_GLASS_WriteChar+0x37c>
      
      break;
    
    /* Position 6 on LCD (Digit6)*/
    case 6:
      LCD->RAM[LCD_RAMRegister_0] &= 0xfffc3fff;
 8001b7a:	695f      	ldr	r7, [r3, #20]
 8001b7c:	4836      	ldr	r0, [pc, #216]	; (8001c58 <LCD_GLASS_WriteChar+0x3c0>)
 8001b7e:	4007      	ands	r7, r0
 8001b80:	615f      	str	r7, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] &= 0xfffc3fff;
 8001b82:	69df      	ldr	r7, [r3, #28]
 8001b84:	4007      	ands	r7, r0
 8001b86:	61df      	str	r7, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
 8001b88:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001b8a:	4007      	ands	r7, r0
 8001b8c:	625f      	str	r7, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;
 8001b8e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8001b90:	4038      	ands	r0, r7
 8001b92:	62d8      	str	r0, [r3, #44]	; 0x2c

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
 8001b94:	6958      	ldr	r0, [r3, #20]
 8001b96:	1c2f      	adds	r7, r5, #0
 8001b98:	9003      	str	r0, [sp, #12]
 8001b9a:	2004      	movs	r0, #4
 8001b9c:	4007      	ands	r7, r0
 8001b9e:	03ff      	lsls	r7, r7, #15
 8001ba0:	46bc      	mov	ip, r7
 8001ba2:	2708      	movs	r7, #8
 8001ba4:	403d      	ands	r5, r7
 8001ba6:	4666      	mov	r6, ip
 8001ba8:	036d      	lsls	r5, r5, #13
 8001baa:	4335      	orrs	r5, r6
 8001bac:	46ac      	mov	ip, r5
 8001bae:	9d01      	ldr	r5, [sp, #4]
 8001bb0:	07ae      	lsls	r6, r5, #30
 8001bb2:	0c36      	lsrs	r6, r6, #16
 8001bb4:	4665      	mov	r5, ip
 8001bb6:	4335      	orrs	r5, r6
 8001bb8:	9e03      	ldr	r6, [sp, #12]
 8001bba:	4335      	orrs	r5, r6
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x04) << 15 ) | ((digit[1]& 0x08) << 13 ) | ((digit[1]& 0x03) << 14 ) ; // 6A 6F 6C 6D
 8001bbc:	1c26      	adds	r6, r4, #0
 8001bbe:	403e      	ands	r6, r7
      LCD->RAM[LCD_RAMRegister_0] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_2] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
 8001bc0:	615d      	str	r5, [r3, #20]
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x04) << 15 ) | ((digit[1]& 0x08) << 13 ) | ((digit[1]& 0x03) << 14 ) ; // 6A 6F 6C 6D
 8001bc2:	0376      	lsls	r6, r6, #13
 8001bc4:	69dd      	ldr	r5, [r3, #28]
 8001bc6:	46b4      	mov	ip, r6
 8001bc8:	1c26      	adds	r6, r4, #0
 8001bca:	4006      	ands	r6, r0
 8001bcc:	9503      	str	r5, [sp, #12]
 8001bce:	03f6      	lsls	r6, r6, #15
 8001bd0:	4665      	mov	r5, ip
 8001bd2:	4335      	orrs	r5, r6
 8001bd4:	07a4      	lsls	r4, r4, #30
 8001bd6:	0c26      	lsrs	r6, r4, #16
 8001bd8:	1c2c      	adds	r4, r5, #0
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	9e03      	ldr	r6, [sp, #12]
 8001bde:	4334      	orrs	r4, r6
 8001be0:	61dc      	str	r4, [r3, #28]
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x04) << 15 ) | ((digit[2]& 0x08) << 13 ) | ((digit[2]& 0x01) << 14 ) ; // 6K 6Q    6P 
 8001be2:	1c0e      	adds	r6, r1, #0
 8001be4:	1c0c      	adds	r4, r1, #0
 8001be6:	403e      	ands	r6, r7
 8001be8:	4004      	ands	r4, r0
 8001bea:	03e4      	lsls	r4, r4, #15
 8001bec:	0376      	lsls	r6, r6, #13
 8001bee:	4326      	orrs	r6, r4
 8001bf0:	2401      	movs	r4, #1
 8001bf2:	4021      	ands	r1, r4
 8001bf4:	46b4      	mov	ip, r6
 8001bf6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001bf8:	038e      	lsls	r6, r1, #14
 8001bfa:	4661      	mov	r1, ip
 8001bfc:	4331      	orrs	r1, r6
 8001bfe:	4329      	orrs	r1, r5
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x04) << 15 ) | ((digit[3]& 0x08) << 13 ) | ((digit[3]& 0x01) << 14 ) ; // 6J 6H   6N
 8001c00:	4017      	ands	r7, r2
 8001c02:	4010      	ands	r0, r2
      LCD->RAM[LCD_RAMRegister_4] &= 0xfffc3fff;
      LCD->RAM[LCD_RAMRegister_6] &= 0xfffc3fff;

      LCD->RAM[LCD_RAMRegister_0] |= ((digit[0]& 0x04) << 15 ) | ((digit[0]& 0x08) << 13 ) | ((digit[0]& 0x03) << 14 ) ; // 6B 6G 6M 6E	
      LCD->RAM[LCD_RAMRegister_2] |= ((digit[1]& 0x04) << 15 ) | ((digit[1]& 0x08) << 13 ) | ((digit[1]& 0x03) << 14 ) ; // 6A 6F 6C 6D
      LCD->RAM[LCD_RAMRegister_4] |= ((digit[2]& 0x04) << 15 ) | ((digit[2]& 0x08) << 13 ) | ((digit[2]& 0x01) << 14 ) ; // 6K 6Q    6P 
 8001c04:	6259      	str	r1, [r3, #36]	; 0x24
      LCD->RAM[LCD_RAMRegister_6] |= ((digit[3]& 0x04) << 15 ) | ((digit[3]& 0x08) << 13 ) | ((digit[3]& 0x01) << 14 ) ; // 6J 6H   6N
 8001c06:	037f      	lsls	r7, r7, #13
 8001c08:	03c0      	lsls	r0, r0, #15
 8001c0a:	4014      	ands	r4, r2
 8001c0c:	4338      	orrs	r0, r7
 8001c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c10:	03a4      	lsls	r4, r4, #14
 8001c12:	1c02      	adds	r2, r0, #0
 8001c14:	4322      	orrs	r2, r4
 8001c16:	430a      	orrs	r2, r1
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
     default:
      break;
  }

/* Refresh LCD  bar */
  LCD_bar();
 8001c1a:	f7ff fe23 	bl	8001864 <LCD_bar>

}
 8001c1e:	b005      	add	sp, #20
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	08002278 	.word	0x08002278
 8001c28:	0000ffdd 	.word	0x0000ffdd
 8001c2c:	0000b210 	.word	0x0000b210
 8001c30:	00002210 	.word	0x00002210
 8001c34:	08002244 	.word	0x08002244
 8001c38:	0000a0dd 	.word	0x0000a0dd
 8001c3c:	40002400 	.word	0x40002400
 8001c40:	cffffffc 	.word	0xcffffffc
 8001c44:	f3ffff03 	.word	0xf3ffff03
 8001c48:	fcfffcff 	.word	0xfcfffcff
 8001c4c:	ffcff3ff 	.word	0xffcff3ff
 8001c50:	fff3cfff 	.word	0xfff3cfff
 8001c54:	fff3efff 	.word	0xfff3efff
 8001c58:	fffc3fff 	.word	0xfffc3fff

08001c5c <LCD_GLASS_DisplayString>:

void LCD_GLASS_DisplayString(uint8_t* ptr)
{
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	1c05      	adds	r5, r0, #0
  uint8_t i = 0x01;

	/* wait for LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
 8001c60:	2004      	movs	r0, #4
 8001c62:	f7ff fc7f 	bl	8001564 <LCD_GetFlagStatus>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d1fa      	bne.n	8001c60 <LCD_GLASS_DisplayString+0x4>
 8001c6a:	1c2c      	adds	r4, r5, #0
 8001c6c:	1b63      	subs	r3, r4, r5
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b2db      	uxtb	r3, r3
	
  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (i < 8))
 8001c72:	2200      	movs	r2, #0
 8001c74:	2b07      	cmp	r3, #7
 8001c76:	d808      	bhi.n	8001c8a <LCD_GLASS_DisplayString+0x2e>
 8001c78:	7821      	ldrb	r1, [r4, #0]
 8001c7a:	4291      	cmp	r1, r2
 8001c7c:	d005      	beq.n	8001c8a <LCD_GLASS_DisplayString+0x2e>
  {
    /* Display one character on LCD */
    LCD_GLASS_WriteChar(ptr, FALSE, FALSE, i);
 8001c7e:	1c20      	adds	r0, r4, #0
 8001c80:	1c11      	adds	r1, r2, #0
 8001c82:	f7ff fe09 	bl	8001898 <LCD_GLASS_WriteChar>

    /* Point on the next character */
    ptr++;
 8001c86:	3401      	adds	r4, #1
 8001c88:	e7f0      	b.n	8001c6c <LCD_GLASS_DisplayString+0x10>
    /* Increment the character counter */
    i++;
  }

	/* Update the LCD display */
  LCD_UpdateDisplayRequest();
 8001c8a:	f7ff fc59 	bl	8001540 <LCD_UpdateDisplayRequest>
}
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}

08001c90 <LCD_GLASS_Clear>:

void LCD_GLASS_Clear(void)
{
 8001c90:	b508      	push	{r3, lr}
  uint32_t counter = 0;
	
  /* TO wait LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
 8001c92:	2004      	movs	r0, #4
 8001c94:	f7ff fc66 	bl	8001564 <LCD_GetFlagStatus>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d1fa      	bne.n	8001c92 <LCD_GLASS_Clear+0x2>
  
  for (counter = LCD_RAMRegister_0; counter <= LCD_RAMRegister_15; counter++)
  {
    LCD->RAM[counter] = 0;
 8001c9c:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <LCD_GLASS_Clear+0x24>)
 8001c9e:	0083      	lsls	r3, r0, #2
 8001ca0:	189b      	adds	r3, r3, r2
  uint32_t counter = 0;
	
  /* TO wait LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
  
  for (counter = LCD_RAMRegister_0; counter <= LCD_RAMRegister_15; counter++)
 8001ca2:	3001      	adds	r0, #1
  {
    LCD->RAM[counter] = 0;
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  uint32_t counter = 0;
	
  /* TO wait LCD Ready */  
  while( LCD_GetFlagStatus (LCD_FLAG_UDR) != RESET) ;
  
  for (counter = LCD_RAMRegister_0; counter <= LCD_RAMRegister_15; counter++)
 8001ca8:	2810      	cmp	r0, #16
 8001caa:	d1f7      	bne.n	8001c9c <LCD_GLASS_Clear+0xc>
  {
    LCD->RAM[counter] = 0;
  }

  /* Update the LCD display */
  LCD_UpdateDisplayRequest();
 8001cac:	f7ff fc48 	bl	8001540 <LCD_UpdateDisplayRequest>
  
}
 8001cb0:	bd08      	pop	{r3, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	40002410 	.word	0x40002410

08001cb8 <LCD_GLASS_Configure_GPIO>:

void LCD_GLASS_Configure_GPIO(void)
{
 8001cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
/* Enable GPIOs clock */ 	
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC , ENABLE);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	2007      	movs	r0, #7
 8001cbe:	f7fe fd5b 	bl	8000778 <RCC_AHBPeriphClockCmd>

  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
 8001cc2:	4668      	mov	r0, sp
 8001cc4:	f7fe faec 	bl	80002a0 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 8001cc8:	4c56      	ldr	r4, [pc, #344]	; (8001e24 <LCD_GLASS_Configure_GPIO+0x16c>)

  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
 8001cca:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <LCD_GLASS_Configure_GPIO+0x170>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ccc:	2502      	movs	r5, #2

  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
 8001cce:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 8001cd0:	1c20      	adds	r0, r4, #0
  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001cd2:	466b      	mov	r3, sp
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 8001cd4:	4669      	mov	r1, sp
  
/* Configure Output for LCD */
/* Port A */
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10 |GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001cd6:	711d      	strb	r5, [r3, #4]
  GPIO_Init( GPIOA, &GPIO_InitStructure);
 8001cd8:	f7fe fa8a 	bl	80001f0 <GPIO_Init>

  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1,GPIO_AF_LCD) ;
 8001cdc:	1c20      	adds	r0, r4, #0
 8001cde:	2101      	movs	r1, #1
 8001ce0:	220b      	movs	r2, #11
 8001ce2:	f7fe fb1f 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2,GPIO_AF_LCD) ;
 8001ce6:	1c29      	adds	r1, r5, #0
 8001ce8:	1c20      	adds	r0, r4, #0
 8001cea:	220b      	movs	r2, #11
 8001cec:	f7fe fb1a 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3,GPIO_AF_LCD) ;
 8001cf0:	1c20      	adds	r0, r4, #0
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	220b      	movs	r2, #11
 8001cf6:	f7fe fb15 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource8,GPIO_AF_LCD) ;
 8001cfa:	1c20      	adds	r0, r4, #0
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	220b      	movs	r2, #11
 8001d00:	f7fe fb10 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,GPIO_AF_LCD) ;
 8001d04:	1c20      	adds	r0, r4, #0
 8001d06:	2109      	movs	r1, #9
 8001d08:	220b      	movs	r2, #11
 8001d0a:	f7fe fb0b 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_LCD) ;
 8001d0e:	1c20      	adds	r0, r4, #0
 8001d10:	210a      	movs	r1, #10
 8001d12:	220b      	movs	r2, #11
 8001d14:	f7fe fb06 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15,GPIO_AF_LCD) ;  
 8001d18:	1c20      	adds	r0, r4, #0
 8001d1a:	220b      	movs	r2, #11
 8001d1c:	210f      	movs	r1, #15
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 8001d1e:	4c43      	ldr	r4, [pc, #268]	; (8001e2c <LCD_GLASS_Configure_GPIO+0x174>)
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource8,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15,GPIO_AF_LCD) ;  
 8001d20:	f7fe fb00 	bl	8000324 <GPIO_PinAFConfig>
  
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
 8001d24:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <LCD_GLASS_Configure_GPIO+0x178>)
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 8001d26:	1c20      	adds	r0, r4, #0
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15,GPIO_AF_LCD) ;  
  
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
 8001d28:	9300      	str	r3, [sp, #0]
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 8001d2a:	4669      	mov	r1, sp
  
/* Configure Output for LCD */
/* Port B */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_9 \
                                 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001d2c:	466b      	mov	r3, sp
 8001d2e:	711d      	strb	r5, [r3, #4]
  GPIO_Init( GPIOB, &GPIO_InitStructure);
 8001d30:	f7fe fa5e 	bl	80001f0 <GPIO_Init>
  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource3,GPIO_AF_LCD) ;
 8001d34:	1c20      	adds	r0, r4, #0
 8001d36:	2103      	movs	r1, #3
 8001d38:	220b      	movs	r2, #11
 8001d3a:	f7fe faf3 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource4,GPIO_AF_LCD) ;
 8001d3e:	1c20      	adds	r0, r4, #0
 8001d40:	2104      	movs	r1, #4
 8001d42:	220b      	movs	r2, #11
 8001d44:	f7fe faee 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5,GPIO_AF_LCD) ;
 8001d48:	1c20      	adds	r0, r4, #0
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	220b      	movs	r2, #11
 8001d4e:	f7fe fae9 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8,GPIO_AF_LCD) ;
 8001d52:	1c20      	adds	r0, r4, #0
 8001d54:	2108      	movs	r1, #8
 8001d56:	220b      	movs	r2, #11
 8001d58:	f7fe fae4 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9,GPIO_AF_LCD) ;
 8001d5c:	1c20      	adds	r0, r4, #0
 8001d5e:	2109      	movs	r1, #9
 8001d60:	220b      	movs	r2, #11
 8001d62:	f7fe fadf 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10,GPIO_AF_LCD) ;
 8001d66:	1c20      	adds	r0, r4, #0
 8001d68:	210a      	movs	r1, #10
 8001d6a:	220b      	movs	r2, #11
 8001d6c:	f7fe fada 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11,GPIO_AF_LCD) ;  
 8001d70:	210b      	movs	r1, #11
 8001d72:	1c20      	adds	r0, r4, #0
 8001d74:	1c0a      	adds	r2, r1, #0
 8001d76:	f7fe fad5 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource12,GPIO_AF_LCD) ;
 8001d7a:	1c20      	adds	r0, r4, #0
 8001d7c:	210c      	movs	r1, #12
 8001d7e:	220b      	movs	r2, #11
 8001d80:	f7fe fad0 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource13,GPIO_AF_LCD) ;   
 8001d84:	1c20      	adds	r0, r4, #0
 8001d86:	210d      	movs	r1, #13
 8001d88:	220b      	movs	r2, #11
 8001d8a:	f7fe facb 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,GPIO_AF_LCD) ;
 8001d8e:	1c20      	adds	r0, r4, #0
 8001d90:	210e      	movs	r1, #14
 8001d92:	220b      	movs	r2, #11
 8001d94:	f7fe fac6 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,GPIO_AF_LCD) ;   
 8001d98:	1c20      	adds	r0, r4, #0
 8001d9a:	220b      	movs	r2, #11
 8001d9c:	210f      	movs	r1, #15
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 8001d9e:	4c25      	ldr	r4, [pc, #148]	; (8001e34 <LCD_GLASS_Configure_GPIO+0x17c>)
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11,GPIO_AF_LCD) ;  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource12,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource13,GPIO_AF_LCD) ;   
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,GPIO_AF_LCD) ;   
 8001da0:	f7fe fac0 	bl	8000324 <GPIO_PinAFConfig>
  
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <LCD_GLASS_Configure_GPIO+0x180>)
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 8001da6:	1c20      	adds	r0, r4, #0
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,GPIO_AF_LCD) ;
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,GPIO_AF_LCD) ;   
  
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
 8001da8:	9300      	str	r3, [sp, #0]
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 8001daa:	4669      	mov	r1, sp
  
/* Configure Output for LCD */
/* Port C*/  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 \
                                 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 ;                               
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001dac:	466b      	mov	r3, sp
 8001dae:	711d      	strb	r5, [r3, #4]
  GPIO_Init( GPIOC, &GPIO_InitStructure);  
 8001db0:	f7fe fa1e 	bl	80001f0 <GPIO_Init>
  

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0,GPIO_AF_LCD) ;
 8001db4:	1c20      	adds	r0, r4, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	220b      	movs	r2, #11
 8001dba:	f7fe fab3 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource1,GPIO_AF_LCD) ; 
 8001dbe:	1c20      	adds	r0, r4, #0
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	220b      	movs	r2, #11
 8001dc4:	f7fe faae 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource2,GPIO_AF_LCD) ;
 8001dc8:	1c29      	adds	r1, r5, #0
 8001dca:	1c20      	adds	r0, r4, #0
 8001dcc:	220b      	movs	r2, #11
 8001dce:	f7fe faa9 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource3,GPIO_AF_LCD) ;
 8001dd2:	1c20      	adds	r0, r4, #0
 8001dd4:	2103      	movs	r1, #3
 8001dd6:	220b      	movs	r2, #11
 8001dd8:	f7fe faa4 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6,GPIO_AF_LCD) ;
 8001ddc:	1c20      	adds	r0, r4, #0
 8001dde:	2106      	movs	r1, #6
 8001de0:	220b      	movs	r2, #11
 8001de2:	f7fe fa9f 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7,GPIO_AF_LCD) ;
 8001de6:	1c20      	adds	r0, r4, #0
 8001de8:	2107      	movs	r1, #7
 8001dea:	220b      	movs	r2, #11
 8001dec:	f7fe fa9a 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8,GPIO_AF_LCD) ;
 8001df0:	1c20      	adds	r0, r4, #0
 8001df2:	2108      	movs	r1, #8
 8001df4:	220b      	movs	r2, #11
 8001df6:	f7fe fa95 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9,GPIO_AF_LCD) ;
 8001dfa:	1c20      	adds	r0, r4, #0
 8001dfc:	2109      	movs	r1, #9
 8001dfe:	220b      	movs	r2, #11
 8001e00:	f7fe fa90 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10,GPIO_AF_LCD) ; 
 8001e04:	1c20      	adds	r0, r4, #0
 8001e06:	210a      	movs	r1, #10
 8001e08:	220b      	movs	r2, #11
 8001e0a:	f7fe fa8b 	bl	8000324 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11,GPIO_AF_LCD) ;  
 8001e0e:	210b      	movs	r1, #11
 8001e10:	1c0a      	adds	r2, r1, #0
 8001e12:	1c20      	adds	r0, r4, #0
 8001e14:	f7fe fa86 	bl	8000324 <GPIO_PinAFConfig>

/* Disable GPIOs clock */ 	
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC , DISABLE);
 8001e18:	2007      	movs	r0, #7
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	f7fe fcac 	bl	8000778 <RCC_AHBPeriphClockCmd>
  
}
 8001e20:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40020000 	.word	0x40020000
 8001e28:	0000870e 	.word	0x0000870e
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	0000ff38 	.word	0x0000ff38
 8001e34:	40020800 	.word	0x40020800
 8001e38:	00000fcf 	.word	0x00000fcf

08001e3c <LCD_GLASS_Init>:

void LCD_GLASS_Init(void)
{
 8001e3c:	b530      	push	{r4, r5, lr}
  LCD_InitTypeDef LCD_InitStruct;

  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
 8001e3e:	23f0      	movs	r3, #240	; 0xf0
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC , DISABLE);
  
}

void LCD_GLASS_Init(void)
{
 8001e40:	b087      	sub	sp, #28
  LCD_InitTypeDef LCD_InitStruct;

  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
 8001e42:	039b      	lsls	r3, r3, #14

void LCD_GLASS_Init(void)
{
  LCD_InitTypeDef LCD_InitStruct;

  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
 8001e44:	2400      	movs	r4, #0
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
 8001e46:	9302      	str	r3, [sp, #8]
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
  LCD_InitStruct.LCD_Bias = LCD_Bias_1_3;
 8001e48:	2540      	movs	r5, #64	; 0x40
{
  LCD_InitTypeDef LCD_InitStruct;

  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
 8001e4a:	230c      	movs	r3, #12
  LCD_InitStruct.LCD_Bias = LCD_Bias_1_3;
  LCD_InitStruct.LCD_VoltageSource = LCD_VoltageSource_Internal;

 
  /* Initialize the LCD */
  LCD_Init(&LCD_InitStruct);
 8001e4c:	a801      	add	r0, sp, #4
{
  LCD_InitTypeDef LCD_InitStruct;

  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
 8001e4e:	9303      	str	r3, [sp, #12]

void LCD_GLASS_Init(void)
{
  LCD_InitTypeDef LCD_InitStruct;

  LCD_InitStruct.LCD_Prescaler = LCD_Prescaler_1;
 8001e50:	9401      	str	r4, [sp, #4]
  LCD_InitStruct.LCD_Divider = LCD_Divider_31;
  LCD_InitStruct.LCD_Duty = LCD_Duty_1_4;
  LCD_InitStruct.LCD_Bias = LCD_Bias_1_3;
 8001e52:	9504      	str	r5, [sp, #16]
  LCD_InitStruct.LCD_VoltageSource = LCD_VoltageSource_Internal;
 8001e54:	9405      	str	r4, [sp, #20]

 
  /* Initialize the LCD */
  LCD_Init(&LCD_InitStruct);
 8001e56:	f7ff faef 	bl	8001438 <LCD_Init>
  
  LCD_MuxSegmentCmd(ENABLE);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fb2a 	bl	80014b4 <LCD_MuxSegmentCmd>
  
  /* To set contrast to mean value */
  LCD_ContrastConfig(LCD_Contrast_Level_4);
 8001e60:	2080      	movs	r0, #128	; 0x80
 8001e62:	0140      	lsls	r0, r0, #5
 8001e64:	f7ff fb56 	bl	8001514 <LCD_ContrastConfig>
  
  LCD_DeadTimeConfig(LCD_DeadTime_0);
 8001e68:	1c20      	adds	r0, r4, #0
 8001e6a:	f7ff fb35 	bl	80014d8 <LCD_DeadTimeConfig>
  LCD_PulseOnDurationConfig(LCD_PulseOnDuration_4);
 8001e6e:	1c28      	adds	r0, r5, #0
 8001e70:	f7ff fb26 	bl	80014c0 <LCD_PulseOnDurationConfig>

  /* Wait Until the LCD FCR register is synchronized */
  LCD_WaitForSynchro();
 8001e74:	f7ff fb10 	bl	8001498 <LCD_WaitForSynchro>
  
  /* Enable LCD peripheral */
  LCD_Cmd(ENABLE);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff fb07 	bl	800148c <LCD_Cmd>
  
  /* Wait Until the LCD is enabled */
  while(LCD_GetFlagStatus(LCD_FLAG_ENS) == RESET)
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fb70 	bl	8001564 <LCD_GetFlagStatus>
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d0fa      	beq.n	8001e7e <LCD_GLASS_Init+0x42>
  {
  }
  /*!< Wait Until the LCD Booster is ready */  
  while(LCD_GetFlagStatus(LCD_FLAG_RDY) == RESET)
 8001e88:	2010      	movs	r0, #16
 8001e8a:	f7ff fb6b 	bl	8001564 <LCD_GetFlagStatus>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d0fa      	beq.n	8001e88 <LCD_GLASS_Init+0x4c>
  {
  } 

  LCD_BlinkConfig(LCD_BlinkMode_Off,LCD_BlinkFrequency_Div32);	  
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	2000      	movs	r0, #0
 8001e96:	01c9      	lsls	r1, r1, #7
 8001e98:	f7ff fb2c 	bl	80014f4 <LCD_BlinkConfig>
  LCD_GLASS_Clear();
 8001e9c:	f7ff fef8 	bl	8001c90 <LCD_GLASS_Clear>
}
 8001ea0:	b007      	add	sp, #28
 8001ea2:	bd30      	pop	{r4, r5, pc}

08001ea4 <_putc.6581>:
	char *pbuffer = buffer;
	char bf[24];
	char ch;

	int _putc(char ch)
	{
 8001ea4:	4663      	mov	r3, ip
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	6899      	ldr	r1, [r3, #8]
	char *pbuffer = buffer;
	char bf[24];
	char ch;

	int _putc(char ch)
	{
 8001eaa:	b530      	push	{r4, r5, lr}
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
 8001eac:	1a8c      	subs	r4, r1, r2
 8001eae:	681d      	ldr	r5, [r3, #0]
 8001eb0:	3401      	adds	r4, #1
			return 0;
 8001eb2:	2200      	movs	r2, #0
	char bf[24];
	char ch;

	int _putc(char ch)
	{
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
 8001eb4:	42ac      	cmp	r4, r5
 8001eb6:	d205      	bcs.n	8001ec4 <_putc.6581+0x20>
			return 0;
		*(pbuffer++) = ch;
 8001eb8:	1c4c      	adds	r4, r1, #1
 8001eba:	609c      	str	r4, [r3, #8]
 8001ebc:	7008      	strb	r0, [r1, #0]
		*(pbuffer) = '\0';
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	701a      	strb	r2, [r3, #0]
		return 1;
 8001ec2:	2201      	movs	r2, #1
	}
 8001ec4:	1c10      	adds	r0, r2, #0
 8001ec6:	bd30      	pop	{r4, r5, pc}

08001ec8 <_puts.6585>:

	int _puts(char *s, unsigned int len)
	{
 8001ec8:	4662      	mov	r2, ip
 8001eca:	b570      	push	{r4, r5, r6, lr}
		unsigned int i;

		if (buffer_len - (pbuffer - buffer) - 1 < len)
 8001ecc:	6814      	ldr	r4, [r2, #0]
 8001ece:	6855      	ldr	r5, [r2, #4]
 8001ed0:	6896      	ldr	r6, [r2, #8]
		*(pbuffer) = '\0';
		return 1;
	}

	int _puts(char *s, unsigned int len)
	{
 8001ed2:	1c03      	adds	r3, r0, #0
		unsigned int i;

		if (buffer_len - (pbuffer - buffer) - 1 < len)
 8001ed4:	3c01      	subs	r4, #1
 8001ed6:	1ba8      	subs	r0, r5, r6
 8001ed8:	1820      	adds	r0, r4, r0
 8001eda:	4288      	cmp	r0, r1
 8001edc:	d900      	bls.n	8001ee0 <_puts.6585+0x18>
 8001ede:	1c08      	adds	r0, r1, #0
 8001ee0:	181c      	adds	r4, r3, r0
 8001ee2:	6891      	ldr	r1, [r2, #8]
			len = buffer_len - (pbuffer - buffer) - 1;

		/* Copy to buffer */
		for (i = 0; i < len; i++)
 8001ee4:	42a3      	cmp	r3, r4
 8001ee6:	d005      	beq.n	8001ef4 <_puts.6585+0x2c>
			*(pbuffer++) = s[i];
 8001ee8:	1c4d      	adds	r5, r1, #1
 8001eea:	6095      	str	r5, [r2, #8]
 8001eec:	781d      	ldrb	r5, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	700d      	strb	r5, [r1, #0]
 8001ef2:	e7f6      	b.n	8001ee2 <_puts.6585+0x1a>
		*(pbuffer) = '\0';
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	700b      	strb	r3, [r1, #0]

		return len;
	}
 8001ef8:	bd70      	pop	{r4, r5, r6, pc}

08001efa <mini_itoa.part.0>:
	while (s[len] != '\0') len++;
	return len;
}

static unsigned int
mini_itoa(int value, unsigned int radix, unsigned int uppercase,
 8001efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001efc:	9201      	str	r2, [sp, #4]
	 char *buffer, unsigned int zero_pad)
{
	char	*pbuffer = buffer;
	int	negative = 0;
 8001efe:	2200      	movs	r2, #0
	while (s[len] != '\0') len++;
	return len;
}

static unsigned int
mini_itoa(int value, unsigned int radix, unsigned int uppercase,
 8001f00:	1c04      	adds	r4, r0, #0
 8001f02:	1c0f      	adds	r7, r1, #0
 8001f04:	1c1e      	adds	r6, r3, #0
	 char *buffer, unsigned int zero_pad)
{
	char	*pbuffer = buffer;
	int	negative = 0;
 8001f06:	9200      	str	r2, [sp, #0]

	/* No support for unusual radixes. */
	if (radix > 16)
		return 0;

	if (value < 0) {
 8001f08:	4290      	cmp	r0, r2
 8001f0a:	da02      	bge.n	8001f12 <mini_itoa.part.0+0x18>
		negative = 1;
 8001f0c:	2301      	movs	r3, #1
		value = -value;
 8001f0e:	4244      	negs	r4, r0
	/* No support for unusual radixes. */
	if (radix > 16)
		return 0;

	if (value < 0) {
		negative = 1;
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	1c35      	adds	r5, r6, #0
		value = -value;
	}

	/* This builds the string back to front ... */
	do {
		int digit = value % radix;
 8001f14:	1c20      	adds	r0, r4, #0
 8001f16:	1c39      	adds	r1, r7, #0
 8001f18:	f7ff fb96 	bl	8001648 <__aeabi_uidivmod>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 8001f1c:	3501      	adds	r5, #1
 8001f1e:	2909      	cmp	r1, #9
 8001f20:	dc01      	bgt.n	8001f26 <mini_itoa.part.0+0x2c>
 8001f22:	3130      	adds	r1, #48	; 0x30
 8001f24:	e006      	b.n	8001f34 <mini_itoa.part.0+0x3a>
 8001f26:	9a01      	ldr	r2, [sp, #4]
 8001f28:	2361      	movs	r3, #97	; 0x61
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d000      	beq.n	8001f30 <mini_itoa.part.0+0x36>
 8001f2e:	2341      	movs	r3, #65	; 0x41
 8001f30:	390a      	subs	r1, #10
 8001f32:	1859      	adds	r1, r3, r1
 8001f34:	b2c9      	uxtb	r1, r1
 8001f36:	1e6b      	subs	r3, r5, #1
 8001f38:	7019      	strb	r1, [r3, #0]
		value /= radix;
 8001f3a:	1c20      	adds	r0, r4, #0
 8001f3c:	1c39      	adds	r1, r7, #0
 8001f3e:	f7ff fb3f 	bl	80015c0 <__aeabi_uidiv>
 8001f42:	1e04      	subs	r4, r0, #0
	} while (value > 0);
 8001f44:	d1e6      	bne.n	8001f14 <mini_itoa.part.0+0x1a>

	for (i = (pbuffer - buffer); i < zero_pad; i++)
 8001f46:	1ba9      	subs	r1, r5, r6
 8001f48:	1c2b      	adds	r3, r5, #0
 8001f4a:	1b4a      	subs	r2, r1, r5
 8001f4c:	9c08      	ldr	r4, [sp, #32]
 8001f4e:	18d2      	adds	r2, r2, r3
 8001f50:	1c18      	adds	r0, r3, #0
 8001f52:	42a2      	cmp	r2, r4
 8001f54:	d203      	bcs.n	8001f5e <mini_itoa.part.0+0x64>
		*(pbuffer++) = '0';
 8001f56:	2230      	movs	r2, #48	; 0x30
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	e7f5      	b.n	8001f4a <mini_itoa.part.0+0x50>

	if (negative)
 8001f5e:	9c00      	ldr	r4, [sp, #0]
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	d002      	beq.n	8001f6a <mini_itoa.part.0+0x70>
		*(pbuffer++) = '-';
 8001f64:	222d      	movs	r2, #45	; 0x2d
 8001f66:	3001      	adds	r0, #1
 8001f68:	701a      	strb	r2, [r3, #0]

	*(pbuffer) = '\0';
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	7003      	strb	r3, [r0, #0]

	/* ... now we reverse it (could do it recursively but will
	 * conserve the stack space) */
	len = (pbuffer - buffer);
 8001f6e:	1b80      	subs	r0, r0, r6
	for (i = 0; i < len / 2; i++) {
 8001f70:	0842      	lsrs	r2, r0, #1
 8001f72:	1833      	adds	r3, r6, r0
 8001f74:	18b2      	adds	r2, r6, r2
 8001f76:	3b01      	subs	r3, #1
 8001f78:	4296      	cmp	r6, r2
 8001f7a:	d005      	beq.n	8001f88 <mini_itoa.part.0+0x8e>
		char j = buffer[i];
 8001f7c:	7831      	ldrb	r1, [r6, #0]
		buffer[i] = buffer[len-i-1];
 8001f7e:	781c      	ldrb	r4, [r3, #0]
 8001f80:	7034      	strb	r4, [r6, #0]
		buffer[len-i-1] = j;
 8001f82:	7019      	strb	r1, [r3, #0]
 8001f84:	3601      	adds	r6, #1
 8001f86:	e7f6      	b.n	8001f76 <mini_itoa.part.0+0x7c>
	}

	return len;
}
 8001f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001f8a <mini_vsnprintf>:

int
mini_vsnprintf(char *buffer, unsigned int buffer_len, char *fmt, va_list va)
{
 8001f8a:	b570      	push	{r4, r5, r6, lr}
 8001f8c:	b08c      	sub	sp, #48	; 0x30
 8001f8e:	1c15      	adds	r5, r2, #0
 8001f90:	1c1c      	adds	r4, r3, #0

	return len;
}

int
mini_vsnprintf(char *buffer, unsigned int buffer_len, char *fmt, va_list va)
 8001f92:	9004      	str	r0, [sp, #16]
 8001f94:	9103      	str	r1, [sp, #12]
{
	char *pbuffer = buffer;
 8001f96:	9005      	str	r0, [sp, #20]
		*(pbuffer) = '\0';

		return len;
	}

	while ((ch=*(fmt++))) {
 8001f98:	7828      	ldrb	r0, [r5, #0]
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d067      	beq.n	800206e <mini_vsnprintf+0xe4>
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
 8001f9e:	9905      	ldr	r1, [sp, #20]
 8001fa0:	9a04      	ldr	r2, [sp, #16]
 8001fa2:	1a8b      	subs	r3, r1, r2
 8001fa4:	9903      	ldr	r1, [sp, #12]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	428b      	cmp	r3, r1
 8001faa:	d260      	bcs.n	800206e <mini_vsnprintf+0xe4>
			break;
		if (ch!='%')
 8001fac:	2825      	cmp	r0, #37	; 0x25
 8001fae:	d003      	beq.n	8001fb8 <mini_vsnprintf+0x2e>
			_putc(ch);
 8001fb0:	aa03      	add	r2, sp, #12
		*(pbuffer) = '\0';

		return len;
	}

	while ((ch=*(fmt++))) {
 8001fb2:	3501      	adds	r5, #1
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
			break;
		if (ch!='%')
			_putc(ch);
 8001fb4:	4694      	mov	ip, r2
 8001fb6:	e057      	b.n	8002068 <mini_vsnprintf+0xde>
		else {
			char zero_pad = 0;
			char *ptr;
			unsigned int len;

			ch=*(fmt++);
 8001fb8:	7868      	ldrb	r0, [r5, #1]

			/* Zero padding requested */
			if (ch=='0') {
 8001fba:	2830      	cmp	r0, #48	; 0x30
 8001fbc:	d002      	beq.n	8001fc4 <mini_vsnprintf+0x3a>
		else {
			char zero_pad = 0;
			char *ptr;
			unsigned int len;

			ch=*(fmt++);
 8001fbe:	3502      	adds	r5, #2
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
			break;
		if (ch!='%')
			_putc(ch);
		else {
			char zero_pad = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e00c      	b.n	8001fde <mini_vsnprintf+0x54>

			ch=*(fmt++);

			/* Zero padding requested */
			if (ch=='0') {
				ch=*(fmt++);
 8001fc4:	78ab      	ldrb	r3, [r5, #2]
				if (ch == '\0')
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d051      	beq.n	800206e <mini_vsnprintf+0xe4>
					goto end;
				if (ch >= '0' && ch <= '9')
 8001fca:	3b30      	subs	r3, #48	; 0x30
 8001fcc:	b2db      	uxtb	r3, r3
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
			break;
		if (ch!='%')
			_putc(ch);
		else {
			char zero_pad = 0;
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2109      	movs	r1, #9
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	4152      	adcs	r2, r2
 8001fd6:	4252      	negs	r2, r2
				ch=*(fmt++);
				if (ch == '\0')
					goto end;
				if (ch >= '0' && ch <= '9')
					zero_pad = ch - '0';
				ch=*(fmt++);
 8001fd8:	78e8      	ldrb	r0, [r5, #3]
		if ((unsigned int)((pbuffer - buffer) + 1) >= buffer_len)
			break;
		if (ch!='%')
			_putc(ch);
		else {
			char zero_pad = 0;
 8001fda:	4013      	ands	r3, r2
				ch=*(fmt++);
				if (ch == '\0')
					goto end;
				if (ch >= '0' && ch <= '9')
					zero_pad = ch - '0';
				ch=*(fmt++);
 8001fdc:	3504      	adds	r5, #4
			}

			switch (ch) {
 8001fde:	2864      	cmp	r0, #100	; 0x64
 8001fe0:	d011      	beq.n	8002006 <mini_vsnprintf+0x7c>
 8001fe2:	d806      	bhi.n	8001ff2 <mini_vsnprintf+0x68>
 8001fe4:	2858      	cmp	r0, #88	; 0x58
 8001fe6:	d01a      	beq.n	800201e <mini_vsnprintf+0x94>
 8001fe8:	2863      	cmp	r0, #99	; 0x63
 8001fea:	d028      	beq.n	800203e <mini_vsnprintf+0xb4>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d139      	bne.n	8002064 <mini_vsnprintf+0xda>
 8001ff0:	e03d      	b.n	800206e <mini_vsnprintf+0xe4>
 8001ff2:	2875      	cmp	r0, #117	; 0x75
 8001ff4:	d007      	beq.n	8002006 <mini_vsnprintf+0x7c>
 8001ff6:	2878      	cmp	r0, #120	; 0x78
 8001ff8:	d011      	beq.n	800201e <mini_vsnprintf+0x94>
 8001ffa:	2873      	cmp	r0, #115	; 0x73
 8001ffc:	d132      	bne.n	8002064 <mini_vsnprintf+0xda>
				case 'c' :
					_putc((char)(va_arg(va, int)));
					break;

				case 's' :
					ptr = va_arg(va, char*);
 8001ffe:	6820      	ldr	r0, [r4, #0]
 8002000:	1d26      	adds	r6, r4, #4
 8002002:	1c03      	adds	r3, r0, #0
 8002004:	e022      	b.n	800204c <mini_vsnprintf+0xc2>
 8002006:	6820      	ldr	r0, [r4, #0]
 8002008:	210a      	movs	r1, #10
				case 0:
					goto end;

				case 'u':
				case 'd':
					len = mini_itoa(va_arg(va, unsigned int), 10, 0, bf, zero_pad);
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	ab06      	add	r3, sp, #24
 8002010:	f7ff ff73 	bl	8001efa <mini_itoa.part.0>
					_puts(bf, len);
 8002014:	ab03      	add	r3, sp, #12
				case 0:
					goto end;

				case 'u':
				case 'd':
					len = mini_itoa(va_arg(va, unsigned int), 10, 0, bf, zero_pad);
 8002016:	1d26      	adds	r6, r4, #4
 8002018:	1c01      	adds	r1, r0, #0
					_puts(bf, len);
 800201a:	469c      	mov	ip, r3
 800201c:	e00d      	b.n	800203a <mini_vsnprintf+0xb0>
 800201e:	6821      	ldr	r1, [r4, #0]
					break;

				case 'x':
				case 'X':
					len = mini_itoa(va_arg(va, unsigned int), 16, (ch=='X'), bf, zero_pad);
 8002020:	3858      	subs	r0, #88	; 0x58
 8002022:	4242      	negs	r2, r0
 8002024:	4142      	adcs	r2, r0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	1c08      	adds	r0, r1, #0
 800202a:	ab06      	add	r3, sp, #24
 800202c:	2110      	movs	r1, #16
 800202e:	f7ff ff64 	bl	8001efa <mini_itoa.part.0>
					_puts(bf, len);
 8002032:	aa03      	add	r2, sp, #12
					_puts(bf, len);
					break;

				case 'x':
				case 'X':
					len = mini_itoa(va_arg(va, unsigned int), 16, (ch=='X'), bf, zero_pad);
 8002034:	1d26      	adds	r6, r4, #4
 8002036:	1c01      	adds	r1, r0, #0
					_puts(bf, len);
 8002038:	4694      	mov	ip, r2
 800203a:	a806      	add	r0, sp, #24
 800203c:	e00e      	b.n	800205c <mini_vsnprintf+0xd2>
					break;

				case 'c' :
					_putc((char)(va_arg(va, int)));
 800203e:	ab03      	add	r3, sp, #12
 8002040:	7820      	ldrb	r0, [r4, #0]
 8002042:	469c      	mov	ip, r3
 8002044:	1d26      	adds	r6, r4, #4
 8002046:	f7ff ff2d 	bl	8001ea4 <_putc.6581>
 800204a:	e009      	b.n	8002060 <mini_vsnprintf+0xd6>
 800204c:	1a19      	subs	r1, r3, r0
 800204e:	3301      	adds	r3, #1
 8002050:	1e5a      	subs	r2, r3, #1

static unsigned int
mini_strlen(const char *s)
{
	unsigned int len = 0;
	while (s[len] != '\0') len++;
 8002052:	7812      	ldrb	r2, [r2, #0]
 8002054:	2a00      	cmp	r2, #0
 8002056:	d1f9      	bne.n	800204c <mini_vsnprintf+0xc2>
					_putc((char)(va_arg(va, int)));
					break;

				case 's' :
					ptr = va_arg(va, char*);
					_puts(ptr, mini_strlen(ptr));
 8002058:	aa03      	add	r2, sp, #12
 800205a:	4694      	mov	ip, r2
 800205c:	f7ff ff34 	bl	8001ec8 <_puts.6585>
				case 'c' :
					_putc((char)(va_arg(va, int)));
					break;

				case 's' :
					ptr = va_arg(va, char*);
 8002060:	1c34      	adds	r4, r6, #0
					_puts(ptr, mini_strlen(ptr));
					break;
 8002062:	e799      	b.n	8001f98 <mini_vsnprintf+0xe>

				default:
					_putc(ch);
 8002064:	ab03      	add	r3, sp, #12
 8002066:	469c      	mov	ip, r3
 8002068:	f7ff ff1c 	bl	8001ea4 <_putc.6581>
					break;
 800206c:	e794      	b.n	8001f98 <mini_vsnprintf+0xe>
			}
		}
	}
end:
	return pbuffer - buffer;
 800206e:	9805      	ldr	r0, [sp, #20]
 8002070:	9b04      	ldr	r3, [sp, #16]
 8002072:	1ac0      	subs	r0, r0, r3
}
 8002074:	b00c      	add	sp, #48	; 0x30
 8002076:	bd70      	pop	{r4, r5, r6, pc}

08002078 <mini_snprintf>:


int
mini_snprintf(char* buffer, unsigned int buffer_len, char *fmt, ...)
{
 8002078:	b40c      	push	{r2, r3}
 800207a:	b507      	push	{r0, r1, r2, lr}
 800207c:	ab04      	add	r3, sp, #16
 800207e:	cb04      	ldmia	r3!, {r2}
	int ret;
	va_list va;
	va_start(va, fmt);
 8002080:	9301      	str	r3, [sp, #4]
	ret = mini_vsnprintf(buffer, buffer_len, fmt, va);
 8002082:	f7ff ff82 	bl	8001f8a <mini_vsnprintf>
	va_end(va);

	return ret;
}
 8002086:	b003      	add	sp, #12
 8002088:	bc08      	pop	{r3}
 800208a:	b002      	add	sp, #8
 800208c:	4718      	bx	r3
	...

08002090 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <SystemInit+0xf4>)
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002092:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	0052      	lsls	r2, r2, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	4a39      	ldr	r2, [pc, #228]	; (8002188 <SystemInit+0xf8>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	4a38      	ldr	r2, [pc, #224]	; (800218c <SystemInit+0xfc>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	4a37      	ldr	r2, [pc, #220]	; (8002190 <SystemInit+0x100>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4936      	ldr	r1, [pc, #216]	; (8002194 <SystemInit+0x104>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80020c2:	9200      	str	r2, [sp, #0]
 80020c4:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	0252      	lsls	r2, r2, #9
 80020cc:	4302      	orrs	r2, r0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	1c08      	adds	r0, r1, #0
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	0292      	lsls	r2, r2, #10
 80020d8:	4011      	ands	r1, r2
 80020da:	9101      	str	r1, [sp, #4]
    StartUpCounter++;
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	3101      	adds	r1, #1
 80020e0:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80020e2:	9901      	ldr	r1, [sp, #4]
 80020e4:	2900      	cmp	r1, #0
 80020e6:	d104      	bne.n	80020f2 <SystemInit+0x62>
 80020e8:	9c00      	ldr	r4, [sp, #0]
 80020ea:	21a0      	movs	r1, #160	; 0xa0
 80020ec:	01c9      	lsls	r1, r1, #7
 80020ee:	428c      	cmp	r4, r1
 80020f0:	d1ef      	bne.n	80020d2 <SystemInit+0x42>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	d000      	beq.n	80020fa <SystemInit+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80020f8:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80020fa:	9201      	str	r2, [sp, #4]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80020fc:	9901      	ldr	r1, [sp, #4]
 80020fe:	2901      	cmp	r1, #1
 8002100:	d004      	beq.n	800210c <SystemInit+0x7c>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SystemInit+0x108>)
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	0512      	lsls	r2, r2, #20
 8002108:	609a      	str	r2, [r3, #8]
#endif
}
 800210a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  }
  
  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 800210c:	4a23      	ldr	r2, [pc, #140]	; (800219c <SystemInit+0x10c>)
 800210e:	2504      	movs	r5, #4
 8002110:	6814      	ldr	r4, [r2, #0]
 8002112:	432c      	orrs	r4, r5
 8002114:	6014      	str	r4, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8002116:	6814      	ldr	r4, [r2, #0]
 8002118:	2502      	movs	r5, #2
 800211a:	432c      	orrs	r4, r5
 800211c:	6014      	str	r4, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 800211e:	6814      	ldr	r4, [r2, #0]
 8002120:	4321      	orrs	r1, r4
 8002122:	6011      	str	r1, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002124:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	0552      	lsls	r2, r2, #21
 800212a:	430a      	orrs	r2, r1
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <SystemInit+0x110>)
 8002132:	0109      	lsls	r1, r1, #4
 8002134:	6011      	str	r1, [r2, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8002136:	6851      	ldr	r1, [r2, #4]
 8002138:	06cc      	lsls	r4, r1, #27
 800213a:	d4fc      	bmi.n	8002136 <SystemInit+0xa6>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	609a      	str	r2, [r3, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	609a      	str	r2, [r3, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8002148:	6899      	ldr	r1, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800214a:	2291      	movs	r2, #145	; 0x91
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800214c:	4001      	ands	r1, r0
 800214e:	6099      	str	r1, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	0412      	lsls	r2, r2, #16
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	0452      	lsls	r2, r2, #17
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <SystemInit+0xf4>)
 8002166:	0188      	lsls	r0, r1, #6
 8002168:	d5fb      	bpl.n	8002162 <SystemInit+0xd2>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800216a:	6890      	ldr	r0, [r2, #8]
 800216c:	2103      	movs	r1, #3
 800216e:	4388      	bics	r0, r1
 8002170:	6090      	str	r0, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002172:	6890      	ldr	r0, [r2, #8]
 8002174:	4301      	orrs	r1, r0
 8002176:	6091      	str	r1, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	220c      	movs	r2, #12
 800217c:	400a      	ands	r2, r1
 800217e:	2a0c      	cmp	r2, #12
 8002180:	d1fa      	bne.n	8002178 <SystemInit+0xe8>
 8002182:	e7be      	b.n	8002102 <SystemInit+0x72>
 8002184:	40023800 	.word	0x40023800
 8002188:	88ffc00c 	.word	0x88ffc00c
 800218c:	eefefffe 	.word	0xeefefffe
 8002190:	fffbffff 	.word	0xfffbffff
 8002194:	ff02ffff 	.word	0xff02ffff
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	40023c00 	.word	0x40023c00
 80021a0:	40007000 	.word	0x40007000

080021a4 <Reset_Handler>:
.weak Reset_Handler
.type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
movs r1, #0
 80021a4:	2100      	movs	r1, #0
b LoopCopyDataInit
 80021a6:	f000 b804 	b.w	80021b2 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
ldr r3, =_sidata
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <LoopFillZerobss+0x16>)
ldr r3, [r3, r1]
 80021ac:	585b      	ldr	r3, [r3, r1]
str r3, [r0, r1]
 80021ae:	5043      	str	r3, [r0, r1]
adds r1, r1, #4
 80021b0:	3104      	adds	r1, #4

080021b2 <LoopCopyDataInit>:

LoopCopyDataInit:
ldr r0, =_sdata
 80021b2:	480c      	ldr	r0, [pc, #48]	; (80021e4 <LoopFillZerobss+0x1a>)
ldr r3, =_edata
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <LoopFillZerobss+0x1e>)
adds r2, r0, r1
 80021b6:	1842      	adds	r2, r0, r1
cmp r2, r3
 80021b8:	429a      	cmp	r2, r3
bcc CopyDataInit
 80021ba:	f4ff aff6 	bcc.w	80021aa <CopyDataInit>
ldr r2, =_sbss
 80021be:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <LoopFillZerobss+0x22>)
b LoopFillZerobss
 80021c0:	f000 b803 	b.w	80021ca <LoopFillZerobss>

080021c4 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
movs r3, #0
 80021c4:	2300      	movs	r3, #0
str r3, [r2], #4
 80021c6:	f842 3b04 	str.w	r3, [r2], #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
ldr r3, = _ebss
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <LoopFillZerobss+0x26>)
cmp r2, r3
 80021cc:	429a      	cmp	r2, r3
bcc FillZerobss
 80021ce:	f4ff aff9 	bcc.w	80021c4 <FillZerobss>

/* Call the clock system intitialization function.*/
bl SystemInit
 80021d2:	f7ff ff5d 	bl	8002090 <SystemInit>
/* Call static constructors */
bl __libc_init_array
 80021d6:	f000 f80f 	bl	80021f8 <__libc_init_array>
/* Call the application's entry point.*/
bl main
 80021da:	f7ff fb0b 	bl	80017f4 <main>
bx lr
 80021de:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
movs r1, #0
b LoopCopyDataInit

CopyDataInit:
ldr r3, =_sidata
 80021e0:	080022a4 	.word	0x080022a4
ldr r3, [r3, r1]
str r3, [r0, r1]
adds r1, r1, #4

LoopCopyDataInit:
ldr r0, =_sdata
 80021e4:	20000000 	.word	0x20000000
ldr r3, =_edata
 80021e8:	2000001c 	.word	0x2000001c
adds r2, r0, r1
cmp r2, r3
bcc CopyDataInit
ldr r2, =_sbss
 80021ec:	2000001c 	.word	0x2000001c
FillZerobss:
movs r3, #0
str r3, [r2], #4

LoopFillZerobss:
ldr r3, = _ebss
 80021f0:	20000034 	.word	0x20000034

080021f4 <ADC1_IRQHandler>:
* @retval : None
*/
.section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
b Infinite_Loop
 80021f4:	f7ff bffe 	b.w	80021f4 <ADC1_IRQHandler>

080021f8 <__libc_init_array>:
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	4e0d      	ldr	r6, [pc, #52]	; (8002230 <__libc_init_array+0x38>)
 80021fc:	4d0d      	ldr	r5, [pc, #52]	; (8002234 <__libc_init_array+0x3c>)
 80021fe:	2400      	movs	r4, #0
 8002200:	1bad      	subs	r5, r5, r6
 8002202:	10ad      	asrs	r5, r5, #2
 8002204:	d005      	beq.n	8002212 <__libc_init_array+0x1a>
 8002206:	00a3      	lsls	r3, r4, #2
 8002208:	58f3      	ldr	r3, [r6, r3]
 800220a:	3401      	adds	r4, #1
 800220c:	4798      	blx	r3
 800220e:	42a5      	cmp	r5, r4
 8002210:	d1f9      	bne.n	8002206 <__libc_init_array+0xe>
 8002212:	f000 f83b 	bl	800228c <_init>
 8002216:	4e08      	ldr	r6, [pc, #32]	; (8002238 <__libc_init_array+0x40>)
 8002218:	4d08      	ldr	r5, [pc, #32]	; (800223c <__libc_init_array+0x44>)
 800221a:	2400      	movs	r4, #0
 800221c:	1bad      	subs	r5, r5, r6
 800221e:	10ad      	asrs	r5, r5, #2
 8002220:	d005      	beq.n	800222e <__libc_init_array+0x36>
 8002222:	00a3      	lsls	r3, r4, #2
 8002224:	58f3      	ldr	r3, [r6, r3]
 8002226:	3401      	adds	r4, #1
 8002228:	4798      	blx	r3
 800222a:	42a5      	cmp	r5, r4
 800222c:	d1f9      	bne.n	8002222 <__libc_init_array+0x2a>
 800222e:	bd70      	pop	{r4, r5, r6, pc}
	...
 8002240:	00006425 	.word	0x00006425

08002244 <CapLetterMap>:
 8002244:	6714fe00 47141d00 9c009d00 fa003f00     ...g...G.....?..
 8002254:	53000014 19009841 5a095a48 fc005f00     ...SA...HZ.Z._..
 8002264:	fc015f01 0414af00 18c05b00 00c95a81     ._.......[...Z..
 8002274:	05c00058                                X...

08002278 <NumberMap>:
 8002278:	42005f00 6700f500 af00ea00 4600bf00     ._.B...g.......F
 8002288:	ef00ff00                                ....

0800228c <_init>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

08002298 <_fini>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr
