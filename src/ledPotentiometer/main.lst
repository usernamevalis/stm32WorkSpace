
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800010c l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000020 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /var/folders/8f/zhq2rlhx6sl47y8ztwk74bcr0000gn/T//cc73HuRH.o
f108f85f l       *ABS*	00000000 BootRAM
08001a4e l       .text	00000000 LoopCopyDataInit
08001a46 l       .text	00000000 CopyDataInit
08001a66 l       .text	00000000 LoopFillZerobss
08001a60 l       .text	00000000 FillZerobss
08001a90 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32l1xx_adc.c
00000000 l    df *ABS*	00000000 stm32l1xx_gpio.c
00000000 l    df *ABS*	00000000 stm32l1xx_rcc.c
20000000 l     O .data	00000009 PLLMulTable
2000000c l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32l1xx_tim.c
00000000 l    df *ABS*	00000000 _udivsi3.o
08001754 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32l1xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /Users/nathanogates/Development/embedded/redux/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /Users/nathanogates/Development/embedded/redux/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
20000060 l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000060 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
08000d58 g     F .text	00000010 TIM_TimeBaseStructInit
08001a90  w    F .text	00000004 RTC_Alarm_IRQHandler
08001a90  w    F .text	00000004 EXTI2_IRQHandler
080008c8 g     F .text	0000000c RCC_HSICmd
08000fc0 g     F .text	00000018 TIM_ForcedOC2Config
08000900 g     F .text	0000000c RCC_PLLCmd
08000384 g     F .text	00000018 ADC_ContinuousModeCmd
08001a90  w    F .text	00000004 DebugMon_Handler
08000fa4 g     F .text	00000004 TIM_SetCompare2
08000af0 g     F .text	00000018 RCC_AHBPeriphResetCmd
080007c8 g     F .text	00000024 GPIO_PinAFConfig
08000be4 g     F .text	0000000c RCC_ClearITPendingBit
08000790 g     F .text	0000000c GPIO_ReadOutputDataBit
08001150 g     F .text	0000001c TIM_CCxCmd
080014c4 g     F .text	0000001c TIM_SetIC4Prescaler
08001a90  w    F .text	00000004 HardFault_Handler
08001a90  w    F .text	00000004 TIM10_IRQHandler
080003d4 g     F .text	0000001c ADC_DMACmd
08001a90  w    F .text	00000004 USB_HP_IRQHandler
08001a90  w    F .text	00000004 TIM6_IRQHandler
08001000 g     F .text	00000010 TIM_OC1PreloadConfig
08001a90  w    F .text	00000004 SysTick_Handler
08000924 g     F .text	0000000c RCC_MCOConfig
20000024 g     O .bss	0000000c TIM_TimeBaseStructure
08001a90  w    F .text	00000004 PVD_IRQHandler
08000588 g     F .text	0000001e ADC_GetITStatus
08001af4 g       .text	00000000 _sidata
08001a90  w    F .text	00000004 PendSV_Handler
08001a90  w    F .text	00000004 NMI_Handler
08001a90  w    F .text	00000004 EXTI3_IRQHandler
08001650 g     F .text	00000022 TIM_ETRClockMode2Config
08000b80 g     F .text	00000018 RCC_ITConfig
08000fb0 g     F .text	00000010 TIM_ForcedOC1Config
08001534 g     F .text	00000014 TIM_DMACmd
08001628 g     F .text	00000028 TIM_ETRClockMode1Config
08000b38 g     F .text	00000018 RCC_AHBPeriphClockLPModeCmd
080014ac g     F .text	00000018 TIM_SetIC3Prescaler
080010c0 g     F .text	00000010 TIM_ClearOC3Ref
08000198 g     F .text	00000018 ADC_CommonInit
08001af4 g       .text	00000000 _etext
080001e8 g     F .text	00000012 ADC_PowerDownCmd
20000020 g       .bss	00000000 _sbss
08000574 g     F .text	0000000c ADC_GetFlagStatus
08000930 g     F .text	00000014 RCC_SYSCLKConfig
08000844 g     F .text	0000003c RCC_WaitForHSEStartUp
08000520 g     F .text	0000001c ADC_InjectedDiscModeCmd
080001b8 g     F .text	00000018 ADC_Cmd
08000220 g     F .text	0000000c ADC_AnalogWatchdogSingleChannelConfig
0800039c g     F .text	00000014 ADC_DiscModeChannelCountConfig
0800090c g     F .text	0000000c RCC_ClockSecuritySystemCmd
08001a90  w    F .text	00000004 EXTI0_IRQHandler
08001a90  w    F .text	00000004 I2C2_EV_IRQHandler
08000bbc g     F .text	00000014 RCC_ClearFlag
08000e24 g     F .text	00000020 TIM_Cmd
08001038 g     F .text	00000018 TIM_OC4PreloadConfig
2000001c g     O .data	00000004 SystemCoreClock
080005a8 g     F .text	00000008 ADC_ClearITPendingBit
08000834 g     F .text	00000010 RCC_HSEConfig
08001750 g     F .text	00000088 .hidden __udivsi3
08001504 g     F .text	00000008 TIM_ClearFlag
080007bc g     F .text	0000000a GPIO_ToggleBits
08001524 g     F .text	00000008 TIM_ClearITPendingBit
08001a90  w    F .text	00000004 UsageFault_Handler
08000d88 g     F .text	00000004 TIM_GetCounter
08000ac0 g     F .text	00000018 RCC_APB2PeriphClockCmd
08001470 g     F .text	00000004 TIM_GetCapture3
08000694 g     F .text	000000ae GPIO_Init
080008f0 g     F .text	00000010 RCC_PLLConfig
20000000 g       .data	00000000 _sdata
08001a90  w    F .text	00000004 SPI1_IRQHandler
08000208 g     F .text	00000010 ADC_AnalogWatchdogCmd
08001468 g     F .text	00000004 TIM_GetCapture1
08001138 g     F .text	00000018 TIM_SelectOCREFClear
080007b8 g     F .text	00000004 GPIO_Write
080001fc g     F .text	0000000c ADC_DelaySelectionConfig
0800079c g     F .text	00000006 GPIO_ReadOutputData
08000ec0 g     F .text	00000040 TIM_OC3Init
080008d4 g     F .text	00000010 RCC_LSEConfig
08000a90 g     F .text	0000000c RCC_RTCCLKCmd
0800040c g     F .text	00000096 ADC_InjectedChannelConfig
08000bf0 g     F .text	00000100 TIM_DeInit
08000ad8 g     F .text	00000018 RCC_APB1PeriphClockCmd
08000bd0 g     F .text	00000014 RCC_GetITStatus
08001a90  w    F .text	00000004 USB_FS_WKUP_IRQHandler
08001a94 g     F .text	00000048 __libc_init_array
080014f8 g     F .text	0000000c TIM_GetFlagStatus
08000aa8 g     F .text	00000018 RCC_AHBPeriphClockCmd
08001a90  w    F .text	00000004 DMA1_Channel4_IRQHandler
08000250 g     F .text	00000102 ADC_RegularChannelConfig
08001078 g     F .text	00000010 TIM_OC3FastConfig
08001a90  w    F .text	00000004 ADC1_IRQHandler
080003cc g     F .text	00000006 ADC_GetConversionValue
08001548 g     F .text	00000020 TIM_SelectCCDMA
08001adc g     F .text	00000000 _init
08000e0c g     F .text	00000018 TIM_SetClockDivision
08000218 g     F .text	00000006 ADC_AnalogWatchdogThresholdsConfig
08001a90  w    F .text	00000004 USART3_IRQHandler
20000060 g       .bss	00000000 _ebss
08001a90  w    F .text	00000004 DMA1_Channel7_IRQHandler
08000e44 g     F .text	00000038 TIM_OC1Init
08001028 g     F .text	00000010 TIM_OC3PreloadConfig
08001a40  w    F .text	0000003c Reset_Handler
08000788 g     F .text	00000006 GPIO_ReadInputData
08000d84 g     F .text	00000004 TIM_SetAutoreload
08001a90  w    F .text	00000004 LCD_IRQHandler
08000b98 g     F .text	00000024 RCC_GetFlagStatus
080007a4 g     F .text	00000004 GPIO_SetBits
08001a90  w    F .text	00000004 TIM4_IRQHandler
080004d0 g     F .text	00000010 ADC_ExternalTrigInjectedConvConfig
08000944 g     F .text	00000010 RCC_GetSYSCLKSource
08000dd4 g     F .text	00000020 TIM_ARRPreloadConfig
080007ac g     F .text	0000000c GPIO_WriteBit
08000504 g     F .text	0000001c ADC_AutoInjectedConvCmd
20000030 g     O .bss	00000018 ADC_InitStructure
08001a90  w    F .text	00000004 I2C1_EV_IRQHandler
0800150c g     F .text	00000016 TIM_GetITStatus
08000998 g     F .text	000000b8 RCC_GetClocksFreq
08001a90  w    F .text	00000004 DMA1_Channel6_IRQHandler
08000f50 g     F .text	00000050 TIM_SelectOCxM
08000b50 g     F .text	00000018 RCC_APB2PeriphClockLPModeCmd
0800173c g     F .text	00000014 TIM_RemapConfig
08001a90  w    F .text	00000004 TIM3_IRQHandler
08001a90  w    F .text	00000004 RCC_IRQHandler
08000354 g     F .text	0000000c ADC_SoftwareStartConv
20000020 g       .bss	00000000 _bss
08001a90  w    F .text	00000004 DMA1_Channel1_IRQHandler
08001050 g     F .text	00000010 TIM_OC1FastConfig
08001a90 g       .text	00000004 Default_Handler
08001010 g     F .text	00000018 TIM_OC2PreloadConfig
08000a50 g     F .text	00000040 RCC_RTCCLKConfig
08001674 g     F .text	00000010 TIM_SelectInputTrigger
08001a90  w    F .text	00000004 EXTI15_10_IRQHandler
080014e0 g     F .text	00000014 TIM_ITConfig
08000e7c g     F .text	00000044 TIM_OC2Init
08000d68 g     F .text	00000006 TIM_PrescalerConfig
080001d0 g     F .text	00000018 ADC_BankSelection
080007a8 g     F .text	00000004 GPIO_ResetBits
08001120 g     F .text	00000018 TIM_OC4PolarityConfig
08001684 g     F .text	00000018 TIM_SelectOutputTrigger
08001a90  w    F .text	00000004 TIM7_IRQHandler
08000fa8 g     F .text	00000004 TIM_SetCompare3
08000f00 g     F .text	00000044 TIM_OC4Init
08000360 g     F .text	00000008 ADC_GetSoftwareStartConvStatus
080004f0 g     F .text	0000000c ADC_SoftwareStartInjectedConv
0800171c g     F .text	00000020 TIM_SelectHallSensor
20000048 g     O .bss	0000000c TIM_OCInitStructure
080017ec  w    F .text	00000002 .hidden __aeabi_ldiv0
08001a90  w    F .text	00000004 EXTI9_5_IRQHandler
0800088c g     F .text	00000018 RCC_MSIRangeConfig
08001a90  w    F .text	00000004 TIM9_IRQHandler
08001a90  w    F .text	00000004 TAMPER_STAMP_IRQHandler
08001a90  w    F .text	00000004 RTC_WKUP_IRQHandler
08000b68 g     F .text	00000018 RCC_APB1PeriphClockLPModeCmd
08001478 g     F .text	00000018 TIM_SetIC1Prescaler
08000fe8 g     F .text	00000018 TIM_ForcedOC4Config
08001a90  w    F .text	00000004 SPI2_IRQHandler
08001a90  w    F .text	00000004 MemManage_Handler
080008b0 g     F .text	00000018 RCC_AdjustHSICalibrationValue
080017f0 g     F .text	0000013c main
08001578 g     F .text	0000001c TIM_ITRxExternalClockConfig
08001108 g     F .text	00000018 TIM_OC3PolarityConfig
08001750 g     F .text	00000000 .hidden __aeabi_uidiv
08001a90  w    F .text	00000004 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
08001568 g     F .text	00000010 TIM_InternalClockConfig
080010e0 g     F .text	00000010 TIM_OC1PolarityConfig
08001060 g     F .text	00000018 TIM_OC2FastConfig
08000968 g     F .text	00000018 RCC_PCLK1Config
08000d80 g     F .text	00000004 TIM_SetCounter
08001a90  w    F .text	00000004 DMA1_Channel5_IRQHandler
08001a90  w    F .text	00000004 USB_LP_IRQHandler
08001a90  w    F .text	00000004 EXTI4_IRQHandler
20000020 g     O .bss	00000002 PrescalerValue
08000980 g     F .text	00000018 RCC_PCLK2Config
08000fac g     F .text	00000004 TIM_SetCompare4
0800146c g     F .text	00000004 TIM_GetCapture2
20000054 g     O .bss	00000008 GPIO_InitStructure
08000d8c g     F .text	00000006 TIM_GetPrescaler
080010b0 g     F .text	00000010 TIM_ClearOC2Ref
0800192c g     F .text	00000114 SystemInit
0800116c g     F .text	00000164 TIM_ICInit
080005b0 g     F .text	000000e4 GPIO_DeInit
08001ae8 g     F .text	00000000 _fini
080004a4 g     F .text	00000014 ADC_InjectedSequencerLengthConfig
080007ec g     F .text	00000048 RCC_DeInit
080012d0 g     F .text	00000010 TIM_ICStructInit
080012e0 g     F .text	00000188 TIM_PWMIConfig
08001a90  w    F .text	00000004 DMA1_Channel3_IRQHandler
080001b0 g     F .text	00000006 ADC_CommonStructInit
08001a90  w    F .text	00000004 COMP_IRQHandler
08000180 g     F .text	00000018 ADC_StructInit
08000558 g     F .text	0000001a ADC_ITConfig
00000000  w      *UND*	00000000 __preinit_array_end
080010a0 g     F .text	00000010 TIM_ClearOC1Ref
08001a90  w    F .text	00000004 WWDG_IRQHandler
08000918 g     F .text	0000000c RCC_LSEClockSecuritySystemCmd
08000b20 g     F .text	00000018 RCC_APB1PeriphResetCmd
08000580 g     F .text	00000006 ADC_ClearFlag
20000000 g       .data	00000000 _data
08001a90  w    F .text	00000004 TIM2_IRQHandler
08000db4 g     F .text	00000020 TIM_UpdateRequestConfig
08000fd8 g     F .text	00000010 TIM_ForcedOC3Config
08001594 g     F .text	00000094 TIM_TIxExternalClockConfig
08000744 g     F .text	00000014 GPIO_StructInit
0800010c g     F .text	00000024 ADC_DeInit
08000f44 g     F .text	0000000c TIM_OCStructInit
08000130 g     F .text	00000050 ADC_Init
20002000 g       *ABS*	00000000 _estack
08001a90  w    F .text	00000004 DAC_IRQHandler
080017d8 g     F .text	00000012 .hidden __aeabi_uidivmod
080004b8 g     F .text	00000016 ADC_SetInjectedOffset
08001a90  w    F .text	00000004 EXTI1_IRQHandler
080016b4 g     F .text	00000018 TIM_SelectMasterSlaveMode
0800022c g     F .text	00000024 ADC_TempSensorVrefintCmd
20000020 g       .data	00000000 _edata
08000a9c g     F .text	0000000c RCC_RTCResetCmd
08001474 g     F .text	00000004 TIM_GetCapture4
08000cf0 g     F .text	00000068 TIM_TimeBaseInit
0800053c g     F .text	0000001a ADC_GetInjectedConversionValue
08001a90  w    F .text	00000004 TIM11_IRQHandler
08001a90  w    F .text	00000004 USART2_IRQHandler
080004e0 g     F .text	00000010 ADC_ExternalTrigInjectedConvEdgeConfig
08000000 g     O .isr_vector	00000000 g_pfnVectors
080008a4 g     F .text	0000000c RCC_MSICmd
0800152c g     F .text	00000008 TIM_DMAConfig
080003b0 g     F .text	0000001c ADC_DiscModeCmd
08001a90  w    F .text	00000004 I2C2_ER_IRQHandler
08001a90  w    F .text	00000004 DMA1_Channel2_IRQHandler
080014f4 g     F .text	00000004 TIM_GenerateEvent
08000368 g     F .text	0000001c ADC_EOCOnEachRegularChannelCmd
00000000  w      *UND*	00000000 __init_array_start
080017ec  w    F .text	00000002 .hidden __aeabi_idiv0
08001a90  w    F .text	00000004 FLASH_IRQHandler
08000758 g     F .text	00000024 GPIO_PinLockConfig
08001a90  w    F .text	00000004 BusFault_Handler
08001a90  w    F .text	00000004 USART1_IRQHandler
080008e4 g     F .text	0000000c RCC_LSICmd
08001490 g     F .text	0000001c TIM_SetIC2Prescaler
080016cc g     F .text	00000016 TIM_ETRConfig
08000b08 g     F .text	00000018 RCC_APB2PeriphResetCmd
0800169c g     F .text	00000018 TIM_SelectSlaveMode
08001a90  w    F .text	00000004 I2C1_ER_IRQHandler
2000005c g     O .bss	00000004 ADC_CommonInitStructure
080010d0 g     F .text	00000010 TIM_ClearOC4Ref
08000df4 g     F .text	00000018 TIM_SelectOnePulseMode
080003f0 g     F .text	0000001c ADC_DMARequestAfterLastTransferCmd
080016e4 g     F .text	00000038 TIM_EncoderInterfaceConfig
080004fc g     F .text	00000008 ADC_GetSoftwareStartInjectedConvCmdStatus
08000880 g     F .text	0000000c RCC_AdjustMSICalibrationValue
00000000  w      *UND*	00000000 __preinit_array_start
08000fa0 g     F .text	00000004 TIM_SetCompare1
080010f0 g     F .text	00000018 TIM_OC2PolarityConfig
08000d94 g     F .text	00000020 TIM_UpdateDisableConfig
0800077c g     F .text	0000000c GPIO_ReadInputDataBit
08001088 g     F .text	00000018 TIM_OC4FastConfig
08000954 g     F .text	00000014 RCC_HCLKConfig
08000d70 g     F .text	00000010 TIM_CounterModeConfig



Disassembly of section .text:

0800010c <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 800010c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 800010e:	4b07      	ldr	r3, [pc, #28]	; (800012c <ADC_DeInit+0x20>)
 8000110:	4298      	cmp	r0, r3
 8000112:	d000      	beq.n	8000116 <ADC_DeInit+0xa>
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
  }
}
 8000114:	bd08      	pop	{r3, pc}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000116:	2080      	movs	r0, #128	; 0x80
 8000118:	0080      	lsls	r0, r0, #2
 800011a:	2101      	movs	r1, #1
 800011c:	f000 fcf4 	bl	8000b08 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8000120:	2080      	movs	r0, #128	; 0x80
 8000122:	0080      	lsls	r0, r0, #2
 8000124:	2100      	movs	r1, #0
 8000126:	f000 fcef 	bl	8000b08 <RCC_APB2PeriphResetCmd>
 800012a:	e7f3      	b.n	8000114 <ADC_DeInit+0x8>
 800012c:	40012400 	.word	0x40012400

08000130 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000130:	6842      	ldr	r2, [r0, #4]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000132:	4b10      	ldr	r3, [pc, #64]	; (8000174 <ADC_Init+0x44>)
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000134:	b510      	push	{r4, lr}
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000136:	4013      	ands	r3, r2
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000138:	680a      	ldr	r2, [r1, #0]
 800013a:	4313      	orrs	r3, r2
 800013c:	790a      	ldrb	r2, [r1, #4]
 800013e:	0212      	lsls	r2, r2, #8
 8000140:	4313      	orrs	r3, r2
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000142:	6043      	str	r3, [r0, #4]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000144:	68ca      	ldr	r2, [r1, #12]
 8000146:	690b      	ldr	r3, [r1, #16]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000148:	6884      	ldr	r4, [r0, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 800014a:	431a      	orrs	r2, r3
 800014c:	688b      	ldr	r3, [r1, #8]
 800014e:	431a      	orrs	r2, r3
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000150:	4b09      	ldr	r3, [pc, #36]	; (8000178 <ADC_Init+0x48>)
 8000152:	4023      	ands	r3, r4
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000154:	4313      	orrs	r3, r2
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000156:	794a      	ldrb	r2, [r1, #5]
 8000158:	0052      	lsls	r2, r2, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 800015a:	4313      	orrs	r3, r2
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800015c:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800015e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000160:	4b06      	ldr	r3, [pc, #24]	; (800017c <ADC_Init+0x4c>)
 8000162:	4013      	ands	r3, r2
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000164:	7d0a      	ldrb	r2, [r1, #20]
 8000166:	3a01      	subs	r2, #1
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000168:	b2d2      	uxtb	r2, r2
 800016a:	0512      	lsls	r2, r2, #20
 800016c:	4313      	orrs	r3, r2
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800016e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8000170:	bd10      	pop	{r4, pc}
 8000172:	46c0      	nop			; (mov r8, r8)
 8000174:	fcfffeff 	.word	0xfcfffeff
 8000178:	c0fff7fd 	.word	0xc0fff7fd
 800017c:	fe0fffff 	.word	0xfe0fffff

08000180 <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000180:	2300      	movs	r3, #0

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000182:	22c0      	movs	r2, #192	; 0xc0
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000184:	6003      	str	r3, [r0, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000186:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000188:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800018a:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 800018c:	0492      	lsls	r2, r2, #18

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800018e:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000190:	2301      	movs	r3, #1

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000192:	60c2      	str	r2, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000194:	7503      	strb	r3, [r0, #20]
}
 8000196:	4770      	bx	lr

08000198 <ADC_CommonInit>:
  /* Check the parameters */
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));

  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg = ADC->CCR;
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <ADC_CommonInit+0x10>)

  /* Clear ADCPRE bit */ 
  tmpreg &= CR_CLEAR_MASK;
 800019a:	4a04      	ldr	r2, [pc, #16]	; (80001ac <ADC_CommonInit+0x14>)
  /* Check the parameters */
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));

  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg = ADC->CCR;
 800019c:	6859      	ldr	r1, [r3, #4]

  /* Clear ADCPRE bit */ 
  tmpreg &= CR_CLEAR_MASK;
 800019e:	400a      	ands	r2, r1
  
  /* Configure ADCx: ADC prescaler according to ADC_Prescaler */                
  tmpreg |= (uint32_t)(ADC_CommonInitStruct->ADC_Prescaler);        
 80001a0:	6801      	ldr	r1, [r0, #0]
 80001a2:	430a      	orrs	r2, r1
                
  /* Write to ADC CCR */
  ADC->CCR = tmpreg;
 80001a4:	605a      	str	r2, [r3, #4]
}
 80001a6:	4770      	bx	lr
 80001a8:	40012700 	.word	0x40012700
 80001ac:	fffcffff 	.word	0xfffcffff

080001b0 <ADC_CommonStructInit>:
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)                      
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	6003      	str	r3, [r0, #0]
}
 80001b4:	4770      	bx	lr
 80001b6:	46c0      	nop			; (mov r8, r8)

080001b8 <ADC_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80001b8:	2900      	cmp	r1, #0
 80001ba:	d104      	bne.n	80001c6 <ADC_Cmd+0xe>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80001bc:	6883      	ldr	r3, [r0, #8]
 80001be:	2201      	movs	r2, #1
 80001c0:	4393      	bics	r3, r2
 80001c2:	6083      	str	r3, [r0, #8]
  }
}
 80001c4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80001c6:	6882      	ldr	r2, [r0, #8]
 80001c8:	2301      	movs	r3, #1
 80001ca:	4313      	orrs	r3, r2
 80001cc:	6083      	str	r3, [r0, #8]
 80001ce:	e7f9      	b.n	80001c4 <ADC_Cmd+0xc>

080001d0 <ADC_BankSelection>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_BANK(ADC_Bank));

  if (ADC_Bank != ADC_Bank_A)
 80001d0:	2900      	cmp	r1, #0
 80001d2:	d104      	bne.n	80001de <ADC_BankSelection+0xe>
    ADCx->CR2 |= (uint32_t)ADC_CR2_CFG;
  }
  else
  {
    /* Reset the ADC_CFG bit to select the ADC Bank A channels */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CFG);
 80001d4:	6883      	ldr	r3, [r0, #8]
 80001d6:	2204      	movs	r2, #4
 80001d8:	4393      	bics	r3, r2
 80001da:	6083      	str	r3, [r0, #8]
  }
}
 80001dc:	4770      	bx	lr
  assert_param(IS_ADC_BANK(ADC_Bank));

  if (ADC_Bank != ADC_Bank_A)
  {
    /* Set the ADC_CFG bit to select the ADC Bank B channels */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CFG;
 80001de:	6882      	ldr	r2, [r0, #8]
 80001e0:	2304      	movs	r3, #4
 80001e2:	4313      	orrs	r3, r2
 80001e4:	6083      	str	r3, [r0, #8]
 80001e6:	e7f9      	b.n	80001dc <ADC_BankSelection+0xc>

080001e8 <ADC_PowerDownCmd>:
  assert_param(IS_ADC_POWER_DOWN(ADC_PowerDown));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC power-down during Delay and/or Idle phase */
    ADCx->CR1 |= ADC_PowerDown;
 80001e8:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_POWER_DOWN(ADC_PowerDown));
  
  if (NewState != DISABLE)
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d102      	bne.n	80001f4 <ADC_PowerDownCmd+0xc>
    ADCx->CR1 |= ADC_PowerDown;
  }
  else
  {
    /* Disable The ADC power-down during Delay and/or Idle phase */
    ADCx->CR1 &= (uint32_t)~ADC_PowerDown;
 80001ee:	438b      	bics	r3, r1
 80001f0:	6043      	str	r3, [r0, #4]
  }
}
 80001f2:	4770      	bx	lr
  assert_param(IS_ADC_POWER_DOWN(ADC_PowerDown));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC power-down during Delay and/or Idle phase */
    ADCx->CR1 |= ADC_PowerDown;
 80001f4:	4319      	orrs	r1, r3
 80001f6:	6041      	str	r1, [r0, #4]
 80001f8:	e7fb      	b.n	80001f2 <ADC_PowerDownCmd+0xa>
 80001fa:	46c0      	nop			; (mov r8, r8)

080001fc <ADC_DelaySelectionConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_DELAY_LENGTH(ADC_DelayLength));

  /* Get the old register value */    
  tmpreg = ADCx->CR2;
 80001fc:	6883      	ldr	r3, [r0, #8]
  /* Clear the old delay length */
  tmpreg &= CR2_DELS_RESET;
 80001fe:	22f0      	movs	r2, #240	; 0xf0
 8000200:	4393      	bics	r3, r2
  /* Set the delay length */
  tmpreg |= ADC_DelayLength;
 8000202:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000204:	6081      	str	r1, [r0, #8]

}
 8000206:	4770      	bx	lr

08000208 <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000208:	6842      	ldr	r2, [r0, #4]
  /* Clear AWDEN, JAWDEN and AWDSGL bits */   
  tmpreg &= CR1_AWDMODE_RESET;
 800020a:	4b02      	ldr	r3, [pc, #8]	; (8000214 <ADC_AnalogWatchdogCmd+0xc>)
 800020c:	4013      	ands	r3, r2
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 800020e:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000210:	6041      	str	r1, [r0, #4]
}
 8000212:	4770      	bx	lr
 8000214:	ff3ffdff 	.word	0xff3ffdff

08000218 <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));

  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000218:	6281      	str	r1, [r0, #40]	; 0x28
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800021a:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000220:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8000222:	221f      	movs	r2, #31
 8000224:	4393      	bics	r3, r2
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000226:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000228:	6041      	str	r1, [r0, #4]
}
 800022a:	4770      	bx	lr

0800022c <ADC_TempSensorVrefintCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <ADC_TempSensorVrefintCmd+0x1c>)
 800022e:	6859      	ldr	r1, [r3, #4]
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000230:	2800      	cmp	r0, #0
 8000232:	d103      	bne.n	800023c <ADC_TempSensorVrefintCmd+0x10>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <ADC_TempSensorVrefintCmd+0x20>)
 8000236:	400a      	ands	r2, r1
 8000238:	605a      	str	r2, [r3, #4]
  }
}
 800023a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800023c:	2280      	movs	r2, #128	; 0x80
 800023e:	0412      	lsls	r2, r2, #16
 8000240:	430a      	orrs	r2, r1
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	e7f9      	b.n	800023a <ADC_TempSensorVrefintCmd+0xe>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	40012700 	.word	0x40012700
 800024c:	ff7fffff 	.word	0xff7fffff

08000250 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000250:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8000252:	291d      	cmp	r1, #29
 8000254:	d920      	bls.n	8000298 <ADC_RegularChannelConfig+0x48>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 8000256:	1c0d      	adds	r5, r1, #0
 8000258:	3d1e      	subs	r5, #30
 800025a:	006c      	lsls	r4, r5, #1
 800025c:	1964      	adds	r4, r4, r5

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 800025e:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 8000260:	2507      	movs	r5, #7
 8000262:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8000264:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000266:	43ae      	bics	r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8000268:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800026a:	1c33      	adds	r3, r6, #0
 800026c:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 800026e:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000270:	2a06      	cmp	r2, #6
 8000272:	d922      	bls.n	80002ba <ADC_RegularChannelConfig+0x6a>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000274:	2a0c      	cmp	r2, #12
 8000276:	d93c      	bls.n	80002f2 <ADC_RegularChannelConfig+0xa2>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 8000278:	2a12      	cmp	r2, #18
 800027a:	d95e      	bls.n	800033a <ADC_RegularChannelConfig+0xea>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 800027c:	2a18      	cmp	r2, #24
 800027e:	d950      	bls.n	8000322 <ADC_RegularChannelConfig+0xd2>
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000280:	3a19      	subs	r2, #25
 8000282:	0094      	lsls	r4, r2, #2
 8000284:	18a2      	adds	r2, r4, r2
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000286:	6b03      	ldr	r3, [r0, #48]	; 0x30
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000288:	241f      	movs	r4, #31
 800028a:	4094      	lsls	r4, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800028c:	4091      	lsls	r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800028e:	43a3      	bics	r3, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8000290:	1c0a      	adds	r2, r1, #0
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000292:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000294:	6302      	str	r2, [r0, #48]	; 0x30
 8000296:	e037      	b.n	8000308 <ADC_RegularChannelConfig+0xb8>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000298:	2913      	cmp	r1, #19
 800029a:	d91a      	bls.n	80002d2 <ADC_RegularChannelConfig+0x82>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 800029c:	1c0d      	adds	r5, r1, #0
 800029e:	3d14      	subs	r5, #20
 80002a0:	006c      	lsls	r4, r5, #1
 80002a2:	1964      	adds	r4, r4, r5
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80002a4:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80002a6:	2507      	movs	r5, #7
 80002a8:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 80002aa:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80002ac:	43ae      	bics	r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 80002ae:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80002b0:	1c33      	adds	r3, r6, #0
 80002b2:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80002b4:	60c3      	str	r3, [r0, #12]
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80002b6:	2a06      	cmp	r2, #6
 80002b8:	d8dc      	bhi.n	8000274 <ADC_RegularChannelConfig+0x24>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80002ba:	3a01      	subs	r2, #1
 80002bc:	0094      	lsls	r4, r2, #2
 80002be:	18a2      	adds	r2, r4, r2
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80002c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80002c2:	241f      	movs	r4, #31
 80002c4:	4094      	lsls	r4, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80002c6:	4091      	lsls	r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002c8:	43a3      	bics	r3, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80002ca:	1c0a      	adds	r2, r1, #0
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80002cc:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 80002ce:	6402      	str	r2, [r0, #64]	; 0x40
 80002d0:	e01a      	b.n	8000308 <ADC_RegularChannelConfig+0xb8>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 80002d2:	2909      	cmp	r1, #9
 80002d4:	d919      	bls.n	800030a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 80002d6:	1c0d      	adds	r5, r1, #0
 80002d8:	3d0a      	subs	r5, #10
 80002da:	006c      	lsls	r4, r5, #1
 80002dc:	1964      	adds	r4, r4, r5
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80002de:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 80002e0:	2507      	movs	r5, #7
 80002e2:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80002e4:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80002e6:	43ae      	bics	r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80002e8:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80002ea:	1c33      	adds	r3, r6, #0
 80002ec:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80002ee:	6103      	str	r3, [r0, #16]
 80002f0:	e7be      	b.n	8000270 <ADC_RegularChannelConfig+0x20>
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 80002f2:	3a07      	subs	r2, #7
 80002f4:	0094      	lsls	r4, r2, #2
 80002f6:	18a2      	adds	r2, r4, r2
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 80002f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 80002fa:	241f      	movs	r4, #31
 80002fc:	4094      	lsls	r4, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80002fe:	4091      	lsls	r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000300:	43a3      	bics	r3, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000302:	1c0a      	adds	r2, r1, #0
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000304:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000306:	63c2      	str	r2, [r0, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000308:	bd70      	pop	{r4, r5, r6, pc}
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 800030a:	004c      	lsls	r4, r1, #1
 800030c:	1864      	adds	r4, r4, r1
    ADCx->SMPR2 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 800030e:	6945      	ldr	r5, [r0, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000310:	2607      	movs	r6, #7
 8000312:	40a6      	lsls	r6, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000314:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000316:	43b5      	bics	r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000318:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800031a:	1c2b      	adds	r3, r5, #0
 800031c:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 800031e:	6143      	str	r3, [r0, #20]
 8000320:	e7a6      	b.n	8000270 <ADC_RegularChannelConfig+0x20>
  else if (Rank < 25)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000322:	3a13      	subs	r2, #19
 8000324:	0094      	lsls	r4, r2, #2
 8000326:	18a2      	adds	r2, r4, r2
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000328:	6b43      	ldr	r3, [r0, #52]	; 0x34
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 800032a:	241f      	movs	r4, #31
 800032c:	4094      	lsls	r4, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 800032e:	4091      	lsls	r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000330:	43a3      	bics	r3, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000332:	1c0a      	adds	r2, r1, #0
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000334:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000336:	6342      	str	r2, [r0, #52]	; 0x34
 8000338:	e7e6      	b.n	8000308 <ADC_RegularChannelConfig+0xb8>
  else if (Rank < 19)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800033a:	3a0d      	subs	r2, #13
 800033c:	0094      	lsls	r4, r2, #2
 800033e:	18a2      	adds	r2, r4, r2
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000340:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000342:	241f      	movs	r4, #31
 8000344:	4094      	lsls	r4, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000346:	4091      	lsls	r1, r2
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000348:	43a3      	bics	r3, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800034a:	1c0a      	adds	r2, r1, #0
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800034c:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800034e:	6382      	str	r2, [r0, #56]	; 0x38
 8000350:	e7da      	b.n	8000308 <ADC_RegularChannelConfig+0xb8>
 8000352:	46c0      	nop			; (mov r8, r8)

08000354 <ADC_SoftwareStartConv>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000354:	6882      	ldr	r2, [r0, #8]
 8000356:	2380      	movs	r3, #128	; 0x80
 8000358:	05db      	lsls	r3, r3, #23
 800035a:	4313      	orrs	r3, r2
 800035c:	6083      	str	r3, [r0, #8]
}
 800035e:	4770      	bx	lr

08000360 <ADC_GetSoftwareStartConvStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 8000360:	6880      	ldr	r0, [r0, #8]
 8000362:	0040      	lsls	r0, r0, #1
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
 8000364:	0fc0      	lsrs	r0, r0, #31
}
 8000366:	4770      	bx	lr

08000368 <ADC_EOCOnEachRegularChannelCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= ADC_CR2_EOCS;
 8000368:	6882      	ldr	r2, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800036a:	2900      	cmp	r1, #0
 800036c:	d103      	bne.n	8000376 <ADC_EOCOnEachRegularChannelCmd+0xe>
    ADCx->CR2 |= ADC_CR2_EOCS;
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_EOCS;
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <ADC_EOCOnEachRegularChannelCmd+0x18>)
 8000370:	4013      	ands	r3, r2
 8000372:	6083      	str	r3, [r0, #8]
  }
}
 8000374:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= ADC_CR2_EOCS;
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	00db      	lsls	r3, r3, #3
 800037a:	4313      	orrs	r3, r2
 800037c:	6083      	str	r3, [r0, #8]
 800037e:	e7f9      	b.n	8000374 <ADC_EOCOnEachRegularChannelCmd+0xc>
 8000380:	fffffbff 	.word	0xfffffbff

08000384 <ADC_ContinuousModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000384:	2900      	cmp	r1, #0
 8000386:	d104      	bne.n	8000392 <ADC_ContinuousModeCmd+0xe>
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8000388:	6883      	ldr	r3, [r0, #8]
 800038a:	2202      	movs	r2, #2
 800038c:	4393      	bics	r3, r2
 800038e:	6083      	str	r3, [r0, #8]
  }
}
 8000390:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000392:	6882      	ldr	r2, [r0, #8]
 8000394:	2302      	movs	r3, #2
 8000396:	4313      	orrs	r3, r2
 8000398:	6083      	str	r3, [r0, #8]
 800039a:	e7f9      	b.n	8000390 <ADC_ContinuousModeCmd+0xc>

0800039c <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 800039c:	6842      	ldr	r2, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800039e:	4b03      	ldr	r3, [pc, #12]	; (80003ac <ADC_DiscModeChannelCountConfig+0x10>)
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80003a0:	3901      	subs	r1, #1
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 80003a2:	4013      	ands	r3, r2
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 80003a4:	0349      	lsls	r1, r1, #13
 80003a6:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80003a8:	6041      	str	r1, [r0, #4]
}
 80003aa:	4770      	bx	lr
 80003ac:	ffff1fff 	.word	0xffff1fff

080003b0 <ADC_DiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80003b0:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003b2:	2900      	cmp	r1, #0
 80003b4:	d103      	bne.n	80003be <ADC_DiscModeCmd+0xe>
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <ADC_DiscModeCmd+0x18>)
 80003b8:	4013      	ands	r3, r2
 80003ba:	6043      	str	r3, [r0, #4]
  }
}
 80003bc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80003be:	2380      	movs	r3, #128	; 0x80
 80003c0:	011b      	lsls	r3, r3, #4
 80003c2:	4313      	orrs	r3, r2
 80003c4:	6043      	str	r3, [r0, #4]
 80003c6:	e7f9      	b.n	80003bc <ADC_DiscModeCmd+0xc>
 80003c8:	fffff7ff 	.word	0xfffff7ff

080003cc <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80003cc:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80003ce:	b280      	uxth	r0, r0
}
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			; (mov r8, r8)

080003d4 <ADC_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80003d4:	6882      	ldr	r2, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003d6:	2900      	cmp	r1, #0
 80003d8:	d103      	bne.n	80003e2 <ADC_DMACmd+0xe>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <ADC_DMACmd+0x18>)
 80003dc:	4013      	ands	r3, r2
 80003de:	6083      	str	r3, [r0, #8]
  }
}
 80003e0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80003e2:	2380      	movs	r3, #128	; 0x80
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4313      	orrs	r3, r2
 80003e8:	6083      	str	r3, [r0, #8]
 80003ea:	e7f9      	b.n	80003e0 <ADC_DMACmd+0xc>
 80003ec:	fffffeff 	.word	0xfffffeff

080003f0 <ADC_DMARequestAfterLastTransferCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= ADC_CR2_DDS;
 80003f0:	6882      	ldr	r2, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d103      	bne.n	80003fe <ADC_DMARequestAfterLastTransferCmd+0xe>
    ADCx->CR2 |= ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_DDS;
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <ADC_DMARequestAfterLastTransferCmd+0x18>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	6083      	str	r3, [r0, #8]
  }
}
 80003fc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= ADC_CR2_DDS;
 80003fe:	2380      	movs	r3, #128	; 0x80
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	4313      	orrs	r3, r2
 8000404:	6083      	str	r3, [r0, #8]
 8000406:	e7f9      	b.n	80003fc <ADC_DMARequestAfterLastTransferCmd+0xc>
 8000408:	fffffdff 	.word	0xfffffdff

0800040c <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800040c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 800040e:	291d      	cmp	r1, #29
 8000410:	d82b      	bhi.n	800046a <ADC_InjectedChannelConfig+0x5e>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000412:	2913      	cmp	r1, #19
 8000414:	d81b      	bhi.n	800044e <ADC_InjectedChannelConfig+0x42>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
  }  
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 8000416:	2909      	cmp	r1, #9
 8000418:	d835      	bhi.n	8000486 <ADC_InjectedChannelConfig+0x7a>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 800041a:	004c      	lsls	r4, r1, #1
 800041c:	1864      	adds	r4, r4, r1
    ADCx->SMPR2 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 800041e:	6945      	ldr	r5, [r0, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000420:	2607      	movs	r6, #7
 8000422:	40a6      	lsls	r6, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000424:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000426:	43b5      	bics	r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000428:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800042a:	1c2b      	adds	r3, r5, #0
 800042c:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 800042e:	6143      	str	r3, [r0, #20]
  }
  
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000430:	6c44      	ldr	r4, [r0, #68]	; 0x44
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4- (JL+1))) */ 
  tmpreg2 = (uint32_t)(JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1))));
 8000432:	3202      	adds	r2, #2
  
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8000434:	02a3      	lsls	r3, r4, #10
 8000436:	0f9b      	lsrs	r3, r3, #30
  /* Calculate the mask to clear: ((Rank-1)+(4- (JL+1))) */ 
  tmpreg2 = (uint32_t)(JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1))));
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	009a      	lsls	r2, r3, #2
 800043e:	18d3      	adds	r3, r2, r3
 8000440:	221f      	movs	r2, #31
 8000442:	409a      	lsls	r2, r3
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000444:	4394      	bics	r4, r2
  /* Calculate the mask to set: ((Rank-1)+(4- (JL+1))) */ 
  tmpreg2 = (uint32_t)(((uint32_t)(ADC_Channel)) << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1))));
 8000446:	4099      	lsls	r1, r3
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000448:	430c      	orrs	r4, r1
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800044a:	6444      	str	r4, [r0, #68]	; 0x44
}
 800044c:	bd70      	pop	{r4, r5, r6, pc}
  else if (ADC_Channel > ADC_Channel_19)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 800044e:	1c0d      	adds	r5, r1, #0
 8000450:	3d14      	subs	r5, #20
 8000452:	006c      	lsls	r4, r5, #1
 8000454:	1964      	adds	r4, r4, r5
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000456:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8000458:	2507      	movs	r5, #7
 800045a:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800045c:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800045e:	43ae      	bics	r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000460:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000462:	1c33      	adds	r3, r6, #0
 8000464:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000466:	60c3      	str	r3, [r0, #12]
 8000468:	e7e2      	b.n	8000430 <ADC_InjectedChannelConfig+0x24>
  if (ADC_Channel > ADC_Channel_29)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 800046a:	1c0d      	adds	r5, r1, #0
 800046c:	3d1e      	subs	r5, #30
 800046e:	006c      	lsls	r4, r5, #1
 8000470:	1964      	adds	r4, r4, r5
  
  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000472:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 8000474:	2507      	movs	r5, #7
 8000476:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8000478:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800047a:	43ae      	bics	r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 800047c:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800047e:	1c33      	adds	r3, r6, #0
 8000480:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000482:	65c3      	str	r3, [r0, #92]	; 0x5c
 8000484:	e7d4      	b.n	8000430 <ADC_InjectedChannelConfig+0x24>
  else if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000486:	1c0d      	adds	r5, r1, #0
 8000488:	3d0a      	subs	r5, #10
 800048a:	006c      	lsls	r4, r5, #1
 800048c:	1964      	adds	r4, r4, r5
  }  
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800048e:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000490:	2507      	movs	r5, #7
 8000492:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000494:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000496:	43ae      	bics	r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000498:	1c1c      	adds	r4, r3, #0
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800049a:	1c33      	adds	r3, r6, #0
 800049c:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800049e:	6103      	str	r3, [r0, #16]
 80004a0:	e7c6      	b.n	8000430 <ADC_InjectedChannelConfig+0x24>
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80004a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 80004a6:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <ADC_InjectedSequencerLengthConfig+0x10>)
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 80004a8:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 80004aa:	4013      	ands	r3, r2
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80004ac:	0509      	lsls	r1, r1, #20
 80004ae:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80004b0:	6441      	str	r1, [r0, #68]	; 0x44
}
 80004b2:	4770      	bx	lr
 80004b4:	ffcfffff 	.word	0xffcfffff

080004b8 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *         This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80004b8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
 80004be:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	18c9      	adds	r1, r1, r3
 80004c4:	9101      	str	r1, [sp, #4]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80004c6:	9b01      	ldr	r3, [sp, #4]
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	b002      	add	sp, #8
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));

  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80004d0:	6882      	ldr	r2, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 80004d2:	4b02      	ldr	r3, [pc, #8]	; (80004dc <ADC_ExternalTrigInjectedConvConfig+0xc>)
 80004d4:	4013      	ands	r3, r2
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80004d6:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80004d8:	6081      	str	r1, [r0, #8]
}
 80004da:	4770      	bx	lr
 80004dc:	fff0ffff 	.word	0xfff0ffff

080004e0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));

  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80004e0:	6882      	ldr	r2, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80004e2:	4b02      	ldr	r3, [pc, #8]	; (80004ec <ADC_ExternalTrigInjectedConvEdgeConfig+0xc>)
 80004e4:	4013      	ands	r3, r2
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 80004e6:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80004e8:	6081      	str	r1, [r0, #8]
}
 80004ea:	4770      	bx	lr
 80004ec:	ffcfffff 	.word	0xffcfffff

080004f0 <ADC_SoftwareStartInjectedConv>:
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80004f0:	6882      	ldr	r2, [r0, #8]
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	03db      	lsls	r3, r3, #15
 80004f6:	4313      	orrs	r3, r2
 80004f8:	6083      	str	r3, [r0, #8]
}
 80004fa:	4770      	bx	lr

080004fc <ADC_GetSoftwareStartInjectedConvCmdStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80004fc:	6880      	ldr	r0, [r0, #8]
 80004fe:	0240      	lsls	r0, r0, #9
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8000500:	0fc0      	lsrs	r0, r0, #31
}
 8000502:	4770      	bx	lr

08000504 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000504:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000506:	2900      	cmp	r1, #0
 8000508:	d103      	bne.n	8000512 <ADC_AutoInjectedConvCmd+0xe>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 800050a:	4b04      	ldr	r3, [pc, #16]	; (800051c <ADC_AutoInjectedConvCmd+0x18>)
 800050c:	4013      	ands	r3, r2
 800050e:	6043      	str	r3, [r0, #4]
  }
}
 8000510:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	4313      	orrs	r3, r2
 8000518:	6043      	str	r3, [r0, #4]
 800051a:	e7f9      	b.n	8000510 <ADC_AutoInjectedConvCmd+0xc>
 800051c:	fffffbff 	.word	0xfffffbff

08000520 <ADC_InjectedDiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8000520:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000522:	2900      	cmp	r1, #0
 8000524:	d103      	bne.n	800052e <ADC_InjectedDiscModeCmd+0xe>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <ADC_InjectedDiscModeCmd+0x18>)
 8000528:	4013      	ands	r3, r2
 800052a:	6043      	str	r3, [r0, #4]
  }
}
 800052c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	015b      	lsls	r3, r3, #5
 8000532:	4313      	orrs	r3, r2
 8000534:	6043      	str	r3, [r0, #4]
 8000536:	e7f9      	b.n	800052c <ADC_InjectedDiscModeCmd+0xc>
 8000538:	ffffefff 	.word	0xffffefff

0800053c <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800053c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000542:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8000544:	9b01      	ldr	r3, [sp, #4]
 8000546:	3330      	adds	r3, #48	; 0x30
 8000548:	1859      	adds	r1, r3, r1
 800054a:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	6818      	ldr	r0, [r3, #0]
 8000550:	b280      	uxth	r0, r0
}
 8000552:	b002      	add	sp, #8
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <ADC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    
 8000558:	b2c9      	uxtb	r1, r1
 800055a:	2301      	movs	r3, #1
 800055c:	408b      	lsls	r3, r1
 800055e:	1c19      	adds	r1, r3, #0

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000560:	6843      	ldr	r3, [r0, #4]

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
 8000562:	2a00      	cmp	r2, #0
 8000564:	d102      	bne.n	800056c <ADC_ITConfig+0x14>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000566:	438b      	bics	r3, r1
 8000568:	6043      	str	r3, [r0, #4]
  }
}
 800056a:	4770      	bx	lr
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800056c:	4319      	orrs	r1, r3
 800056e:	6041      	str	r1, [r0, #4]
 8000570:	e7fb      	b.n	800056a <ADC_ITConfig+0x12>
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000574:	6800      	ldr	r0, [r0, #0]
 8000576:	4008      	ands	r0, r1
 8000578:	1e43      	subs	r3, r0, #1
 800057a:	4198      	sbcs	r0, r3
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800057c:	b2c0      	uxtb	r0, r0
}
 800057e:	4770      	bx	lr

08000580 <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000580:	43c9      	mvns	r1, r1
 8000582:	6001      	str	r1, [r0, #0]
}
 8000584:	4770      	bx	lr
 8000586:	46c0      	nop			; (mov r8, r8)

08000588 <ADC_GetITStatus>:
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt
  *     @arg ADC_IT_OVR: Overrun interrupt
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000588:	b510      	push	{r4, lr}

  /* Get the ADC IT index */
  itmask = (uint32_t)((uint32_t)ADC_IT >> 8);

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)); 
 800058a:	6844      	ldr	r4, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->SR & (uint32_t)itmask) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800058c:	6802      	ldr	r2, [r0, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = (uint32_t)((uint32_t)ADC_IT >> 8);
 800058e:	0a0b      	lsrs	r3, r1, #8
    bitstatus = SET;
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8000590:	2000      	movs	r0, #0

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)); 

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->SR & (uint32_t)itmask) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000592:	421a      	tst	r2, r3
 8000594:	d006      	beq.n	80005a4 <ADC_GetITStatus+0x1c>

  /* Get the ADC IT index */
  itmask = (uint32_t)((uint32_t)ADC_IT >> 8);

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)); 
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	2001      	movs	r0, #1
 800059a:	4088      	lsls	r0, r1
 800059c:	4004      	ands	r4, r0

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->SR & (uint32_t)itmask) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800059e:	1e60      	subs	r0, r4, #1
 80005a0:	4184      	sbcs	r4, r0
  {                                                         
    /* ADC_IT is set */
    bitstatus = SET;
 80005a2:	b2e0      	uxtb	r0, r4
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 80005a4:	bd10      	pop	{r4, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)

080005a8 <ADC_ClearITPendingBit>:

  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);

  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80005a8:	0a09      	lsrs	r1, r1, #8
 80005aa:	43c9      	mvns	r1, r1
 80005ac:	6001      	str	r1, [r0, #0]
}
 80005ae:	4770      	bx	lr

080005b0 <GPIO_DeInit>:
 80005b0:	b508      	push	{r3, lr}
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <GPIO_DeInit+0xc4>)
 80005b4:	4298      	cmp	r0, r3
 80005b6:	d01e      	beq.n	80005f6 <GPIO_DeInit+0x46>
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <GPIO_DeInit+0xc8>)
 80005ba:	4298      	cmp	r0, r3
 80005bc:	d024      	beq.n	8000608 <GPIO_DeInit+0x58>
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <GPIO_DeInit+0xcc>)
 80005c0:	4298      	cmp	r0, r3
 80005c2:	d02a      	beq.n	800061a <GPIO_DeInit+0x6a>
 80005c4:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <GPIO_DeInit+0xd0>)
 80005c6:	4298      	cmp	r0, r3
 80005c8:	d030      	beq.n	800062c <GPIO_DeInit+0x7c>
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <GPIO_DeInit+0xd4>)
 80005cc:	4298      	cmp	r0, r3
 80005ce:	d036      	beq.n	800063e <GPIO_DeInit+0x8e>
 80005d0:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <GPIO_DeInit+0xd8>)
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d03c      	beq.n	8000650 <GPIO_DeInit+0xa0>
 80005d6:	4b2d      	ldr	r3, [pc, #180]	; (800068c <GPIO_DeInit+0xdc>)
 80005d8:	4298      	cmp	r0, r3
 80005da:	d042      	beq.n	8000662 <GPIO_DeInit+0xb2>
 80005dc:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <GPIO_DeInit+0xe0>)
 80005de:	4298      	cmp	r0, r3
 80005e0:	d000      	beq.n	80005e4 <GPIO_DeInit+0x34>
 80005e2:	bd08      	pop	{r3, pc}
 80005e4:	2020      	movs	r0, #32
 80005e6:	2101      	movs	r1, #1
 80005e8:	f000 fa82 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 80005ec:	2020      	movs	r0, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	f000 fa7e 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 80005f4:	e7f5      	b.n	80005e2 <GPIO_DeInit+0x32>
 80005f6:	2001      	movs	r0, #1
 80005f8:	2101      	movs	r1, #1
 80005fa:	f000 fa79 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 80005fe:	2001      	movs	r0, #1
 8000600:	2100      	movs	r1, #0
 8000602:	f000 fa75 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000606:	e7ec      	b.n	80005e2 <GPIO_DeInit+0x32>
 8000608:	2002      	movs	r0, #2
 800060a:	2101      	movs	r1, #1
 800060c:	f000 fa70 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000610:	2002      	movs	r0, #2
 8000612:	2100      	movs	r1, #0
 8000614:	f000 fa6c 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000618:	e7e3      	b.n	80005e2 <GPIO_DeInit+0x32>
 800061a:	2004      	movs	r0, #4
 800061c:	2101      	movs	r1, #1
 800061e:	f000 fa67 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000622:	2004      	movs	r0, #4
 8000624:	2100      	movs	r1, #0
 8000626:	f000 fa63 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 800062a:	e7da      	b.n	80005e2 <GPIO_DeInit+0x32>
 800062c:	2008      	movs	r0, #8
 800062e:	2101      	movs	r1, #1
 8000630:	f000 fa5e 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000634:	2008      	movs	r0, #8
 8000636:	2100      	movs	r1, #0
 8000638:	f000 fa5a 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 800063c:	e7d1      	b.n	80005e2 <GPIO_DeInit+0x32>
 800063e:	2010      	movs	r0, #16
 8000640:	2101      	movs	r1, #1
 8000642:	f000 fa55 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000646:	2010      	movs	r0, #16
 8000648:	2100      	movs	r1, #0
 800064a:	f000 fa51 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 800064e:	e7c8      	b.n	80005e2 <GPIO_DeInit+0x32>
 8000650:	2040      	movs	r0, #64	; 0x40
 8000652:	2101      	movs	r1, #1
 8000654:	f000 fa4c 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000658:	2040      	movs	r0, #64	; 0x40
 800065a:	2100      	movs	r1, #0
 800065c:	f000 fa48 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000660:	e7bf      	b.n	80005e2 <GPIO_DeInit+0x32>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	2101      	movs	r1, #1
 8000666:	f000 fa43 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	2100      	movs	r1, #0
 800066e:	f000 fa3f 	bl	8000af0 <RCC_AHBPeriphResetCmd>
 8000672:	e7b6      	b.n	80005e2 <GPIO_DeInit+0x32>
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021000 	.word	0x40021000
 8000688:	40021800 	.word	0x40021800
 800068c:	40021c00 	.word	0x40021c00
 8000690:	40021400 	.word	0x40021400

08000694 <GPIO_Init>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4644      	mov	r4, r8
 8000698:	465f      	mov	r7, fp
 800069a:	4656      	mov	r6, sl
 800069c:	464d      	mov	r5, r9
 800069e:	b4f0      	push	{r4, r5, r6, r7}
 80006a0:	468c      	mov	ip, r1
 80006a2:	680f      	ldr	r7, [r1, #0]
 80006a4:	2103      	movs	r1, #3
 80006a6:	b083      	sub	sp, #12
 80006a8:	2400      	movs	r4, #0
 80006aa:	2300      	movs	r3, #0
 80006ac:	2601      	movs	r6, #1
 80006ae:	4688      	mov	r8, r1
 80006b0:	e003      	b.n	80006ba <GPIO_Init+0x26>
 80006b2:	3301      	adds	r3, #1
 80006b4:	3402      	adds	r4, #2
 80006b6:	2b10      	cmp	r3, #16
 80006b8:	d026      	beq.n	8000708 <GPIO_Init+0x74>
 80006ba:	1c32      	adds	r2, r6, #0
 80006bc:	409a      	lsls	r2, r3
 80006be:	1c3d      	adds	r5, r7, #0
 80006c0:	4015      	ands	r5, r2
 80006c2:	4295      	cmp	r5, r2
 80006c4:	d1f5      	bne.n	80006b2 <GPIO_Init+0x1e>
 80006c6:	4642      	mov	r2, r8
 80006c8:	6801      	ldr	r1, [r0, #0]
 80006ca:	40a2      	lsls	r2, r4
 80006cc:	43d2      	mvns	r2, r2
 80006ce:	4011      	ands	r1, r2
 80006d0:	6001      	str	r1, [r0, #0]
 80006d2:	4661      	mov	r1, ip
 80006d4:	7909      	ldrb	r1, [r1, #4]
 80006d6:	4693      	mov	fp, r2
 80006d8:	6802      	ldr	r2, [r0, #0]
 80006da:	9101      	str	r1, [sp, #4]
 80006dc:	40a1      	lsls	r1, r4
 80006de:	4311      	orrs	r1, r2
 80006e0:	6001      	str	r1, [r0, #0]
 80006e2:	9901      	ldr	r1, [sp, #4]
 80006e4:	3901      	subs	r1, #1
 80006e6:	b2c9      	uxtb	r1, r1
 80006e8:	2901      	cmp	r1, #1
 80006ea:	d914      	bls.n	8000716 <GPIO_Init+0x82>
 80006ec:	68c1      	ldr	r1, [r0, #12]
 80006ee:	465a      	mov	r2, fp
 80006f0:	400a      	ands	r2, r1
 80006f2:	4665      	mov	r5, ip
 80006f4:	60c2      	str	r2, [r0, #12]
 80006f6:	79ea      	ldrb	r2, [r5, #7]
 80006f8:	68c1      	ldr	r1, [r0, #12]
 80006fa:	40a2      	lsls	r2, r4
 80006fc:	430a      	orrs	r2, r1
 80006fe:	3301      	adds	r3, #1
 8000700:	60c2      	str	r2, [r0, #12]
 8000702:	3402      	adds	r4, #2
 8000704:	2b10      	cmp	r3, #16
 8000706:	d1d8      	bne.n	80006ba <GPIO_Init+0x26>
 8000708:	b003      	add	sp, #12
 800070a:	bc3c      	pop	{r2, r3, r4, r5}
 800070c:	4690      	mov	r8, r2
 800070e:	4699      	mov	r9, r3
 8000710:	46a2      	mov	sl, r4
 8000712:	46ab      	mov	fp, r5
 8000714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000716:	6881      	ldr	r1, [r0, #8]
 8000718:	465a      	mov	r2, fp
 800071a:	4011      	ands	r1, r2
 800071c:	4662      	mov	r2, ip
 800071e:	6081      	str	r1, [r0, #8]
 8000720:	7952      	ldrb	r2, [r2, #5]
 8000722:	6881      	ldr	r1, [r0, #8]
 8000724:	40a2      	lsls	r2, r4
 8000726:	4311      	orrs	r1, r2
 8000728:	6081      	str	r1, [r0, #8]
 800072a:	6841      	ldr	r1, [r0, #4]
 800072c:	4662      	mov	r2, ip
 800072e:	b289      	uxth	r1, r1
 8000730:	43a9      	bics	r1, r5
 8000732:	8081      	strh	r1, [r0, #4]
 8000734:	7991      	ldrb	r1, [r2, #6]
 8000736:	6845      	ldr	r5, [r0, #4]
 8000738:	4099      	lsls	r1, r3
 800073a:	4329      	orrs	r1, r5
 800073c:	b289      	uxth	r1, r1
 800073e:	8081      	strh	r1, [r0, #4]
 8000740:	e7d4      	b.n	80006ec <GPIO_Init+0x58>
 8000742:	46c0      	nop			; (mov r8, r8)

08000744 <GPIO_StructInit>:
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <GPIO_StructInit+0x10>)
 8000746:	6003      	str	r3, [r0, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	7103      	strb	r3, [r0, #4]
 800074c:	7143      	strb	r3, [r0, #5]
 800074e:	7183      	strb	r3, [r0, #6]
 8000750:	71c3      	strb	r3, [r0, #7]
 8000752:	4770      	bx	lr
 8000754:	0000ffff 	.word	0x0000ffff

08000758 <GPIO_PinLockConfig>:
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	b082      	sub	sp, #8
 800075c:	025b      	lsls	r3, r3, #9
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	9b01      	ldr	r3, [sp, #4]
 8000762:	430b      	orrs	r3, r1
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	9b01      	ldr	r3, [sp, #4]
 8000768:	61c3      	str	r3, [r0, #28]
 800076a:	61c1      	str	r1, [r0, #28]
 800076c:	9b01      	ldr	r3, [sp, #4]
 800076e:	61c3      	str	r3, [r0, #28]
 8000770:	69c3      	ldr	r3, [r0, #28]
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	69c3      	ldr	r3, [r0, #28]
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	b002      	add	sp, #8
 800077a:	4770      	bx	lr

0800077c <GPIO_ReadInputDataBit>:
 800077c:	6900      	ldr	r0, [r0, #16]
 800077e:	4008      	ands	r0, r1
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	4198      	sbcs	r0, r3
 8000784:	b2c0      	uxtb	r0, r0
 8000786:	4770      	bx	lr

08000788 <GPIO_ReadInputData>:
 8000788:	6900      	ldr	r0, [r0, #16]
 800078a:	b280      	uxth	r0, r0
 800078c:	4770      	bx	lr
 800078e:	46c0      	nop			; (mov r8, r8)

08000790 <GPIO_ReadOutputDataBit>:
 8000790:	6940      	ldr	r0, [r0, #20]
 8000792:	4008      	ands	r0, r1
 8000794:	1e43      	subs	r3, r0, #1
 8000796:	4198      	sbcs	r0, r3
 8000798:	b2c0      	uxtb	r0, r0
 800079a:	4770      	bx	lr

0800079c <GPIO_ReadOutputData>:
 800079c:	6940      	ldr	r0, [r0, #20]
 800079e:	b280      	uxth	r0, r0
 80007a0:	4770      	bx	lr
 80007a2:	46c0      	nop			; (mov r8, r8)

080007a4 <GPIO_SetBits>:
 80007a4:	8301      	strh	r1, [r0, #24]
 80007a6:	4770      	bx	lr

080007a8 <GPIO_ResetBits>:
 80007a8:	8341      	strh	r1, [r0, #26]
 80007aa:	4770      	bx	lr

080007ac <GPIO_WriteBit>:
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d101      	bne.n	80007b4 <GPIO_WriteBit+0x8>
 80007b0:	8341      	strh	r1, [r0, #26]
 80007b2:	4770      	bx	lr
 80007b4:	8301      	strh	r1, [r0, #24]
 80007b6:	e7fc      	b.n	80007b2 <GPIO_WriteBit+0x6>

080007b8 <GPIO_Write>:
 80007b8:	8281      	strh	r1, [r0, #20]
 80007ba:	4770      	bx	lr

080007bc <GPIO_ToggleBits>:
 80007bc:	6943      	ldr	r3, [r0, #20]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4059      	eors	r1, r3
 80007c2:	8281      	strh	r1, [r0, #20]
 80007c4:	4770      	bx	lr
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <GPIO_PinAFConfig>:
 80007c8:	2307      	movs	r3, #7
 80007ca:	400b      	ands	r3, r1
 80007cc:	08c9      	lsrs	r1, r1, #3
 80007ce:	0089      	lsls	r1, r1, #2
 80007d0:	1840      	adds	r0, r0, r1
 80007d2:	b510      	push	{r4, lr}
 80007d4:	6a01      	ldr	r1, [r0, #32]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	240f      	movs	r4, #15
 80007da:	409c      	lsls	r4, r3
 80007dc:	43a1      	bics	r1, r4
 80007de:	6201      	str	r1, [r0, #32]
 80007e0:	6a01      	ldr	r1, [r0, #32]
 80007e2:	409a      	lsls	r2, r3
 80007e4:	1c13      	adds	r3, r2, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6203      	str	r3, [r0, #32]
 80007ea:	bd10      	pop	{r4, pc}

080007ec <RCC_DeInit>:
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <RCC_DeInit+0x34>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	6899      	ldr	r1, [r3, #8]
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <RCC_DeInit+0x38>)
 80007fc:	400a      	ands	r2, r1
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <RCC_DeInit+0x3c>)
 8000804:	400a      	ands	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <RCC_DeInit+0x40>)
 800080c:	400a      	ands	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	6899      	ldr	r1, [r3, #8]
 8000812:	4a07      	ldr	r2, [pc, #28]	; (8000830 <RCC_DeInit+0x44>)
 8000814:	400a      	ands	r2, r1
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	4770      	bx	lr
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40023800 	.word	0x40023800
 8000824:	88ffc00c 	.word	0x88ffc00c
 8000828:	eefefffe 	.word	0xeefefffe
 800082c:	fffbffff 	.word	0xfffbffff
 8000830:	ff02ffff 	.word	0xff02ffff

08000834 <RCC_HSEConfig>:
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <RCC_HSEConfig+0xc>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	7018      	strb	r0, [r3, #0]
 800083c:	4770      	bx	lr
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40023802 	.word	0x40023802

08000844 <RCC_WaitForHSEStartUp>:
 8000844:	2300      	movs	r3, #0
 8000846:	b082      	sub	sp, #8
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	490b      	ldr	r1, [pc, #44]	; (800087c <RCC_WaitForHSEStartUp+0x38>)
 8000850:	0292      	lsls	r2, r2, #10
 8000852:	00d8      	lsls	r0, r3, #3
 8000854:	680b      	ldr	r3, [r1, #0]
 8000856:	4213      	tst	r3, r2
 8000858:	d10b      	bne.n	8000872 <RCC_WaitForHSEStartUp+0x2e>
 800085a:	9b01      	ldr	r3, [sp, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	9b01      	ldr	r3, [sp, #4]
 8000862:	4283      	cmp	r3, r0
 8000864:	d1f6      	bne.n	8000854 <RCC_WaitForHSEStartUp+0x10>
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <RCC_WaitForHSEStartUp+0x38>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	0380      	lsls	r0, r0, #14
 800086c:	0fc0      	lsrs	r0, r0, #31
 800086e:	b002      	add	sp, #8
 8000870:	4770      	bx	lr
 8000872:	9b01      	ldr	r3, [sp, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	9b01      	ldr	r3, [sp, #4]
 800087a:	e7f4      	b.n	8000866 <RCC_WaitForHSEStartUp+0x22>
 800087c:	40023800 	.word	0x40023800

08000880 <RCC_AdjustMSICalibrationValue>:
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <RCC_AdjustMSICalibrationValue+0x8>)
 8000882:	7018      	strb	r0, [r3, #0]
 8000884:	4770      	bx	lr
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40023807 	.word	0x40023807

0800088c <RCC_MSIRangeConfig>:
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <RCC_MSIRangeConfig+0x10>)
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <RCC_MSIRangeConfig+0x14>)
 8000890:	6859      	ldr	r1, [r3, #4]
 8000892:	400a      	ands	r2, r1
 8000894:	4310      	orrs	r0, r2
 8000896:	6058      	str	r0, [r3, #4]
 8000898:	4770      	bx	lr
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40023800 	.word	0x40023800
 80008a0:	ffff1fff 	.word	0xffff1fff

080008a4 <RCC_MSICmd>:
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <RCC_MSICmd+0x8>)
 80008a6:	6018      	str	r0, [r3, #0]
 80008a8:	4770      	bx	lr
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	42470020 	.word	0x42470020

080008b0 <RCC_AdjustHSICalibrationValue>:
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <RCC_AdjustHSICalibrationValue+0x10>)
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <RCC_AdjustHSICalibrationValue+0x14>)
 80008b4:	6859      	ldr	r1, [r3, #4]
 80008b6:	0200      	lsls	r0, r0, #8
 80008b8:	400a      	ands	r2, r1
 80008ba:	4310      	orrs	r0, r2
 80008bc:	6058      	str	r0, [r3, #4]
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800
 80008c4:	ffffe0ff 	.word	0xffffe0ff

080008c8 <RCC_HSICmd>:
 80008c8:	4b01      	ldr	r3, [pc, #4]	; (80008d0 <RCC_HSICmd+0x8>)
 80008ca:	6018      	str	r0, [r3, #0]
 80008cc:	4770      	bx	lr
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	42470000 	.word	0x42470000

080008d4 <RCC_LSEConfig>:
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <RCC_LSEConfig+0xc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	7018      	strb	r0, [r3, #0]
 80008dc:	4770      	bx	lr
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40023835 	.word	0x40023835

080008e4 <RCC_LSICmd>:
 80008e4:	4b01      	ldr	r3, [pc, #4]	; (80008ec <RCC_LSICmd+0x8>)
 80008e6:	6018      	str	r0, [r3, #0]
 80008e8:	4770      	bx	lr
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	42470680 	.word	0x42470680

080008f0 <RCC_PLLConfig>:
 80008f0:	4310      	orrs	r0, r2
 80008f2:	4b02      	ldr	r3, [pc, #8]	; (80008fc <RCC_PLLConfig+0xc>)
 80008f4:	4301      	orrs	r1, r0
 80008f6:	7019      	strb	r1, [r3, #0]
 80008f8:	4770      	bx	lr
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	4002380a 	.word	0x4002380a

08000900 <RCC_PLLCmd>:
 8000900:	4b01      	ldr	r3, [pc, #4]	; (8000908 <RCC_PLLCmd+0x8>)
 8000902:	6018      	str	r0, [r3, #0]
 8000904:	4770      	bx	lr
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	42470060 	.word	0x42470060

0800090c <RCC_ClockSecuritySystemCmd>:
 800090c:	4b01      	ldr	r3, [pc, #4]	; (8000914 <RCC_ClockSecuritySystemCmd+0x8>)
 800090e:	6018      	str	r0, [r3, #0]
 8000910:	4770      	bx	lr
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	42470070 	.word	0x42470070

08000918 <RCC_LSEClockSecuritySystemCmd>:
 8000918:	4b01      	ldr	r3, [pc, #4]	; (8000920 <RCC_LSEClockSecuritySystemCmd+0x8>)
 800091a:	6018      	str	r0, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	424706ac 	.word	0x424706ac

08000924 <RCC_MCOConfig>:
 8000924:	4b01      	ldr	r3, [pc, #4]	; (800092c <RCC_MCOConfig+0x8>)
 8000926:	4308      	orrs	r0, r1
 8000928:	7018      	strb	r0, [r3, #0]
 800092a:	4770      	bx	lr
 800092c:	4002380b 	.word	0x4002380b

08000930 <RCC_SYSCLKConfig>:
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <RCC_SYSCLKConfig+0x10>)
 8000932:	2103      	movs	r1, #3
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	438a      	bics	r2, r1
 8000938:	4310      	orrs	r0, r2
 800093a:	6098      	str	r0, [r3, #8]
 800093c:	4770      	bx	lr
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40023800 	.word	0x40023800

08000944 <RCC_GetSYSCLKSource>:
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <RCC_GetSYSCLKSource+0xc>)
 8000946:	200c      	movs	r0, #12
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	4018      	ands	r0, r3
 800094c:	4770      	bx	lr
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40023800 	.word	0x40023800

08000954 <RCC_HCLKConfig>:
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <RCC_HCLKConfig+0x10>)
 8000956:	21f0      	movs	r1, #240	; 0xf0
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	438a      	bics	r2, r1
 800095c:	4310      	orrs	r0, r2
 800095e:	6098      	str	r0, [r3, #8]
 8000960:	4770      	bx	lr
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40023800 	.word	0x40023800

08000968 <RCC_PCLK1Config>:
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <RCC_PCLK1Config+0x10>)
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <RCC_PCLK1Config+0x14>)
 800096c:	6899      	ldr	r1, [r3, #8]
 800096e:	400a      	ands	r2, r1
 8000970:	4310      	orrs	r0, r2
 8000972:	6098      	str	r0, [r3, #8]
 8000974:	4770      	bx	lr
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40023800 	.word	0x40023800
 800097c:	fffff8ff 	.word	0xfffff8ff

08000980 <RCC_PCLK2Config>:
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <RCC_PCLK2Config+0x10>)
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <RCC_PCLK2Config+0x14>)
 8000984:	6899      	ldr	r1, [r3, #8]
 8000986:	00c0      	lsls	r0, r0, #3
 8000988:	400a      	ands	r2, r1
 800098a:	4310      	orrs	r0, r2
 800098c:	6098      	str	r0, [r3, #8]
 800098e:	4770      	bx	lr
 8000990:	40023800 	.word	0x40023800
 8000994:	ffffc7ff 	.word	0xffffc7ff

08000998 <RCC_GetClocksFreq>:
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <RCC_GetClocksFreq+0xa8>)
 800099a:	b538      	push	{r3, r4, r5, lr}
 800099c:	6893      	ldr	r3, [r2, #8]
 800099e:	210c      	movs	r1, #12
 80009a0:	1c04      	adds	r4, r0, #0
 80009a2:	400b      	ands	r3, r1
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d041      	beq.n	8000a2c <RCC_GetClocksFreq+0x94>
 80009a8:	d931      	bls.n	8000a0e <RCC_GetClocksFreq+0x76>
 80009aa:	2b08      	cmp	r3, #8
 80009ac:	d014      	beq.n	80009d8 <RCC_GetClocksFreq+0x40>
 80009ae:	2b0c      	cmp	r3, #12
 80009b0:	d139      	bne.n	8000a26 <RCC_GetClocksFreq+0x8e>
 80009b2:	6893      	ldr	r3, [r2, #8]
 80009b4:	4d23      	ldr	r5, [pc, #140]	; (8000a44 <RCC_GetClocksFreq+0xac>)
 80009b6:	6891      	ldr	r1, [r2, #8]
 80009b8:	029b      	lsls	r3, r3, #10
 80009ba:	0f1b      	lsrs	r3, r3, #28
 80009bc:	5ceb      	ldrb	r3, [r5, r3]
 80009be:	0209      	lsls	r1, r1, #8
 80009c0:	6892      	ldr	r2, [r2, #8]
 80009c2:	0f89      	lsrs	r1, r1, #30
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3101      	adds	r1, #1
 80009c8:	03d0      	lsls	r0, r2, #15
 80009ca:	d433      	bmi.n	8000a34 <RCC_GetClocksFreq+0x9c>
 80009cc:	481e      	ldr	r0, [pc, #120]	; (8000a48 <RCC_GetClocksFreq+0xb0>)
 80009ce:	4358      	muls	r0, r3
 80009d0:	f000 febe 	bl	8001750 <__aeabi_uidiv>
 80009d4:	6020      	str	r0, [r4, #0]
 80009d6:	e002      	b.n	80009de <RCC_GetClocksFreq+0x46>
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <RCC_GetClocksFreq+0xb4>)
 80009da:	4d1a      	ldr	r5, [pc, #104]	; (8000a44 <RCC_GetClocksFreq+0xac>)
 80009dc:	6020      	str	r0, [r4, #0]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <RCC_GetClocksFreq+0xa8>)
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	0612      	lsls	r2, r2, #24
 80009e4:	0f12      	lsrs	r2, r2, #28
 80009e6:	18aa      	adds	r2, r5, r2
 80009e8:	7b12      	ldrb	r2, [r2, #12]
 80009ea:	40d0      	lsrs	r0, r2
 80009ec:	6060      	str	r0, [r4, #4]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	1c01      	adds	r1, r0, #0
 80009f2:	0552      	lsls	r2, r2, #21
 80009f4:	0f52      	lsrs	r2, r2, #29
 80009f6:	18aa      	adds	r2, r5, r2
 80009f8:	7b12      	ldrb	r2, [r2, #12]
 80009fa:	40d1      	lsrs	r1, r2
 80009fc:	60a1      	str	r1, [r4, #8]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	049b      	lsls	r3, r3, #18
 8000a02:	0f5b      	lsrs	r3, r3, #29
 8000a04:	18ed      	adds	r5, r5, r3
 8000a06:	7b2b      	ldrb	r3, [r5, #12]
 8000a08:	40d8      	lsrs	r0, r3
 8000a0a:	60e0      	str	r0, [r4, #12]
 8000a0c:	bd38      	pop	{r3, r4, r5, pc}
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d109      	bne.n	8000a26 <RCC_GetClocksFreq+0x8e>
 8000a12:	6853      	ldr	r3, [r2, #4]
 8000a14:	041b      	lsls	r3, r3, #16
 8000a16:	0f5b      	lsrs	r3, r3, #29
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	0200      	lsls	r0, r0, #8
 8000a1e:	4098      	lsls	r0, r3
 8000a20:	6020      	str	r0, [r4, #0]
 8000a22:	4d08      	ldr	r5, [pc, #32]	; (8000a44 <RCC_GetClocksFreq+0xac>)
 8000a24:	e7db      	b.n	80009de <RCC_GetClocksFreq+0x46>
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <RCC_GetClocksFreq+0xa8>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	e7f3      	b.n	8000a14 <RCC_GetClocksFreq+0x7c>
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <RCC_GetClocksFreq+0xb0>)
 8000a2e:	4d05      	ldr	r5, [pc, #20]	; (8000a44 <RCC_GetClocksFreq+0xac>)
 8000a30:	6020      	str	r0, [r4, #0]
 8000a32:	e7d4      	b.n	80009de <RCC_GetClocksFreq+0x46>
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <RCC_GetClocksFreq+0xb4>)
 8000a36:	4358      	muls	r0, r3
 8000a38:	f000 fe8a 	bl	8001750 <__aeabi_uidiv>
 8000a3c:	6020      	str	r0, [r4, #0]
 8000a3e:	e7ce      	b.n	80009de <RCC_GetClocksFreq+0x46>
 8000a40:	40023800 	.word	0x40023800
 8000a44:	20000000 	.word	0x20000000
 8000a48:	00f42400 	.word	0x00f42400
 8000a4c:	007a1200 	.word	0x007a1200

08000a50 <RCC_RTCCLKConfig>:
 8000a50:	23c0      	movs	r3, #192	; 0xc0
 8000a52:	029b      	lsls	r3, r3, #10
 8000a54:	1c02      	adds	r2, r0, #0
 8000a56:	b510      	push	{r4, lr}
 8000a58:	401a      	ands	r2, r3
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d108      	bne.n	8000a70 <RCC_RTCCLKConfig+0x20>
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <RCC_RTCCLKConfig+0x34>)
 8000a60:	4909      	ldr	r1, [pc, #36]	; (8000a88 <RCC_RTCCLKConfig+0x38>)
 8000a62:	681c      	ldr	r4, [r3, #0]
 8000a64:	4021      	ands	r1, r4
 8000a66:	24c0      	movs	r4, #192	; 0xc0
 8000a68:	05e4      	lsls	r4, r4, #23
 8000a6a:	4020      	ands	r0, r4
 8000a6c:	4308      	orrs	r0, r1
 8000a6e:	6018      	str	r0, [r3, #0]
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <RCC_RTCCLKConfig+0x34>)
 8000a72:	4906      	ldr	r1, [pc, #24]	; (8000a8c <RCC_RTCCLKConfig+0x3c>)
 8000a74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a76:	4001      	ands	r1, r0
 8000a78:	6359      	str	r1, [r3, #52]	; 0x34
 8000a7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40023800 	.word	0x40023800
 8000a88:	9fffffff 	.word	0x9fffffff
 8000a8c:	fffcffff 	.word	0xfffcffff

08000a90 <RCC_RTCCLKCmd>:
 8000a90:	4b01      	ldr	r3, [pc, #4]	; (8000a98 <RCC_RTCCLKCmd+0x8>)
 8000a92:	6018      	str	r0, [r3, #0]
 8000a94:	4770      	bx	lr
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	424706d8 	.word	0x424706d8

08000a9c <RCC_RTCResetCmd>:
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <RCC_RTCResetCmd+0x8>)
 8000a9e:	6018      	str	r0, [r3, #0]
 8000aa0:	4770      	bx	lr
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	424706dc 	.word	0x424706dc

08000aa8 <RCC_AHBPeriphClockCmd>:
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <RCC_AHBPeriphClockCmd+0x14>)
 8000aaa:	69da      	ldr	r2, [r3, #28]
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d102      	bne.n	8000ab6 <RCC_AHBPeriphClockCmd+0xe>
 8000ab0:	4382      	bics	r2, r0
 8000ab2:	61da      	str	r2, [r3, #28]
 8000ab4:	4770      	bx	lr
 8000ab6:	4310      	orrs	r0, r2
 8000ab8:	61d8      	str	r0, [r3, #28]
 8000aba:	e7fb      	b.n	8000ab4 <RCC_AHBPeriphClockCmd+0xc>
 8000abc:	40023800 	.word	0x40023800

08000ac0 <RCC_APB2PeriphClockCmd>:
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <RCC_APB2PeriphClockCmd+0x14>)
 8000ac2:	6a1a      	ldr	r2, [r3, #32]
 8000ac4:	2900      	cmp	r1, #0
 8000ac6:	d102      	bne.n	8000ace <RCC_APB2PeriphClockCmd+0xe>
 8000ac8:	4382      	bics	r2, r0
 8000aca:	621a      	str	r2, [r3, #32]
 8000acc:	4770      	bx	lr
 8000ace:	4310      	orrs	r0, r2
 8000ad0:	6218      	str	r0, [r3, #32]
 8000ad2:	e7fb      	b.n	8000acc <RCC_APB2PeriphClockCmd+0xc>
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <RCC_APB1PeriphClockCmd>:
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <RCC_APB1PeriphClockCmd+0x14>)
 8000ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d102      	bne.n	8000ae6 <RCC_APB1PeriphClockCmd+0xe>
 8000ae0:	4382      	bics	r2, r0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ae4:	4770      	bx	lr
 8000ae6:	4310      	orrs	r0, r2
 8000ae8:	6258      	str	r0, [r3, #36]	; 0x24
 8000aea:	e7fb      	b.n	8000ae4 <RCC_APB1PeriphClockCmd+0xc>
 8000aec:	40023800 	.word	0x40023800

08000af0 <RCC_AHBPeriphResetCmd>:
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <RCC_AHBPeriphResetCmd+0x14>)
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d102      	bne.n	8000afe <RCC_AHBPeriphResetCmd+0xe>
 8000af8:	4382      	bics	r2, r0
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	4770      	bx	lr
 8000afe:	4310      	orrs	r0, r2
 8000b00:	6118      	str	r0, [r3, #16]
 8000b02:	e7fb      	b.n	8000afc <RCC_AHBPeriphResetCmd+0xc>
 8000b04:	40023800 	.word	0x40023800

08000b08 <RCC_APB2PeriphResetCmd>:
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <RCC_APB2PeriphResetCmd+0x14>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d102      	bne.n	8000b16 <RCC_APB2PeriphResetCmd+0xe>
 8000b10:	4382      	bics	r2, r0
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	4770      	bx	lr
 8000b16:	4310      	orrs	r0, r2
 8000b18:	6158      	str	r0, [r3, #20]
 8000b1a:	e7fb      	b.n	8000b14 <RCC_APB2PeriphResetCmd+0xc>
 8000b1c:	40023800 	.word	0x40023800

08000b20 <RCC_APB1PeriphResetCmd>:
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <RCC_APB1PeriphResetCmd+0x14>)
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	2900      	cmp	r1, #0
 8000b26:	d102      	bne.n	8000b2e <RCC_APB1PeriphResetCmd+0xe>
 8000b28:	4382      	bics	r2, r0
 8000b2a:	619a      	str	r2, [r3, #24]
 8000b2c:	4770      	bx	lr
 8000b2e:	4310      	orrs	r0, r2
 8000b30:	6198      	str	r0, [r3, #24]
 8000b32:	e7fb      	b.n	8000b2c <RCC_APB1PeriphResetCmd+0xc>
 8000b34:	40023800 	.word	0x40023800

08000b38 <RCC_AHBPeriphClockLPModeCmd>:
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <RCC_AHBPeriphClockLPModeCmd+0x14>)
 8000b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d102      	bne.n	8000b46 <RCC_AHBPeriphClockLPModeCmd+0xe>
 8000b40:	4382      	bics	r2, r0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
 8000b44:	4770      	bx	lr
 8000b46:	4310      	orrs	r0, r2
 8000b48:	6298      	str	r0, [r3, #40]	; 0x28
 8000b4a:	e7fb      	b.n	8000b44 <RCC_AHBPeriphClockLPModeCmd+0xc>
 8000b4c:	40023800 	.word	0x40023800

08000b50 <RCC_APB2PeriphClockLPModeCmd>:
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 8000b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d102      	bne.n	8000b5e <RCC_APB2PeriphClockLPModeCmd+0xe>
 8000b58:	4382      	bics	r2, r0
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5c:	4770      	bx	lr
 8000b5e:	4310      	orrs	r0, r2
 8000b60:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000b62:	e7fb      	b.n	8000b5c <RCC_APB2PeriphClockLPModeCmd+0xc>
 8000b64:	40023800 	.word	0x40023800

08000b68 <RCC_APB1PeriphClockLPModeCmd>:
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8000b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d102      	bne.n	8000b76 <RCC_APB1PeriphClockLPModeCmd+0xe>
 8000b70:	4382      	bics	r2, r0
 8000b72:	631a      	str	r2, [r3, #48]	; 0x30
 8000b74:	4770      	bx	lr
 8000b76:	4310      	orrs	r0, r2
 8000b78:	6318      	str	r0, [r3, #48]	; 0x30
 8000b7a:	e7fb      	b.n	8000b74 <RCC_APB1PeriphClockLPModeCmd+0xc>
 8000b7c:	40023800 	.word	0x40023800

08000b80 <RCC_ITConfig>:
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <RCC_ITConfig+0x14>)
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d102      	bne.n	8000b8e <RCC_ITConfig+0xe>
 8000b88:	4382      	bics	r2, r0
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	4770      	bx	lr
 8000b8e:	4310      	orrs	r0, r2
 8000b90:	7018      	strb	r0, [r3, #0]
 8000b92:	e7fb      	b.n	8000b8c <RCC_ITConfig+0xc>
 8000b94:	4002380d 	.word	0x4002380d

08000b98 <RCC_GetFlagStatus>:
 8000b98:	0943      	lsrs	r3, r0, #5
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d008      	beq.n	8000bb0 <RCC_GetFlagStatus+0x18>
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <RCC_GetFlagStatus+0x20>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	221f      	movs	r2, #31
 8000ba4:	4010      	ands	r0, r2
 8000ba6:	40c3      	lsrs	r3, r0
 8000ba8:	1c18      	adds	r0, r3, #0
 8000baa:	2301      	movs	r3, #1
 8000bac:	4018      	ands	r0, r3
 8000bae:	4770      	bx	lr
 8000bb0:	4b01      	ldr	r3, [pc, #4]	; (8000bb8 <RCC_GetFlagStatus+0x20>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	e7f5      	b.n	8000ba2 <RCC_GetFlagStatus+0xa>
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40023800 	.word	0x40023800

08000bbc <RCC_ClearFlag>:
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <RCC_ClearFlag+0x10>)
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bc2:	0452      	lsls	r2, r2, #17
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8000bc8:	4770      	bx	lr
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <RCC_GetITStatus>:
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <RCC_GetITStatus+0x10>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	4018      	ands	r0, r3
 8000bd6:	1e43      	subs	r3, r0, #1
 8000bd8:	4198      	sbcs	r0, r3
 8000bda:	b2c0      	uxtb	r0, r0
 8000bdc:	4770      	bx	lr
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40023800 	.word	0x40023800

08000be4 <RCC_ClearITPendingBit>:
 8000be4:	4b01      	ldr	r3, [pc, #4]	; (8000bec <RCC_ClearITPendingBit+0x8>)
 8000be6:	7018      	strb	r0, [r3, #0]
 8000be8:	4770      	bx	lr
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	4002380e 	.word	0x4002380e

08000bf0 <TIM_DeInit>:
 8000bf0:	b508      	push	{r3, lr}
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	4298      	cmp	r0, r3
 8000bf8:	d021      	beq.n	8000c3e <TIM_DeInit+0x4e>
 8000bfa:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <TIM_DeInit+0xe0>)
 8000bfc:	4298      	cmp	r0, r3
 8000bfe:	d027      	beq.n	8000c50 <TIM_DeInit+0x60>
 8000c00:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <TIM_DeInit+0xe4>)
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d02d      	beq.n	8000c62 <TIM_DeInit+0x72>
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <TIM_DeInit+0xe8>)
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	d033      	beq.n	8000c74 <TIM_DeInit+0x84>
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <TIM_DeInit+0xec>)
 8000c0e:	4298      	cmp	r0, r3
 8000c10:	d039      	beq.n	8000c86 <TIM_DeInit+0x96>
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <TIM_DeInit+0xf0>)
 8000c14:	4298      	cmp	r0, r3
 8000c16:	d03f      	beq.n	8000c98 <TIM_DeInit+0xa8>
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <TIM_DeInit+0xf4>)
 8000c1a:	4298      	cmp	r0, r3
 8000c1c:	d045      	beq.n	8000caa <TIM_DeInit+0xba>
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <TIM_DeInit+0xf8>)
 8000c20:	4298      	cmp	r0, r3
 8000c22:	d04b      	beq.n	8000cbc <TIM_DeInit+0xcc>
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <TIM_DeInit+0xfc>)
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d000      	beq.n	8000c2c <TIM_DeInit+0x3c>
 8000c2a:	bd08      	pop	{r3, pc}
 8000c2c:	2010      	movs	r0, #16
 8000c2e:	2101      	movs	r1, #1
 8000c30:	f7ff ff6a 	bl	8000b08 <RCC_APB2PeriphResetCmd>
 8000c34:	2010      	movs	r0, #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	f7ff ff66 	bl	8000b08 <RCC_APB2PeriphResetCmd>
 8000c3c:	e7f5      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000c3e:	2001      	movs	r0, #1
 8000c40:	2101      	movs	r1, #1
 8000c42:	f7ff ff6d 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c46:	2001      	movs	r0, #1
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f7ff ff69 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c4e:	e7ec      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000c50:	2002      	movs	r0, #2
 8000c52:	2101      	movs	r1, #1
 8000c54:	f7ff ff64 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c58:	2002      	movs	r0, #2
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f7ff ff60 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c60:	e7e3      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000c62:	2004      	movs	r0, #4
 8000c64:	2101      	movs	r1, #1
 8000c66:	f7ff ff5b 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f7ff ff57 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c72:	e7da      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000c74:	2008      	movs	r0, #8
 8000c76:	2101      	movs	r1, #1
 8000c78:	f7ff ff52 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c7c:	2008      	movs	r0, #8
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f7ff ff4e 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c84:	e7d1      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000c86:	2010      	movs	r0, #16
 8000c88:	2101      	movs	r1, #1
 8000c8a:	f7ff ff49 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c8e:	2010      	movs	r0, #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	f7ff ff45 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c96:	e7c8      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000c98:	2020      	movs	r0, #32
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	f7ff ff40 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000ca0:	2020      	movs	r0, #32
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f7ff ff3c 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000ca8:	e7bf      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000caa:	2004      	movs	r0, #4
 8000cac:	2101      	movs	r1, #1
 8000cae:	f7ff ff2b 	bl	8000b08 <RCC_APB2PeriphResetCmd>
 8000cb2:	2004      	movs	r0, #4
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f7ff ff27 	bl	8000b08 <RCC_APB2PeriphResetCmd>
 8000cba:	e7b6      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000cbc:	2008      	movs	r0, #8
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	f7ff ff22 	bl	8000b08 <RCC_APB2PeriphResetCmd>
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f7ff ff1e 	bl	8000b08 <RCC_APB2PeriphResetCmd>
 8000ccc:	e7ad      	b.n	8000c2a <TIM_DeInit+0x3a>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	40000800 	.word	0x40000800
 8000cd8:	40000c00 	.word	0x40000c00
 8000cdc:	40001000 	.word	0x40001000
 8000ce0:	40001400 	.word	0x40001400
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40011000 	.word	0x40011000

08000cf0 <TIM_TimeBaseInit>:
 8000cf0:	6803      	ldr	r3, [r0, #0]
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	05d2      	lsls	r2, r2, #23
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d01a      	beq.n	8000d34 <TIM_TimeBaseInit+0x44>
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <TIM_TimeBaseInit+0x50>)
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d017      	beq.n	8000d34 <TIM_TimeBaseInit+0x44>
 8000d04:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <TIM_TimeBaseInit+0x54>)
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d014      	beq.n	8000d34 <TIM_TimeBaseInit+0x44>
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <TIM_TimeBaseInit+0x58>)
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d011      	beq.n	8000d34 <TIM_TimeBaseInit+0x44>
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <TIM_TimeBaseInit+0x5c>)
 8000d12:	4290      	cmp	r0, r2
 8000d14:	d006      	beq.n	8000d24 <TIM_TimeBaseInit+0x34>
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <TIM_TimeBaseInit+0x60>)
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	d003      	beq.n	8000d24 <TIM_TimeBaseInit+0x34>
 8000d1c:	4c0d      	ldr	r4, [pc, #52]	; (8000d54 <TIM_TimeBaseInit+0x64>)
 8000d1e:	890a      	ldrh	r2, [r1, #8]
 8000d20:	4023      	ands	r3, r4
 8000d22:	4313      	orrs	r3, r2
 8000d24:	8003      	strh	r3, [r0, #0]
 8000d26:	684b      	ldr	r3, [r1, #4]
 8000d28:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000d2a:	880b      	ldrh	r3, [r1, #0]
 8000d2c:	8503      	strh	r3, [r0, #40]	; 0x28
 8000d2e:	2301      	movs	r3, #1
 8000d30:	8283      	strh	r3, [r0, #20]
 8000d32:	bd10      	pop	{r4, pc}
 8000d34:	2270      	movs	r2, #112	; 0x70
 8000d36:	4393      	bics	r3, r2
 8000d38:	884a      	ldrh	r2, [r1, #2]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	e7e8      	b.n	8000d10 <TIM_TimeBaseInit+0x20>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40000800 	.word	0x40000800
 8000d48:	40000c00 	.word	0x40000c00
 8000d4c:	40001000 	.word	0x40001000
 8000d50:	40001400 	.word	0x40001400
 8000d54:	fffffcff 	.word	0xfffffcff

08000d58 <TIM_TimeBaseStructInit>:
 8000d58:	2301      	movs	r3, #1
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	6043      	str	r3, [r0, #4]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	8003      	strh	r3, [r0, #0]
 8000d62:	8103      	strh	r3, [r0, #8]
 8000d64:	8043      	strh	r3, [r0, #2]
 8000d66:	4770      	bx	lr

08000d68 <TIM_PrescalerConfig>:
 8000d68:	8501      	strh	r1, [r0, #40]	; 0x28
 8000d6a:	8282      	strh	r2, [r0, #20]
 8000d6c:	4770      	bx	lr
 8000d6e:	46c0      	nop			; (mov r8, r8)

08000d70 <TIM_CounterModeConfig>:
 8000d70:	6802      	ldr	r2, [r0, #0]
 8000d72:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <TIM_CounterModeConfig+0xc>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	4319      	orrs	r1, r3
 8000d78:	8001      	strh	r1, [r0, #0]
 8000d7a:	4770      	bx	lr
 8000d7c:	0000ff8f 	.word	0x0000ff8f

08000d80 <TIM_SetCounter>:
 8000d80:	6241      	str	r1, [r0, #36]	; 0x24
 8000d82:	4770      	bx	lr

08000d84 <TIM_SetAutoreload>:
 8000d84:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000d86:	4770      	bx	lr

08000d88 <TIM_GetCounter>:
 8000d88:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d8a:	4770      	bx	lr

08000d8c <TIM_GetPrescaler>:
 8000d8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000d8e:	b280      	uxth	r0, r0
 8000d90:	4770      	bx	lr
 8000d92:	46c0      	nop			; (mov r8, r8)

08000d94 <TIM_UpdateDisableConfig>:
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d104      	bne.n	8000da2 <TIM_UpdateDisableConfig+0xe>
 8000d98:	6802      	ldr	r2, [r0, #0]
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <TIM_UpdateDisableConfig+0x1c>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	8003      	strh	r3, [r0, #0]
 8000da0:	4770      	bx	lr
 8000da2:	6803      	ldr	r3, [r0, #0]
 8000da4:	2202      	movs	r2, #2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	8003      	strh	r3, [r0, #0]
 8000dac:	e7f8      	b.n	8000da0 <TIM_UpdateDisableConfig+0xc>
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	0000fffd 	.word	0x0000fffd

08000db4 <TIM_UpdateRequestConfig>:
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d104      	bne.n	8000dc2 <TIM_UpdateRequestConfig+0xe>
 8000db8:	6802      	ldr	r2, [r0, #0]
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <TIM_UpdateRequestConfig+0x1c>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	8003      	strh	r3, [r0, #0]
 8000dc0:	4770      	bx	lr
 8000dc2:	6803      	ldr	r3, [r0, #0]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	8003      	strh	r3, [r0, #0]
 8000dcc:	e7f8      	b.n	8000dc0 <TIM_UpdateRequestConfig+0xc>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	0000fffb 	.word	0x0000fffb

08000dd4 <TIM_ARRPreloadConfig>:
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d104      	bne.n	8000de2 <TIM_ARRPreloadConfig+0xe>
 8000dd8:	6802      	ldr	r2, [r0, #0]
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <TIM_ARRPreloadConfig+0x1c>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	8003      	strh	r3, [r0, #0]
 8000de0:	4770      	bx	lr
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	8003      	strh	r3, [r0, #0]
 8000dec:	e7f8      	b.n	8000de0 <TIM_ARRPreloadConfig+0xc>
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	0000ff7f 	.word	0x0000ff7f

08000df4 <TIM_SelectOnePulseMode>:
 8000df4:	6802      	ldr	r2, [r0, #0]
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <TIM_SelectOnePulseMode+0x14>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	8003      	strh	r3, [r0, #0]
 8000dfc:	6803      	ldr	r3, [r0, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4319      	orrs	r1, r3
 8000e02:	8001      	strh	r1, [r0, #0]
 8000e04:	4770      	bx	lr
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	0000fff7 	.word	0x0000fff7

08000e0c <TIM_SetClockDivision>:
 8000e0c:	6802      	ldr	r2, [r0, #0]
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <TIM_SetClockDivision+0x14>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	8003      	strh	r3, [r0, #0]
 8000e14:	6803      	ldr	r3, [r0, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	8001      	strh	r1, [r0, #0]
 8000e1c:	4770      	bx	lr
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	0000fcff 	.word	0x0000fcff

08000e24 <TIM_Cmd>:
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d104      	bne.n	8000e32 <TIM_Cmd+0xe>
 8000e28:	6802      	ldr	r2, [r0, #0]
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <TIM_Cmd+0x1c>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	8003      	strh	r3, [r0, #0]
 8000e30:	4770      	bx	lr
 8000e32:	6803      	ldr	r3, [r0, #0]
 8000e34:	2201      	movs	r2, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	8003      	strh	r3, [r0, #0]
 8000e3c:	e7f8      	b.n	8000e30 <TIM_Cmd+0xc>
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	0000fffe 	.word	0x0000fffe

08000e44 <TIM_OC1Init>:
 8000e44:	6a02      	ldr	r2, [r0, #32]
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <TIM_OC1Init+0x2c>)
 8000e48:	b530      	push	{r4, r5, lr}
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	8403      	strh	r3, [r0, #32]
 8000e4e:	6a04      	ldr	r4, [r0, #32]
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <TIM_OC1Init+0x30>)
 8000e52:	6982      	ldr	r2, [r0, #24]
 8000e54:	884d      	ldrh	r5, [r1, #2]
 8000e56:	401a      	ands	r2, r3
 8000e58:	880b      	ldrh	r3, [r1, #0]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <TIM_OC1Init+0x34>)
 8000e5e:	401c      	ands	r4, r3
 8000e60:	890b      	ldrh	r3, [r1, #8]
 8000e62:	6849      	ldr	r1, [r1, #4]
 8000e64:	432b      	orrs	r3, r5
 8000e66:	4323      	orrs	r3, r4
 8000e68:	6341      	str	r1, [r0, #52]	; 0x34
 8000e6a:	8302      	strh	r2, [r0, #24]
 8000e6c:	8403      	strh	r3, [r0, #32]
 8000e6e:	bd30      	pop	{r4, r5, pc}
 8000e70:	0000fffe 	.word	0x0000fffe
 8000e74:	0000ff8c 	.word	0x0000ff8c
 8000e78:	0000fffd 	.word	0x0000fffd

08000e7c <TIM_OC2Init>:
 8000e7c:	6a02      	ldr	r2, [r0, #32]
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <TIM_OC2Init+0x38>)
 8000e80:	b510      	push	{r4, lr}
 8000e82:	4013      	ands	r3, r2
 8000e84:	8403      	strh	r3, [r0, #32]
 8000e86:	6a04      	ldr	r4, [r0, #32]
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <TIM_OC2Init+0x3c>)
 8000e8a:	6982      	ldr	r2, [r0, #24]
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	880b      	ldrh	r3, [r1, #0]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	431a      	orrs	r2, r3
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <TIM_OC2Init+0x40>)
 8000e96:	b292      	uxth	r2, r2
 8000e98:	4023      	ands	r3, r4
 8000e9a:	890c      	ldrh	r4, [r1, #8]
 8000e9c:	0124      	lsls	r4, r4, #4
 8000e9e:	4323      	orrs	r3, r4
 8000ea0:	884c      	ldrh	r4, [r1, #2]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	0124      	lsls	r4, r4, #4
 8000ea6:	6849      	ldr	r1, [r1, #4]
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	6381      	str	r1, [r0, #56]	; 0x38
 8000eae:	8302      	strh	r2, [r0, #24]
 8000eb0:	8403      	strh	r3, [r0, #32]
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	0000ffef 	.word	0x0000ffef
 8000eb8:	00008fff 	.word	0x00008fff
 8000ebc:	0000ffdf 	.word	0x0000ffdf

08000ec0 <TIM_OC3Init>:
 8000ec0:	6a02      	ldr	r2, [r0, #32]
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <TIM_OC3Init+0x34>)
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	8403      	strh	r3, [r0, #32]
 8000eca:	6a04      	ldr	r4, [r0, #32]
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <TIM_OC3Init+0x38>)
 8000ece:	69c2      	ldr	r2, [r0, #28]
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	880b      	ldrh	r3, [r1, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <TIM_OC3Init+0x3c>)
 8000ed8:	4023      	ands	r3, r4
 8000eda:	890c      	ldrh	r4, [r1, #8]
 8000edc:	0224      	lsls	r4, r4, #8
 8000ede:	4323      	orrs	r3, r4
 8000ee0:	884c      	ldrh	r4, [r1, #2]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	0224      	lsls	r4, r4, #8
 8000ee6:	6849      	ldr	r1, [r1, #4]
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000eee:	8382      	strh	r2, [r0, #28]
 8000ef0:	8403      	strh	r3, [r0, #32]
 8000ef2:	bd10      	pop	{r4, pc}
 8000ef4:	0000feff 	.word	0x0000feff
 8000ef8:	0000ff8f 	.word	0x0000ff8f
 8000efc:	0000fdff 	.word	0x0000fdff

08000f00 <TIM_OC4Init>:
 8000f00:	6a02      	ldr	r2, [r0, #32]
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <TIM_OC4Init+0x38>)
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4013      	ands	r3, r2
 8000f08:	8403      	strh	r3, [r0, #32]
 8000f0a:	6a04      	ldr	r4, [r0, #32]
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <TIM_OC4Init+0x3c>)
 8000f0e:	69c2      	ldr	r2, [r0, #28]
 8000f10:	401a      	ands	r2, r3
 8000f12:	880b      	ldrh	r3, [r1, #0]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	431a      	orrs	r2, r3
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <TIM_OC4Init+0x40>)
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	4023      	ands	r3, r4
 8000f1e:	890c      	ldrh	r4, [r1, #8]
 8000f20:	0324      	lsls	r4, r4, #12
 8000f22:	4323      	orrs	r3, r4
 8000f24:	884c      	ldrh	r4, [r1, #2]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	0324      	lsls	r4, r4, #12
 8000f2a:	6849      	ldr	r1, [r1, #4]
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	6401      	str	r1, [r0, #64]	; 0x40
 8000f32:	8382      	strh	r2, [r0, #28]
 8000f34:	8403      	strh	r3, [r0, #32]
 8000f36:	bd10      	pop	{r4, pc}
 8000f38:	0000efff 	.word	0x0000efff
 8000f3c:	00008fff 	.word	0x00008fff
 8000f40:	0000dfff 	.word	0x0000dfff

08000f44 <TIM_OCStructInit>:
 8000f44:	2300      	movs	r3, #0
 8000f46:	8003      	strh	r3, [r0, #0]
 8000f48:	8043      	strh	r3, [r0, #2]
 8000f4a:	6043      	str	r3, [r0, #4]
 8000f4c:	8103      	strh	r3, [r0, #8]
 8000f4e:	4770      	bx	lr

08000f50 <TIM_SelectOCxM>:
 8000f50:	b530      	push	{r4, r5, lr}
 8000f52:	6a03      	ldr	r3, [r0, #32]
 8000f54:	2401      	movs	r4, #1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	408c      	lsls	r4, r1
 8000f5a:	43a3      	bics	r3, r4
 8000f5c:	1c05      	adds	r5, r0, #0
 8000f5e:	8403      	strh	r3, [r0, #32]
 8000f60:	2308      	movs	r3, #8
 8000f62:	1c08      	adds	r0, r1, #0
 8000f64:	3518      	adds	r5, #24
 8000f66:	4398      	bics	r0, r3
 8000f68:	d00d      	beq.n	8000f86 <TIM_SelectOCxM+0x36>
 8000f6a:	3904      	subs	r1, #4
 8000f6c:	b289      	uxth	r1, r1
 8000f6e:	0849      	lsrs	r1, r1, #1
 8000f70:	1949      	adds	r1, r1, r5
 8000f72:	6808      	ldr	r0, [r1, #0]
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <TIM_SelectOCxM+0x4c>)
 8000f76:	0212      	lsls	r2, r2, #8
 8000f78:	4003      	ands	r3, r0
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	680b      	ldr	r3, [r1, #0]
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	431a      	orrs	r2, r3
 8000f82:	600a      	str	r2, [r1, #0]
 8000f84:	bd30      	pop	{r4, r5, pc}
 8000f86:	0849      	lsrs	r1, r1, #1
 8000f88:	1869      	adds	r1, r5, r1
 8000f8a:	680b      	ldr	r3, [r1, #0]
 8000f8c:	2070      	movs	r0, #112	; 0x70
 8000f8e:	4383      	bics	r3, r0
 8000f90:	600b      	str	r3, [r1, #0]
 8000f92:	680b      	ldr	r3, [r1, #0]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	600a      	str	r2, [r1, #0]
 8000f98:	e7f4      	b.n	8000f84 <TIM_SelectOCxM+0x34>
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	ffff8fff 	.word	0xffff8fff

08000fa0 <TIM_SetCompare1>:
 8000fa0:	6341      	str	r1, [r0, #52]	; 0x34
 8000fa2:	4770      	bx	lr

08000fa4 <TIM_SetCompare2>:
 8000fa4:	6381      	str	r1, [r0, #56]	; 0x38
 8000fa6:	4770      	bx	lr

08000fa8 <TIM_SetCompare3>:
 8000fa8:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000faa:	4770      	bx	lr

08000fac <TIM_SetCompare4>:
 8000fac:	6401      	str	r1, [r0, #64]	; 0x40
 8000fae:	4770      	bx	lr

08000fb0 <TIM_ForcedOC1Config>:
 8000fb0:	6982      	ldr	r2, [r0, #24]
 8000fb2:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <TIM_ForcedOC1Config+0xc>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	8301      	strh	r1, [r0, #24]
 8000fba:	4770      	bx	lr
 8000fbc:	0000ff8f 	.word	0x0000ff8f

08000fc0 <TIM_ForcedOC2Config>:
 8000fc0:	6982      	ldr	r2, [r0, #24]
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <TIM_ForcedOC2Config+0x14>)
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	020b      	lsls	r3, r1, #8
 8000fc8:	1c11      	adds	r1, r2, #0
 8000fca:	4319      	orrs	r1, r3
 8000fcc:	b289      	uxth	r1, r1
 8000fce:	8301      	strh	r1, [r0, #24]
 8000fd0:	4770      	bx	lr
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	00008fff 	.word	0x00008fff

08000fd8 <TIM_ForcedOC3Config>:
 8000fd8:	69c2      	ldr	r2, [r0, #28]
 8000fda:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <TIM_ForcedOC3Config+0xc>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	4319      	orrs	r1, r3
 8000fe0:	8381      	strh	r1, [r0, #28]
 8000fe2:	4770      	bx	lr
 8000fe4:	0000ff8f 	.word	0x0000ff8f

08000fe8 <TIM_ForcedOC4Config>:
 8000fe8:	69c2      	ldr	r2, [r0, #28]
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <TIM_ForcedOC4Config+0x14>)
 8000fec:	401a      	ands	r2, r3
 8000fee:	020b      	lsls	r3, r1, #8
 8000ff0:	1c11      	adds	r1, r2, #0
 8000ff2:	4319      	orrs	r1, r3
 8000ff4:	b289      	uxth	r1, r1
 8000ff6:	8381      	strh	r1, [r0, #28]
 8000ff8:	4770      	bx	lr
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	00008fff 	.word	0x00008fff

08001000 <TIM_OC1PreloadConfig>:
 8001000:	6982      	ldr	r2, [r0, #24]
 8001002:	4b02      	ldr	r3, [pc, #8]	; (800100c <TIM_OC1PreloadConfig+0xc>)
 8001004:	4013      	ands	r3, r2
 8001006:	4319      	orrs	r1, r3
 8001008:	8301      	strh	r1, [r0, #24]
 800100a:	4770      	bx	lr
 800100c:	0000fff7 	.word	0x0000fff7

08001010 <TIM_OC2PreloadConfig>:
 8001010:	6982      	ldr	r2, [r0, #24]
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <TIM_OC2PreloadConfig+0x14>)
 8001014:	401a      	ands	r2, r3
 8001016:	020b      	lsls	r3, r1, #8
 8001018:	1c11      	adds	r1, r2, #0
 800101a:	4319      	orrs	r1, r3
 800101c:	b289      	uxth	r1, r1
 800101e:	8301      	strh	r1, [r0, #24]
 8001020:	4770      	bx	lr
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	0000f7ff 	.word	0x0000f7ff

08001028 <TIM_OC3PreloadConfig>:
 8001028:	69c2      	ldr	r2, [r0, #28]
 800102a:	4b02      	ldr	r3, [pc, #8]	; (8001034 <TIM_OC3PreloadConfig+0xc>)
 800102c:	4013      	ands	r3, r2
 800102e:	4319      	orrs	r1, r3
 8001030:	8381      	strh	r1, [r0, #28]
 8001032:	4770      	bx	lr
 8001034:	0000fff7 	.word	0x0000fff7

08001038 <TIM_OC4PreloadConfig>:
 8001038:	69c2      	ldr	r2, [r0, #28]
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <TIM_OC4PreloadConfig+0x14>)
 800103c:	401a      	ands	r2, r3
 800103e:	020b      	lsls	r3, r1, #8
 8001040:	1c11      	adds	r1, r2, #0
 8001042:	4319      	orrs	r1, r3
 8001044:	b289      	uxth	r1, r1
 8001046:	8381      	strh	r1, [r0, #28]
 8001048:	4770      	bx	lr
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	0000f7ff 	.word	0x0000f7ff

08001050 <TIM_OC1FastConfig>:
 8001050:	6982      	ldr	r2, [r0, #24]
 8001052:	4b02      	ldr	r3, [pc, #8]	; (800105c <TIM_OC1FastConfig+0xc>)
 8001054:	4013      	ands	r3, r2
 8001056:	4319      	orrs	r1, r3
 8001058:	8301      	strh	r1, [r0, #24]
 800105a:	4770      	bx	lr
 800105c:	0000fffb 	.word	0x0000fffb

08001060 <TIM_OC2FastConfig>:
 8001060:	6982      	ldr	r2, [r0, #24]
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <TIM_OC2FastConfig+0x14>)
 8001064:	401a      	ands	r2, r3
 8001066:	020b      	lsls	r3, r1, #8
 8001068:	1c11      	adds	r1, r2, #0
 800106a:	4319      	orrs	r1, r3
 800106c:	b289      	uxth	r1, r1
 800106e:	8301      	strh	r1, [r0, #24]
 8001070:	4770      	bx	lr
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	0000fbff 	.word	0x0000fbff

08001078 <TIM_OC3FastConfig>:
 8001078:	69c2      	ldr	r2, [r0, #28]
 800107a:	4b02      	ldr	r3, [pc, #8]	; (8001084 <TIM_OC3FastConfig+0xc>)
 800107c:	4013      	ands	r3, r2
 800107e:	4319      	orrs	r1, r3
 8001080:	8381      	strh	r1, [r0, #28]
 8001082:	4770      	bx	lr
 8001084:	0000fffb 	.word	0x0000fffb

08001088 <TIM_OC4FastConfig>:
 8001088:	69c2      	ldr	r2, [r0, #28]
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <TIM_OC4FastConfig+0x14>)
 800108c:	401a      	ands	r2, r3
 800108e:	020b      	lsls	r3, r1, #8
 8001090:	1c11      	adds	r1, r2, #0
 8001092:	4319      	orrs	r1, r3
 8001094:	b289      	uxth	r1, r1
 8001096:	8381      	strh	r1, [r0, #28]
 8001098:	4770      	bx	lr
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	0000fbff 	.word	0x0000fbff

080010a0 <TIM_ClearOC1Ref>:
 80010a0:	6982      	ldr	r2, [r0, #24]
 80010a2:	4b02      	ldr	r3, [pc, #8]	; (80010ac <TIM_ClearOC1Ref+0xc>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	4319      	orrs	r1, r3
 80010a8:	8301      	strh	r1, [r0, #24]
 80010aa:	4770      	bx	lr
 80010ac:	0000ff7f 	.word	0x0000ff7f

080010b0 <TIM_ClearOC2Ref>:
 80010b0:	6983      	ldr	r3, [r0, #24]
 80010b2:	0209      	lsls	r1, r1, #8
 80010b4:	045b      	lsls	r3, r3, #17
 80010b6:	0c5b      	lsrs	r3, r3, #17
 80010b8:	4319      	orrs	r1, r3
 80010ba:	b289      	uxth	r1, r1
 80010bc:	8301      	strh	r1, [r0, #24]
 80010be:	4770      	bx	lr

080010c0 <TIM_ClearOC3Ref>:
 80010c0:	69c2      	ldr	r2, [r0, #28]
 80010c2:	4b02      	ldr	r3, [pc, #8]	; (80010cc <TIM_ClearOC3Ref+0xc>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	4319      	orrs	r1, r3
 80010c8:	8381      	strh	r1, [r0, #28]
 80010ca:	4770      	bx	lr
 80010cc:	0000ff7f 	.word	0x0000ff7f

080010d0 <TIM_ClearOC4Ref>:
 80010d0:	69c3      	ldr	r3, [r0, #28]
 80010d2:	0209      	lsls	r1, r1, #8
 80010d4:	045b      	lsls	r3, r3, #17
 80010d6:	0c5b      	lsrs	r3, r3, #17
 80010d8:	4319      	orrs	r1, r3
 80010da:	b289      	uxth	r1, r1
 80010dc:	8381      	strh	r1, [r0, #28]
 80010de:	4770      	bx	lr

080010e0 <TIM_OC1PolarityConfig>:
 80010e0:	6a02      	ldr	r2, [r0, #32]
 80010e2:	4b02      	ldr	r3, [pc, #8]	; (80010ec <TIM_OC1PolarityConfig+0xc>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	4319      	orrs	r1, r3
 80010e8:	8401      	strh	r1, [r0, #32]
 80010ea:	4770      	bx	lr
 80010ec:	0000fffd 	.word	0x0000fffd

080010f0 <TIM_OC2PolarityConfig>:
 80010f0:	6a02      	ldr	r2, [r0, #32]
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <TIM_OC2PolarityConfig+0x14>)
 80010f4:	401a      	ands	r2, r3
 80010f6:	010b      	lsls	r3, r1, #4
 80010f8:	1c11      	adds	r1, r2, #0
 80010fa:	4319      	orrs	r1, r3
 80010fc:	b289      	uxth	r1, r1
 80010fe:	8401      	strh	r1, [r0, #32]
 8001100:	4770      	bx	lr
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	0000ffdf 	.word	0x0000ffdf

08001108 <TIM_OC3PolarityConfig>:
 8001108:	6a02      	ldr	r2, [r0, #32]
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <TIM_OC3PolarityConfig+0x14>)
 800110c:	401a      	ands	r2, r3
 800110e:	020b      	lsls	r3, r1, #8
 8001110:	1c11      	adds	r1, r2, #0
 8001112:	4319      	orrs	r1, r3
 8001114:	b289      	uxth	r1, r1
 8001116:	8401      	strh	r1, [r0, #32]
 8001118:	4770      	bx	lr
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	0000fdff 	.word	0x0000fdff

08001120 <TIM_OC4PolarityConfig>:
 8001120:	6a02      	ldr	r2, [r0, #32]
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <TIM_OC4PolarityConfig+0x14>)
 8001124:	401a      	ands	r2, r3
 8001126:	030b      	lsls	r3, r1, #12
 8001128:	1c11      	adds	r1, r2, #0
 800112a:	4319      	orrs	r1, r3
 800112c:	b289      	uxth	r1, r1
 800112e:	8401      	strh	r1, [r0, #32]
 8001130:	4770      	bx	lr
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	0000dfff 	.word	0x0000dfff

08001138 <TIM_SelectOCREFClear>:
 8001138:	6882      	ldr	r2, [r0, #8]
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <TIM_SelectOCREFClear+0x14>)
 800113c:	4013      	ands	r3, r2
 800113e:	8103      	strh	r3, [r0, #8]
 8001140:	6883      	ldr	r3, [r0, #8]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4319      	orrs	r1, r3
 8001146:	8101      	strh	r1, [r0, #8]
 8001148:	4770      	bx	lr
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	0000fff7 	.word	0x0000fff7

08001150 <TIM_CCxCmd>:
 8001150:	6a03      	ldr	r3, [r0, #32]
 8001152:	b510      	push	{r4, lr}
 8001154:	2401      	movs	r4, #1
 8001156:	408c      	lsls	r4, r1
 8001158:	b29b      	uxth	r3, r3
 800115a:	43a3      	bics	r3, r4
 800115c:	8403      	strh	r3, [r0, #32]
 800115e:	6a03      	ldr	r3, [r0, #32]
 8001160:	408a      	lsls	r2, r1
 8001162:	1c11      	adds	r1, r2, #0
 8001164:	4319      	orrs	r1, r3
 8001166:	b289      	uxth	r1, r1
 8001168:	8401      	strh	r1, [r0, #32]
 800116a:	bd10      	pop	{r4, pc}

0800116c <TIM_ICInit>:
 800116c:	880b      	ldrh	r3, [r1, #0]
 800116e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001170:	2b00      	cmp	r3, #0
 8001172:	d02b      	beq.n	80011cc <TIM_ICInit+0x60>
 8001174:	2b04      	cmp	r3, #4
 8001176:	d04a      	beq.n	800120e <TIM_ICInit+0xa2>
 8001178:	2b08      	cmp	r3, #8
 800117a:	d100      	bne.n	800117e <TIM_ICInit+0x12>
 800117c:	e06d      	b.n	800125a <TIM_ICInit+0xee>
 800117e:	6a05      	ldr	r5, [r0, #32]
 8001180:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <TIM_ICInit+0x134>)
 8001182:	884b      	ldrh	r3, [r1, #2]
 8001184:	402a      	ands	r2, r5
 8001186:	888e      	ldrh	r6, [r1, #4]
 8001188:	890c      	ldrh	r4, [r1, #8]
 800118a:	8402      	strh	r2, [r0, #32]
 800118c:	69c7      	ldr	r7, [r0, #28]
 800118e:	4a45      	ldr	r2, [pc, #276]	; (80012a4 <TIM_ICInit+0x138>)
 8001190:	0236      	lsls	r6, r6, #8
 8001192:	403a      	ands	r2, r7
 8001194:	4332      	orrs	r2, r6
 8001196:	0324      	lsls	r4, r4, #12
 8001198:	b292      	uxth	r2, r2
 800119a:	6a05      	ldr	r5, [r0, #32]
 800119c:	4322      	orrs	r2, r4
 800119e:	4c42      	ldr	r4, [pc, #264]	; (80012a8 <TIM_ICInit+0x13c>)
 80011a0:	031b      	lsls	r3, r3, #12
 80011a2:	402c      	ands	r4, r5
 80011a4:	431c      	orrs	r4, r3
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	b2a4      	uxth	r4, r4
 80011aa:	015b      	lsls	r3, r3, #5
 80011ac:	b292      	uxth	r2, r2
 80011ae:	4323      	orrs	r3, r4
 80011b0:	8382      	strh	r2, [r0, #28]
 80011b2:	8403      	strh	r3, [r0, #32]
 80011b4:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <TIM_ICInit+0x140>)
 80011b6:	88cb      	ldrh	r3, [r1, #6]
 80011b8:	69c1      	ldr	r1, [r0, #28]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	400a      	ands	r2, r1
 80011be:	8382      	strh	r2, [r0, #28]
 80011c0:	69c2      	ldr	r2, [r0, #28]
 80011c2:	b292      	uxth	r2, r2
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	8383      	strh	r3, [r0, #28]
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	6a04      	ldr	r4, [r0, #32]
 80011ce:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <TIM_ICInit+0x144>)
 80011d0:	888b      	ldrh	r3, [r1, #4]
 80011d2:	4022      	ands	r2, r4
 80011d4:	884d      	ldrh	r5, [r1, #2]
 80011d6:	890e      	ldrh	r6, [r1, #8]
 80011d8:	8402      	strh	r2, [r0, #32]
 80011da:	6987      	ldr	r7, [r0, #24]
 80011dc:	4a35      	ldr	r2, [pc, #212]	; (80012b4 <TIM_ICInit+0x148>)
 80011de:	0136      	lsls	r6, r6, #4
 80011e0:	403a      	ands	r2, r7
 80011e2:	4332      	orrs	r2, r6
 80011e4:	b292      	uxth	r2, r2
 80011e6:	6a04      	ldr	r4, [r0, #32]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <TIM_ICInit+0x14c>)
 80011ec:	8302      	strh	r2, [r0, #24]
 80011ee:	401c      	ands	r4, r3
 80011f0:	2301      	movs	r3, #1
 80011f2:	432b      	orrs	r3, r5
 80011f4:	4323      	orrs	r3, r4
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	8403      	strh	r3, [r0, #32]
 80011fa:	88ca      	ldrh	r2, [r1, #6]
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <TIM_ICInit+0x150>)
 80011fe:	6981      	ldr	r1, [r0, #24]
 8001200:	400b      	ands	r3, r1
 8001202:	8303      	strh	r3, [r0, #24]
 8001204:	6983      	ldr	r3, [r0, #24]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	8303      	strh	r3, [r0, #24]
 800120c:	e7dd      	b.n	80011ca <TIM_ICInit+0x5e>
 800120e:	6a05      	ldr	r5, [r0, #32]
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <TIM_ICInit+0x154>)
 8001212:	884c      	ldrh	r4, [r1, #2]
 8001214:	402a      	ands	r2, r5
 8001216:	888b      	ldrh	r3, [r1, #4]
 8001218:	890e      	ldrh	r6, [r1, #8]
 800121a:	8402      	strh	r2, [r0, #32]
 800121c:	6987      	ldr	r7, [r0, #24]
 800121e:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <TIM_ICInit+0x138>)
 8001220:	0336      	lsls	r6, r6, #12
 8001222:	403a      	ands	r2, r7
 8001224:	4332      	orrs	r2, r6
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b292      	uxth	r2, r2
 800122a:	6a05      	ldr	r5, [r0, #32]
 800122c:	431a      	orrs	r2, r3
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <TIM_ICInit+0x158>)
 8001230:	0124      	lsls	r4, r4, #4
 8001232:	402b      	ands	r3, r5
 8001234:	4323      	orrs	r3, r4
 8001236:	b29b      	uxth	r3, r3
 8001238:	2410      	movs	r4, #16
 800123a:	b292      	uxth	r2, r2
 800123c:	4323      	orrs	r3, r4
 800123e:	8302      	strh	r2, [r0, #24]
 8001240:	8403      	strh	r3, [r0, #32]
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <TIM_ICInit+0x140>)
 8001244:	88cb      	ldrh	r3, [r1, #6]
 8001246:	6981      	ldr	r1, [r0, #24]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	400a      	ands	r2, r1
 800124c:	8302      	strh	r2, [r0, #24]
 800124e:	6982      	ldr	r2, [r0, #24]
 8001250:	b292      	uxth	r2, r2
 8001252:	4313      	orrs	r3, r2
 8001254:	b29b      	uxth	r3, r3
 8001256:	8303      	strh	r3, [r0, #24]
 8001258:	e7b7      	b.n	80011ca <TIM_ICInit+0x5e>
 800125a:	6a05      	ldr	r5, [r0, #32]
 800125c:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <TIM_ICInit+0x15c>)
 800125e:	888c      	ldrh	r4, [r1, #4]
 8001260:	402a      	ands	r2, r5
 8001262:	884b      	ldrh	r3, [r1, #2]
 8001264:	890e      	ldrh	r6, [r1, #8]
 8001266:	8402      	strh	r2, [r0, #32]
 8001268:	69c7      	ldr	r7, [r0, #28]
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <TIM_ICInit+0x148>)
 800126c:	0136      	lsls	r6, r6, #4
 800126e:	403a      	ands	r2, r7
 8001270:	4332      	orrs	r2, r6
 8001272:	b292      	uxth	r2, r2
 8001274:	6a05      	ldr	r5, [r0, #32]
 8001276:	4322      	orrs	r2, r4
 8001278:	4c14      	ldr	r4, [pc, #80]	; (80012cc <TIM_ICInit+0x160>)
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	402c      	ands	r4, r5
 800127e:	431c      	orrs	r4, r3
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	b2a4      	uxth	r4, r4
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4323      	orrs	r3, r4
 8001288:	8382      	strh	r2, [r0, #28]
 800128a:	8403      	strh	r3, [r0, #32]
 800128c:	88ca      	ldrh	r2, [r1, #6]
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <TIM_ICInit+0x150>)
 8001290:	69c1      	ldr	r1, [r0, #28]
 8001292:	400b      	ands	r3, r1
 8001294:	8383      	strh	r3, [r0, #28]
 8001296:	69c3      	ldr	r3, [r0, #28]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	8383      	strh	r3, [r0, #28]
 800129e:	e794      	b.n	80011ca <TIM_ICInit+0x5e>
 80012a0:	0000efff 	.word	0x0000efff
 80012a4:	00000cff 	.word	0x00000cff
 80012a8:	00005fff 	.word	0x00005fff
 80012ac:	0000f3ff 	.word	0x0000f3ff
 80012b0:	0000fffe 	.word	0x0000fffe
 80012b4:	0000ff0c 	.word	0x0000ff0c
 80012b8:	0000fff5 	.word	0x0000fff5
 80012bc:	0000fff3 	.word	0x0000fff3
 80012c0:	0000ffef 	.word	0x0000ffef
 80012c4:	0000ff5f 	.word	0x0000ff5f
 80012c8:	0000feff 	.word	0x0000feff
 80012cc:	0000f5ff 	.word	0x0000f5ff

080012d0 <TIM_ICStructInit>:
 80012d0:	2300      	movs	r3, #0
 80012d2:	2201      	movs	r2, #1
 80012d4:	8003      	strh	r3, [r0, #0]
 80012d6:	8043      	strh	r3, [r0, #2]
 80012d8:	8082      	strh	r2, [r0, #4]
 80012da:	80c3      	strh	r3, [r0, #6]
 80012dc:	8103      	strh	r3, [r0, #8]
 80012de:	4770      	bx	lr

080012e0 <TIM_PWMIConfig>:
 80012e0:	884b      	ldrh	r3, [r1, #2]
 80012e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e4:	425c      	negs	r4, r3
 80012e6:	415c      	adcs	r4, r3
 80012e8:	0062      	lsls	r2, r4, #1
 80012ea:	4657      	mov	r7, sl
 80012ec:	4692      	mov	sl, r2
 80012ee:	888a      	ldrh	r2, [r1, #4]
 80012f0:	464e      	mov	r6, r9
 80012f2:	4645      	mov	r5, r8
 80012f4:	b4e0      	push	{r5, r6, r7}
 80012f6:	1e55      	subs	r5, r2, #1
 80012f8:	1e6e      	subs	r6, r5, #1
 80012fa:	41b5      	sbcs	r5, r6
 80012fc:	2602      	movs	r6, #2
 80012fe:	1b75      	subs	r5, r6, r5
 8001300:	880e      	ldrh	r6, [r1, #0]
 8001302:	2e00      	cmp	r6, #0
 8001304:	d04e      	beq.n	80013a4 <TIM_PWMIConfig+0xc4>
 8001306:	6a07      	ldr	r7, [r0, #32]
 8001308:	4e4f      	ldr	r6, [pc, #316]	; (8001448 <TIM_PWMIConfig+0x168>)
 800130a:	46bc      	mov	ip, r7
 800130c:	1c37      	adds	r7, r6, #0
 800130e:	4666      	mov	r6, ip
 8001310:	4037      	ands	r7, r6
 8001312:	890c      	ldrh	r4, [r1, #8]
 8001314:	8407      	strh	r7, [r0, #32]
 8001316:	6986      	ldr	r6, [r0, #24]
 8001318:	6a07      	ldr	r7, [r0, #32]
 800131a:	46b0      	mov	r8, r6
 800131c:	4e4b      	ldr	r6, [pc, #300]	; (800144c <TIM_PWMIConfig+0x16c>)
 800131e:	46bc      	mov	ip, r7
 8001320:	4647      	mov	r7, r8
 8001322:	4037      	ands	r7, r6
 8001324:	46b8      	mov	r8, r7
 8001326:	4646      	mov	r6, r8
 8001328:	0327      	lsls	r7, r4, #12
 800132a:	4337      	orrs	r7, r6
 800132c:	b2be      	uxth	r6, r7
 800132e:	4f48      	ldr	r7, [pc, #288]	; (8001450 <TIM_PWMIConfig+0x170>)
 8001330:	0212      	lsls	r2, r2, #8
 8001332:	4332      	orrs	r2, r6
 8001334:	011e      	lsls	r6, r3, #4
 8001336:	1c3b      	adds	r3, r7, #0
 8001338:	4667      	mov	r7, ip
 800133a:	403b      	ands	r3, r7
 800133c:	4333      	orrs	r3, r6
 800133e:	b29b      	uxth	r3, r3
 8001340:	2610      	movs	r6, #16
 8001342:	4333      	orrs	r3, r6
 8001344:	b292      	uxth	r2, r2
 8001346:	8302      	strh	r2, [r0, #24]
 8001348:	8403      	strh	r3, [r0, #32]
 800134a:	4a42      	ldr	r2, [pc, #264]	; (8001454 <TIM_PWMIConfig+0x174>)
 800134c:	88cb      	ldrh	r3, [r1, #6]
 800134e:	6981      	ldr	r1, [r0, #24]
 8001350:	4657      	mov	r7, sl
 8001352:	400a      	ands	r2, r1
 8001354:	8302      	strh	r2, [r0, #24]
 8001356:	6982      	ldr	r2, [r0, #24]
 8001358:	0219      	lsls	r1, r3, #8
 800135a:	b292      	uxth	r2, r2
 800135c:	430a      	orrs	r2, r1
 800135e:	b292      	uxth	r2, r2
 8001360:	8302      	strh	r2, [r0, #24]
 8001362:	6a01      	ldr	r1, [r0, #32]
 8001364:	4a3c      	ldr	r2, [pc, #240]	; (8001458 <TIM_PWMIConfig+0x178>)
 8001366:	400a      	ands	r2, r1
 8001368:	8402      	strh	r2, [r0, #32]
 800136a:	6986      	ldr	r6, [r0, #24]
 800136c:	0122      	lsls	r2, r4, #4
 800136e:	4c3b      	ldr	r4, [pc, #236]	; (800145c <TIM_PWMIConfig+0x17c>)
 8001370:	6a01      	ldr	r1, [r0, #32]
 8001372:	4034      	ands	r4, r6
 8001374:	4314      	orrs	r4, r2
 8001376:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <TIM_PWMIConfig+0x180>)
 8001378:	b2a4      	uxth	r4, r4
 800137a:	400a      	ands	r2, r1
 800137c:	2101      	movs	r1, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	4325      	orrs	r5, r4
 8001382:	4317      	orrs	r7, r2
 8001384:	b2ad      	uxth	r5, r5
 8001386:	8305      	strh	r5, [r0, #24]
 8001388:	8407      	strh	r7, [r0, #32]
 800138a:	6981      	ldr	r1, [r0, #24]
 800138c:	4a35      	ldr	r2, [pc, #212]	; (8001464 <TIM_PWMIConfig+0x184>)
 800138e:	400a      	ands	r2, r1
 8001390:	8302      	strh	r2, [r0, #24]
 8001392:	6982      	ldr	r2, [r0, #24]
 8001394:	b292      	uxth	r2, r2
 8001396:	4313      	orrs	r3, r2
 8001398:	8303      	strh	r3, [r0, #24]
 800139a:	bc1c      	pop	{r2, r3, r4}
 800139c:	4690      	mov	r8, r2
 800139e:	4699      	mov	r9, r3
 80013a0:	46a2      	mov	sl, r4
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	890e      	ldrh	r6, [r1, #8]
 80013a6:	6a07      	ldr	r7, [r0, #32]
 80013a8:	46b2      	mov	sl, r6
 80013aa:	4e2b      	ldr	r6, [pc, #172]	; (8001458 <TIM_PWMIConfig+0x178>)
 80013ac:	46bc      	mov	ip, r7
 80013ae:	1c37      	adds	r7, r6, #0
 80013b0:	4666      	mov	r6, ip
 80013b2:	4037      	ands	r7, r6
 80013b4:	8407      	strh	r7, [r0, #32]
 80013b6:	6986      	ldr	r6, [r0, #24]
 80013b8:	6a07      	ldr	r7, [r0, #32]
 80013ba:	46b0      	mov	r8, r6
 80013bc:	4e27      	ldr	r6, [pc, #156]	; (800145c <TIM_PWMIConfig+0x17c>)
 80013be:	46bc      	mov	ip, r7
 80013c0:	4647      	mov	r7, r8
 80013c2:	4037      	ands	r7, r6
 80013c4:	46b8      	mov	r8, r7
 80013c6:	4657      	mov	r7, sl
 80013c8:	4646      	mov	r6, r8
 80013ca:	013f      	lsls	r7, r7, #4
 80013cc:	4337      	orrs	r7, r6
 80013ce:	b2bf      	uxth	r7, r7
 80013d0:	433a      	orrs	r2, r7
 80013d2:	2601      	movs	r6, #1
 80013d4:	4f22      	ldr	r7, [pc, #136]	; (8001460 <TIM_PWMIConfig+0x180>)
 80013d6:	4690      	mov	r8, r2
 80013d8:	4662      	mov	r2, ip
 80013da:	46b4      	mov	ip, r6
 80013dc:	4017      	ands	r7, r2
 80013de:	4662      	mov	r2, ip
 80013e0:	4313      	orrs	r3, r2
 80013e2:	433b      	orrs	r3, r7
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4646      	mov	r6, r8
 80013e8:	8306      	strh	r6, [r0, #24]
 80013ea:	8403      	strh	r3, [r0, #32]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <TIM_PWMIConfig+0x184>)
 80013ee:	88cb      	ldrh	r3, [r1, #6]
 80013f0:	6981      	ldr	r1, [r0, #24]
 80013f2:	4656      	mov	r6, sl
 80013f4:	400a      	ands	r2, r1
 80013f6:	8302      	strh	r2, [r0, #24]
 80013f8:	6982      	ldr	r2, [r0, #24]
 80013fa:	022d      	lsls	r5, r5, #8
 80013fc:	b292      	uxth	r2, r2
 80013fe:	431a      	orrs	r2, r3
 8001400:	8302      	strh	r2, [r0, #24]
 8001402:	6a01      	ldr	r1, [r0, #32]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <TIM_PWMIConfig+0x168>)
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	400a      	ands	r2, r1
 800140a:	8402      	strh	r2, [r0, #32]
 800140c:	6987      	ldr	r7, [r0, #24]
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <TIM_PWMIConfig+0x16c>)
 8001410:	6a01      	ldr	r1, [r0, #32]
 8001412:	4017      	ands	r7, r2
 8001414:	0332      	lsls	r2, r6, #12
 8001416:	1c3e      	adds	r6, r7, #0
 8001418:	4316      	orrs	r6, r2
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <TIM_PWMIConfig+0x170>)
 800141c:	b2b6      	uxth	r6, r6
 800141e:	4011      	ands	r1, r2
 8001420:	2210      	movs	r2, #16
 8001422:	4311      	orrs	r1, r2
 8001424:	4335      	orrs	r5, r6
 8001426:	0162      	lsls	r2, r4, #5
 8001428:	1c0c      	adds	r4, r1, #0
 800142a:	4314      	orrs	r4, r2
 800142c:	b2ad      	uxth	r5, r5
 800142e:	8305      	strh	r5, [r0, #24]
 8001430:	8404      	strh	r4, [r0, #32]
 8001432:	6981      	ldr	r1, [r0, #24]
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <TIM_PWMIConfig+0x174>)
 8001436:	400a      	ands	r2, r1
 8001438:	8302      	strh	r2, [r0, #24]
 800143a:	6982      	ldr	r2, [r0, #24]
 800143c:	b292      	uxth	r2, r2
 800143e:	4313      	orrs	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	8303      	strh	r3, [r0, #24]
 8001444:	e7a9      	b.n	800139a <TIM_PWMIConfig+0xba>
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	0000ffef 	.word	0x0000ffef
 800144c:	00000cff 	.word	0x00000cff
 8001450:	0000ff5f 	.word	0x0000ff5f
 8001454:	0000f3ff 	.word	0x0000f3ff
 8001458:	0000fffe 	.word	0x0000fffe
 800145c:	0000ff0c 	.word	0x0000ff0c
 8001460:	0000fff5 	.word	0x0000fff5
 8001464:	0000fff3 	.word	0x0000fff3

08001468 <TIM_GetCapture1>:
 8001468:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800146a:	4770      	bx	lr

0800146c <TIM_GetCapture2>:
 800146c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800146e:	4770      	bx	lr

08001470 <TIM_GetCapture3>:
 8001470:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001472:	4770      	bx	lr

08001474 <TIM_GetCapture4>:
 8001474:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001476:	4770      	bx	lr

08001478 <TIM_SetIC1Prescaler>:
 8001478:	6982      	ldr	r2, [r0, #24]
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <TIM_SetIC1Prescaler+0x14>)
 800147c:	4013      	ands	r3, r2
 800147e:	8303      	strh	r3, [r0, #24]
 8001480:	6983      	ldr	r3, [r0, #24]
 8001482:	b29b      	uxth	r3, r3
 8001484:	4319      	orrs	r1, r3
 8001486:	8301      	strh	r1, [r0, #24]
 8001488:	4770      	bx	lr
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	0000fff3 	.word	0x0000fff3

08001490 <TIM_SetIC2Prescaler>:
 8001490:	6982      	ldr	r2, [r0, #24]
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <TIM_SetIC2Prescaler+0x18>)
 8001494:	0209      	lsls	r1, r1, #8
 8001496:	4013      	ands	r3, r2
 8001498:	8303      	strh	r3, [r0, #24]
 800149a:	6983      	ldr	r3, [r0, #24]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4319      	orrs	r1, r3
 80014a0:	b289      	uxth	r1, r1
 80014a2:	8301      	strh	r1, [r0, #24]
 80014a4:	4770      	bx	lr
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	0000f3ff 	.word	0x0000f3ff

080014ac <TIM_SetIC3Prescaler>:
 80014ac:	69c2      	ldr	r2, [r0, #28]
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <TIM_SetIC3Prescaler+0x14>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	8383      	strh	r3, [r0, #28]
 80014b4:	69c3      	ldr	r3, [r0, #28]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4319      	orrs	r1, r3
 80014ba:	8381      	strh	r1, [r0, #28]
 80014bc:	4770      	bx	lr
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	0000fff3 	.word	0x0000fff3

080014c4 <TIM_SetIC4Prescaler>:
 80014c4:	69c2      	ldr	r2, [r0, #28]
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <TIM_SetIC4Prescaler+0x18>)
 80014c8:	0209      	lsls	r1, r1, #8
 80014ca:	4013      	ands	r3, r2
 80014cc:	8383      	strh	r3, [r0, #28]
 80014ce:	69c3      	ldr	r3, [r0, #28]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4319      	orrs	r1, r3
 80014d4:	b289      	uxth	r1, r1
 80014d6:	8381      	strh	r1, [r0, #28]
 80014d8:	4770      	bx	lr
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	0000f3ff 	.word	0x0000f3ff

080014e0 <TIM_ITConfig>:
 80014e0:	68c3      	ldr	r3, [r0, #12]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d102      	bne.n	80014ee <TIM_ITConfig+0xe>
 80014e8:	438b      	bics	r3, r1
 80014ea:	8183      	strh	r3, [r0, #12]
 80014ec:	4770      	bx	lr
 80014ee:	4319      	orrs	r1, r3
 80014f0:	8181      	strh	r1, [r0, #12]
 80014f2:	e7fb      	b.n	80014ec <TIM_ITConfig+0xc>

080014f4 <TIM_GenerateEvent>:
 80014f4:	8281      	strh	r1, [r0, #20]
 80014f6:	4770      	bx	lr

080014f8 <TIM_GetFlagStatus>:
 80014f8:	6900      	ldr	r0, [r0, #16]
 80014fa:	4008      	ands	r0, r1
 80014fc:	1e43      	subs	r3, r0, #1
 80014fe:	4198      	sbcs	r0, r3
 8001500:	b2c0      	uxtb	r0, r0
 8001502:	4770      	bx	lr

08001504 <TIM_ClearFlag>:
 8001504:	43c9      	mvns	r1, r1
 8001506:	b289      	uxth	r1, r1
 8001508:	8201      	strh	r1, [r0, #16]
 800150a:	4770      	bx	lr

0800150c <TIM_GetITStatus>:
 800150c:	6903      	ldr	r3, [r0, #16]
 800150e:	68c0      	ldr	r0, [r0, #12]
 8001510:	b282      	uxth	r2, r0
 8001512:	2000      	movs	r0, #0
 8001514:	420b      	tst	r3, r1
 8001516:	d003      	beq.n	8001520 <TIM_GetITStatus+0x14>
 8001518:	4011      	ands	r1, r2
 800151a:	1e4a      	subs	r2, r1, #1
 800151c:	4191      	sbcs	r1, r2
 800151e:	b2c8      	uxtb	r0, r1
 8001520:	4770      	bx	lr
 8001522:	46c0      	nop			; (mov r8, r8)

08001524 <TIM_ClearITPendingBit>:
 8001524:	43c9      	mvns	r1, r1
 8001526:	b289      	uxth	r1, r1
 8001528:	8201      	strh	r1, [r0, #16]
 800152a:	4770      	bx	lr

0800152c <TIM_DMAConfig>:
 800152c:	4311      	orrs	r1, r2
 800152e:	2348      	movs	r3, #72	; 0x48
 8001530:	52c1      	strh	r1, [r0, r3]
 8001532:	4770      	bx	lr

08001534 <TIM_DMACmd>:
 8001534:	68c3      	ldr	r3, [r0, #12]
 8001536:	b29b      	uxth	r3, r3
 8001538:	2a00      	cmp	r2, #0
 800153a:	d102      	bne.n	8001542 <TIM_DMACmd+0xe>
 800153c:	438b      	bics	r3, r1
 800153e:	8183      	strh	r3, [r0, #12]
 8001540:	4770      	bx	lr
 8001542:	4319      	orrs	r1, r3
 8001544:	8181      	strh	r1, [r0, #12]
 8001546:	e7fb      	b.n	8001540 <TIM_DMACmd+0xc>

08001548 <TIM_SelectCCDMA>:
 8001548:	2900      	cmp	r1, #0
 800154a:	d104      	bne.n	8001556 <TIM_SelectCCDMA+0xe>
 800154c:	6842      	ldr	r2, [r0, #4]
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <TIM_SelectCCDMA+0x1c>)
 8001550:	4013      	ands	r3, r2
 8001552:	8083      	strh	r3, [r0, #4]
 8001554:	4770      	bx	lr
 8001556:	6843      	ldr	r3, [r0, #4]
 8001558:	2208      	movs	r2, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	8083      	strh	r3, [r0, #4]
 8001560:	e7f8      	b.n	8001554 <TIM_SelectCCDMA+0xc>
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	0000fff7 	.word	0x0000fff7

08001568 <TIM_InternalClockConfig>:
 8001568:	6882      	ldr	r2, [r0, #8]
 800156a:	4b02      	ldr	r3, [pc, #8]	; (8001574 <TIM_InternalClockConfig+0xc>)
 800156c:	4013      	ands	r3, r2
 800156e:	8103      	strh	r3, [r0, #8]
 8001570:	4770      	bx	lr
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	0000fff8 	.word	0x0000fff8

08001578 <TIM_ITRxExternalClockConfig>:
 8001578:	6882      	ldr	r2, [r0, #8]
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <TIM_ITRxExternalClockConfig+0x18>)
 800157c:	4013      	ands	r3, r2
 800157e:	4319      	orrs	r1, r3
 8001580:	8101      	strh	r1, [r0, #8]
 8001582:	6883      	ldr	r3, [r0, #8]
 8001584:	2207      	movs	r2, #7
 8001586:	b29b      	uxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	8103      	strh	r3, [r0, #8]
 800158c:	4770      	bx	lr
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	0000ff8f 	.word	0x0000ff8f

08001594 <TIM_TIxExternalClockConfig>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	6a05      	ldr	r5, [r0, #32]
 8001598:	2960      	cmp	r1, #96	; 0x60
 800159a:	d01e      	beq.n	80015da <TIM_TIxExternalClockConfig+0x46>
 800159c:	4c1b      	ldr	r4, [pc, #108]	; (800160c <TIM_TIxExternalClockConfig+0x78>)
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	402c      	ands	r4, r5
 80015a2:	8404      	strh	r4, [r0, #32]
 80015a4:	6985      	ldr	r5, [r0, #24]
 80015a6:	4c1a      	ldr	r4, [pc, #104]	; (8001610 <TIM_TIxExternalClockConfig+0x7c>)
 80015a8:	6a06      	ldr	r6, [r0, #32]
 80015aa:	4025      	ands	r5, r4
 80015ac:	2401      	movs	r4, #1
 80015ae:	4325      	orrs	r5, r4
 80015b0:	b2ad      	uxth	r5, r5
 80015b2:	432b      	orrs	r3, r5
 80015b4:	4d17      	ldr	r5, [pc, #92]	; (8001614 <TIM_TIxExternalClockConfig+0x80>)
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4035      	ands	r5, r6
 80015ba:	432c      	orrs	r4, r5
 80015bc:	b2a4      	uxth	r4, r4
 80015be:	4322      	orrs	r2, r4
 80015c0:	8303      	strh	r3, [r0, #24]
 80015c2:	8402      	strh	r2, [r0, #32]
 80015c4:	6882      	ldr	r2, [r0, #8]
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <TIM_TIxExternalClockConfig+0x84>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	4319      	orrs	r1, r3
 80015cc:	8101      	strh	r1, [r0, #8]
 80015ce:	6883      	ldr	r3, [r0, #8]
 80015d0:	2207      	movs	r2, #7
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	8103      	strh	r3, [r0, #8]
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
 80015da:	4c10      	ldr	r4, [pc, #64]	; (800161c <TIM_TIxExternalClockConfig+0x88>)
 80015dc:	402c      	ands	r4, r5
 80015de:	8404      	strh	r4, [r0, #32]
 80015e0:	6986      	ldr	r6, [r0, #24]
 80015e2:	4c0f      	ldr	r4, [pc, #60]	; (8001620 <TIM_TIxExternalClockConfig+0x8c>)
 80015e4:	6a05      	ldr	r5, [r0, #32]
 80015e6:	4026      	ands	r6, r4
 80015e8:	2480      	movs	r4, #128	; 0x80
 80015ea:	0064      	lsls	r4, r4, #1
 80015ec:	4326      	orrs	r6, r4
 80015ee:	031c      	lsls	r4, r3, #12
 80015f0:	1c33      	adds	r3, r6, #0
 80015f2:	4323      	orrs	r3, r4
 80015f4:	4c0b      	ldr	r4, [pc, #44]	; (8001624 <TIM_TIxExternalClockConfig+0x90>)
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4025      	ands	r5, r4
 80015fa:	2410      	movs	r4, #16
 80015fc:	4325      	orrs	r5, r4
 80015fe:	0114      	lsls	r4, r2, #4
 8001600:	1c2a      	adds	r2, r5, #0
 8001602:	4322      	orrs	r2, r4
 8001604:	b292      	uxth	r2, r2
 8001606:	8303      	strh	r3, [r0, #24]
 8001608:	8402      	strh	r2, [r0, #32]
 800160a:	e7db      	b.n	80015c4 <TIM_TIxExternalClockConfig+0x30>
 800160c:	0000fffe 	.word	0x0000fffe
 8001610:	0000ff0c 	.word	0x0000ff0c
 8001614:	0000fff5 	.word	0x0000fff5
 8001618:	0000ff8f 	.word	0x0000ff8f
 800161c:	0000ffef 	.word	0x0000ffef
 8001620:	00000cff 	.word	0x00000cff
 8001624:	0000ff5f 	.word	0x0000ff5f

08001628 <TIM_ETRClockMode1Config>:
 8001628:	b510      	push	{r4, lr}
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	6884      	ldr	r4, [r0, #8]
 800162e:	431a      	orrs	r2, r3
 8001630:	23ff      	movs	r3, #255	; 0xff
 8001632:	401c      	ands	r4, r3
 8001634:	4322      	orrs	r2, r4
 8001636:	b292      	uxth	r2, r2
 8001638:	4311      	orrs	r1, r2
 800163a:	8101      	strh	r1, [r0, #8]
 800163c:	6882      	ldr	r2, [r0, #8]
 800163e:	4b03      	ldr	r3, [pc, #12]	; (800164c <TIM_ETRClockMode1Config+0x24>)
 8001640:	4013      	ands	r3, r2
 8001642:	2277      	movs	r2, #119	; 0x77
 8001644:	4313      	orrs	r3, r2
 8001646:	8103      	strh	r3, [r0, #8]
 8001648:	bd10      	pop	{r4, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	0000ff88 	.word	0x0000ff88

08001650 <TIM_ETRClockMode2Config>:
 8001650:	b510      	push	{r4, lr}
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	6884      	ldr	r4, [r0, #8]
 8001656:	431a      	orrs	r2, r3
 8001658:	23ff      	movs	r3, #255	; 0xff
 800165a:	401c      	ands	r4, r3
 800165c:	4322      	orrs	r2, r4
 800165e:	b292      	uxth	r2, r2
 8001660:	4311      	orrs	r1, r2
 8001662:	8101      	strh	r1, [r0, #8]
 8001664:	6882      	ldr	r2, [r0, #8]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	b292      	uxth	r2, r2
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4313      	orrs	r3, r2
 800166e:	8103      	strh	r3, [r0, #8]
 8001670:	bd10      	pop	{r4, pc}
 8001672:	46c0      	nop			; (mov r8, r8)

08001674 <TIM_SelectInputTrigger>:
 8001674:	6882      	ldr	r2, [r0, #8]
 8001676:	4b02      	ldr	r3, [pc, #8]	; (8001680 <TIM_SelectInputTrigger+0xc>)
 8001678:	4013      	ands	r3, r2
 800167a:	4319      	orrs	r1, r3
 800167c:	8101      	strh	r1, [r0, #8]
 800167e:	4770      	bx	lr
 8001680:	0000ff8f 	.word	0x0000ff8f

08001684 <TIM_SelectOutputTrigger>:
 8001684:	6842      	ldr	r2, [r0, #4]
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <TIM_SelectOutputTrigger+0x14>)
 8001688:	4013      	ands	r3, r2
 800168a:	8083      	strh	r3, [r0, #4]
 800168c:	6843      	ldr	r3, [r0, #4]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4319      	orrs	r1, r3
 8001692:	8081      	strh	r1, [r0, #4]
 8001694:	4770      	bx	lr
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	0000ff8f 	.word	0x0000ff8f

0800169c <TIM_SelectSlaveMode>:
 800169c:	6882      	ldr	r2, [r0, #8]
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <TIM_SelectSlaveMode+0x14>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	8103      	strh	r3, [r0, #8]
 80016a4:	6883      	ldr	r3, [r0, #8]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4319      	orrs	r1, r3
 80016aa:	8101      	strh	r1, [r0, #8]
 80016ac:	4770      	bx	lr
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	0000fff8 	.word	0x0000fff8

080016b4 <TIM_SelectMasterSlaveMode>:
 80016b4:	6882      	ldr	r2, [r0, #8]
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <TIM_SelectMasterSlaveMode+0x14>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	8103      	strh	r3, [r0, #8]
 80016bc:	6883      	ldr	r3, [r0, #8]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4319      	orrs	r1, r3
 80016c2:	8101      	strh	r1, [r0, #8]
 80016c4:	4770      	bx	lr
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	0000ff7f 	.word	0x0000ff7f

080016cc <TIM_ETRConfig>:
 80016cc:	b530      	push	{r4, r5, lr}
 80016ce:	6885      	ldr	r5, [r0, #8]
 80016d0:	24ff      	movs	r4, #255	; 0xff
 80016d2:	402c      	ands	r4, r5
 80016d4:	4321      	orrs	r1, r4
 80016d6:	430a      	orrs	r2, r1
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	431a      	orrs	r2, r3
 80016dc:	b292      	uxth	r2, r2
 80016de:	8102      	strh	r2, [r0, #8]
 80016e0:	bd30      	pop	{r4, r5, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)

080016e4 <TIM_EncoderInterfaceConfig>:
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	6887      	ldr	r7, [r0, #8]
 80016e8:	4c09      	ldr	r4, [pc, #36]	; (8001710 <TIM_EncoderInterfaceConfig+0x2c>)
 80016ea:	6985      	ldr	r5, [r0, #24]
 80016ec:	403c      	ands	r4, r7
 80016ee:	4321      	orrs	r1, r4
 80016f0:	4c08      	ldr	r4, [pc, #32]	; (8001714 <TIM_EncoderInterfaceConfig+0x30>)
 80016f2:	6a06      	ldr	r6, [r0, #32]
 80016f4:	402c      	ands	r4, r5
 80016f6:	2502      	movs	r5, #2
 80016f8:	35ff      	adds	r5, #255	; 0xff
 80016fa:	432c      	orrs	r4, r5
 80016fc:	4d06      	ldr	r5, [pc, #24]	; (8001718 <TIM_EncoderInterfaceConfig+0x34>)
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4035      	ands	r5, r6
 8001702:	432a      	orrs	r2, r5
 8001704:	431a      	orrs	r2, r3
 8001706:	b292      	uxth	r2, r2
 8001708:	8101      	strh	r1, [r0, #8]
 800170a:	8304      	strh	r4, [r0, #24]
 800170c:	8402      	strh	r2, [r0, #32]
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	0000fff8 	.word	0x0000fff8
 8001714:	0000fcfc 	.word	0x0000fcfc
 8001718:	0000ffdd 	.word	0x0000ffdd

0800171c <TIM_SelectHallSensor>:
 800171c:	2900      	cmp	r1, #0
 800171e:	d104      	bne.n	800172a <TIM_SelectHallSensor+0xe>
 8001720:	6842      	ldr	r2, [r0, #4]
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <TIM_SelectHallSensor+0x1c>)
 8001724:	4013      	ands	r3, r2
 8001726:	8083      	strh	r3, [r0, #4]
 8001728:	4770      	bx	lr
 800172a:	6843      	ldr	r3, [r0, #4]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	b29b      	uxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	8083      	strh	r3, [r0, #4]
 8001734:	e7f8      	b.n	8001728 <TIM_SelectHallSensor+0xc>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	0000ff7f 	.word	0x0000ff7f

0800173c <TIM_RemapConfig>:
 800173c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800173e:	0c0b      	lsrs	r3, r1, #16
 8001740:	401a      	ands	r2, r3
 8001742:	2350      	movs	r3, #80	; 0x50
 8001744:	52c2      	strh	r2, [r0, r3]
 8001746:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001748:	4311      	orrs	r1, r2
 800174a:	b289      	uxth	r1, r1
 800174c:	52c1      	strh	r1, [r0, r3]
 800174e:	4770      	bx	lr

08001750 <__aeabi_uidiv>:
 8001750:	2900      	cmp	r1, #0
 8001752:	d034      	beq.n	80017be <.udivsi3_skip_div0_test+0x6a>

08001754 <.udivsi3_skip_div0_test>:
 8001754:	2301      	movs	r3, #1
 8001756:	2200      	movs	r2, #0
 8001758:	b410      	push	{r4}
 800175a:	4288      	cmp	r0, r1
 800175c:	d32c      	bcc.n	80017b8 <.udivsi3_skip_div0_test+0x64>
 800175e:	2401      	movs	r4, #1
 8001760:	0724      	lsls	r4, r4, #28
 8001762:	42a1      	cmp	r1, r4
 8001764:	d204      	bcs.n	8001770 <.udivsi3_skip_div0_test+0x1c>
 8001766:	4281      	cmp	r1, r0
 8001768:	d202      	bcs.n	8001770 <.udivsi3_skip_div0_test+0x1c>
 800176a:	0109      	lsls	r1, r1, #4
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	e7f8      	b.n	8001762 <.udivsi3_skip_div0_test+0xe>
 8001770:	00e4      	lsls	r4, r4, #3
 8001772:	42a1      	cmp	r1, r4
 8001774:	d204      	bcs.n	8001780 <.udivsi3_skip_div0_test+0x2c>
 8001776:	4281      	cmp	r1, r0
 8001778:	d202      	bcs.n	8001780 <.udivsi3_skip_div0_test+0x2c>
 800177a:	0049      	lsls	r1, r1, #1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	e7f8      	b.n	8001772 <.udivsi3_skip_div0_test+0x1e>
 8001780:	4288      	cmp	r0, r1
 8001782:	d301      	bcc.n	8001788 <.udivsi3_skip_div0_test+0x34>
 8001784:	1a40      	subs	r0, r0, r1
 8001786:	431a      	orrs	r2, r3
 8001788:	084c      	lsrs	r4, r1, #1
 800178a:	42a0      	cmp	r0, r4
 800178c:	d302      	bcc.n	8001794 <.udivsi3_skip_div0_test+0x40>
 800178e:	1b00      	subs	r0, r0, r4
 8001790:	085c      	lsrs	r4, r3, #1
 8001792:	4322      	orrs	r2, r4
 8001794:	088c      	lsrs	r4, r1, #2
 8001796:	42a0      	cmp	r0, r4
 8001798:	d302      	bcc.n	80017a0 <.udivsi3_skip_div0_test+0x4c>
 800179a:	1b00      	subs	r0, r0, r4
 800179c:	089c      	lsrs	r4, r3, #2
 800179e:	4322      	orrs	r2, r4
 80017a0:	08cc      	lsrs	r4, r1, #3
 80017a2:	42a0      	cmp	r0, r4
 80017a4:	d302      	bcc.n	80017ac <.udivsi3_skip_div0_test+0x58>
 80017a6:	1b00      	subs	r0, r0, r4
 80017a8:	08dc      	lsrs	r4, r3, #3
 80017aa:	4322      	orrs	r2, r4
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d003      	beq.n	80017b8 <.udivsi3_skip_div0_test+0x64>
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	d001      	beq.n	80017b8 <.udivsi3_skip_div0_test+0x64>
 80017b4:	0909      	lsrs	r1, r1, #4
 80017b6:	e7e3      	b.n	8001780 <.udivsi3_skip_div0_test+0x2c>
 80017b8:	1c10      	adds	r0, r2, #0
 80017ba:	bc10      	pop	{r4}
 80017bc:	4770      	bx	lr
 80017be:	2800      	cmp	r0, #0
 80017c0:	d001      	beq.n	80017c6 <.udivsi3_skip_div0_test+0x72>
 80017c2:	2000      	movs	r0, #0
 80017c4:	43c0      	mvns	r0, r0
 80017c6:	b407      	push	{r0, r1, r2}
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <.udivsi3_skip_div0_test+0x80>)
 80017ca:	a102      	add	r1, pc, #8	; (adr r1, 80017d4 <.udivsi3_skip_div0_test+0x80>)
 80017cc:	1840      	adds	r0, r0, r1
 80017ce:	9002      	str	r0, [sp, #8]
 80017d0:	bd03      	pop	{r0, r1, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	00000019 	.word	0x00000019

080017d8 <__aeabi_uidivmod>:
 80017d8:	2900      	cmp	r1, #0
 80017da:	d0f0      	beq.n	80017be <.udivsi3_skip_div0_test+0x6a>
 80017dc:	b503      	push	{r0, r1, lr}
 80017de:	f7ff ffb9 	bl	8001754 <.udivsi3_skip_div0_test>
 80017e2:	bc0e      	pop	{r1, r2, r3}
 80017e4:	4342      	muls	r2, r0
 80017e6:	1a89      	subs	r1, r1, r2
 80017e8:	4718      	bx	r3
 80017ea:	46c0      	nop			; (mov r8, r8)

080017ec <__aeabi_idiv0>:
 80017ec:	4770      	bx	lr
 80017ee:	46c0      	nop			; (mov r8, r8)

080017f0 <main>:

  uint16_t PrescalerValue = 0;

  void delay(int a);
  int main(void)
  {
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* --------------------------- System Clocks Configuration ---------------------*/
   /* Enable the HSI */
  RCC_HSICmd(ENABLE);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff f868 	bl	80008c8 <RCC_HSICmd>
  /* Wait until HSI oscillator is ready */
  while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 80017f8:	2021      	movs	r0, #33	; 0x21
 80017fa:	f7ff f9cd 	bl	8000b98 <RCC_GetFlagStatus>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d0fa      	beq.n	80017f8 <main+0x8>
  /* TIM3 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001802:	2001      	movs	r0, #1
 8001804:	1c01      	adds	r1, r0, #0
 8001806:	f7ff f967 	bl	8000ad8 <RCC_APB1PeriphClockCmd>
  /* GPIOA clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);        
 800180a:	2001      	movs	r0, #1
 800180c:	1c01      	adds	r1, r0, #0
 800180e:	f7ff f94b 	bl	8000aa8 <RCC_AHBPeriphClockCmd>
  /* Enable ADC1 clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); 
 8001812:	2080      	movs	r0, #128	; 0x80
 8001814:	2101      	movs	r1, #1
 8001816:	0080      	lsls	r0, r0, #2
 8001818:	f7ff f952 	bl	8000ac0 <RCC_APB2PeriphClockCmd>
  /*--------------------------------- GPIO Configuration -------------------------*/

  /* Configure PB.12 in analog mode (ADC1 Channel0)  -*/
  GPIO_StructInit(&GPIO_InitStructure);
 800181c:	4c38      	ldr	r4, [pc, #224]	; (8001900 <main+0x110>)
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800181e:	2600      	movs	r6, #0
  /* Enable ADC1 clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); 
  /*--------------------------------- GPIO Configuration -------------------------*/

  /* Configure PB.12 in analog mode (ADC1 Channel0)  -*/
  GPIO_StructInit(&GPIO_InitStructure);
 8001820:	1c20      	adds	r0, r4, #0
 8001822:	f7fe ff8f 	bl	8000744 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
 8001826:	2320      	movs	r3, #32
 8001828:	6023      	str	r3, [r4, #0]
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 800182a:	4836      	ldr	r0, [pc, #216]	; (8001904 <main+0x114>)
  /*--------------------------------- GPIO Configuration -------------------------*/

  /* Configure PB.12 in analog mode (ADC1 Channel0)  -*/
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 800182c:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 800182e:	1c21      	adds	r1, r4, #0
  //initialize pin PA1 as the led to fade
  //PA1 is associated with TIM2_CH2
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;                
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;              
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001830:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);  

  //initialize pin PA1 as the led to fade
  //PA1 is associated with TIM2_CH2
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
 8001832:	2702      	movs	r7, #2
  /*--------------------------------- GPIO Configuration -------------------------*/

  /* Configure PB.12 in analog mode (ADC1 Channel0)  -*/
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;
 8001834:	7123      	strb	r3, [r4, #4]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001836:	71e6      	strb	r6, [r4, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8001838:	f7fe ff2c 	bl	8000694 <GPIO_Init>
  //PA1 is associated with TIM2_CH2
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;                
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;              
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800183c:	2303      	movs	r3, #3
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800183e:	4831      	ldr	r0, [pc, #196]	; (8001904 <main+0x114>)
 8001840:	1c21      	adds	r1, r4, #0
  //PA1 is associated with TIM2_CH2
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;                
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;              
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001842:	7163      	strb	r3, [r4, #5]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);  

  //initialize pin PA1 as the led to fade
  //PA1 is associated with TIM2_CH2
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
 8001844:	6027      	str	r7, [r4, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;                
 8001846:	7127      	strb	r7, [r4, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;              
 8001848:	71a6      	strb	r6, [r4, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800184a:	71e5      	strb	r5, [r4, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800184c:	f7fe ff22 	bl	8000694 <GPIO_Init>
  
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);     
 8001850:	1c2a      	adds	r2, r5, #0
 8001852:	1c29      	adds	r1, r5, #0
 8001854:	482b      	ldr	r0, [pc, #172]	; (8001904 <main+0x114>)
 8001856:	f7fe ffb7 	bl	80007c8 <GPIO_PinAFConfig>
   /* ADC1 Configuration -----------------------------------------------------*/
  /*
    This is set to ADC_Prescaler_Div1 by default and for a reason lost on me, does not work
    without these two lines the adc will not work
  */
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 800185a:	482b      	ldr	r0, [pc, #172]	; (8001908 <main+0x118>)
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	025b      	lsls	r3, r3, #9
 8001860:	6003      	str	r3, [r0, #0]
  ADC_CommonInit(&ADC_CommonInitStructure);
 8001862:	f7fe fc99 	bl	8000198 <ADC_CommonInit>

  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001866:	4929      	ldr	r1, [pc, #164]	; (800190c <main+0x11c>)
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None  ;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfConversion = 1;
  ADC_Init(ADC1, &ADC_InitStructure);
 8001868:	4829      	ldr	r0, [pc, #164]	; (8001910 <main+0x120>)
    without these two lines the adc will not work
  */
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
  ADC_CommonInit(&ADC_CommonInitStructure);

  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800186a:	600e      	str	r6, [r1, #0]
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 800186c:	710d      	strb	r5, [r1, #4]
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 800186e:	714d      	strb	r5, [r1, #5]
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None  ;
 8001870:	608e      	str	r6, [r1, #8]
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001872:	610e      	str	r6, [r1, #16]
  ADC_InitStructure.ADC_NbrOfConversion = 1;
 8001874:	750d      	strb	r5, [r1, #20]
  ADC_Init(ADC1, &ADC_InitStructure);
 8001876:	f7fe fc5b 	bl	8000130 <ADC_Init>
  /* ADC1 regular channel0 configuration */ 
  ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 1, ADC_SampleTime_16Cycles);
 800187a:	4825      	ldr	r0, [pc, #148]	; (8001910 <main+0x120>)
 800187c:	2105      	movs	r1, #5
 800187e:	1c2a      	adds	r2, r5, #0
 8001880:	1c3b      	adds	r3, r7, #0
 8001882:	f7fe fce5 	bl	8000250 <ADC_RegularChannelConfig>
  /* Enable ADC1 */
  ADC_Cmd(ADC1, ENABLE);
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <main+0x120>)
 8001888:	1c29      	adds	r1, r5, #0
 800188a:	f7fe fc95 	bl	80001b8 <ADC_Cmd>

  /* Wait until the ADC1 is ready */
  while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET)
 800188e:	4820      	ldr	r0, [pc, #128]	; (8001910 <main+0x120>)
 8001890:	2140      	movs	r1, #64	; 0x40
 8001892:	f7fe fe6f 	bl	8000574 <ADC_GetFlagStatus>
 8001896:	2800      	cmp	r0, #0
 8001898:	d0f9      	beq.n	800188e <main+0x9e>
  {
  }

  /* Start ADC1 Software Conversion */ 
  ADC_SoftwareStartConv(ADC1);
 800189a:	481d      	ldr	r0, [pc, #116]	; (8001910 <main+0x120>)
 800189c:	f7fe fd5a 	bl	8000354 <ADC_SoftwareStartConv>

  This allows us to define a pulse width output from 0-100% with a precision of 1%
----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) (SystemCoreClock / 1000000) - 1;        //0...31
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <main+0x124>)
 80018a2:	491d      	ldr	r1, [pc, #116]	; (8001918 <main+0x128>)
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	f7ff ff53 	bl	8001750 <__aeabi_uidiv>
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <main+0x12c>)
 80018ac:	3801      	subs	r0, #1
  TIM_TimeBaseStructure.TIM_Period = 1000-1;                          //0...999
 80018ae:	491c      	ldr	r1, [pc, #112]	; (8001920 <main+0x130>)

  This allows us to define a pulse width output from 0-100% with a precision of 1%
----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) (SystemCoreClock / 1000000) - 1;        //0...31
 80018b0:	b280      	uxth	r0, r0
 80018b2:	8018      	strh	r0, [r3, #0]
  TIM_TimeBaseStructure.TIM_Period = 1000-1;                          //0...999
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <main+0x134>)
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80018b6:	8008      	strh	r0, [r1, #0]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;         
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80018b8:	2080      	movs	r0, #128	; 0x80
  This allows us to define a pulse width output from 0-100% with a precision of 1%
----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) (SystemCoreClock / 1000000) - 1;        //0...31
  TIM_TimeBaseStructure.TIM_Period = 1000-1;                          //0...999
 80018ba:	604b      	str	r3, [r1, #4]
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;         
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80018bc:	05c0      	lsls	r0, r0, #23

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) (SystemCoreClock / 1000000) - 1;        //0...31
  TIM_TimeBaseStructure.TIM_Period = 1000-1;                          //0...999
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;         
 80018be:	2300      	movs	r3, #0
 80018c0:	804b      	strh	r3, [r1, #2]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80018c2:	f7ff fa15 	bl	8000cf0 <TIM_TimeBaseInit>

  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;                   
 80018c6:	4918      	ldr	r1, [pc, #96]	; (8001928 <main+0x138>)
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80018c8:	2080      	movs	r0, #128	; 0x80
  TIM_TimeBaseStructure.TIM_Period = 1000-1;                          //0...999
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;         
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;                   
 80018ca:	2260      	movs	r2, #96	; 0x60
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80018cc:	2401      	movs	r4, #1
  TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80018ce:	05c0      	lsls	r0, r0, #23
  TIM_TimeBaseStructure.TIM_Period = 1000-1;                          //0...999
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;         
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;                   
 80018d0:	800a      	strh	r2, [r1, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80018d2:	804c      	strh	r4, [r1, #2]
  TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80018d4:	f7ff fad2 	bl	8000e7c <TIM_OC2Init>

  /* TIM2 enable counter */
  TIM_Cmd(TIM2, ENABLE);
 80018d8:	2080      	movs	r0, #128	; 0x80
 80018da:	05c0      	lsls	r0, r0, #23
 80018dc:	1c21      	adds	r1, r4, #0
 80018de:	f7ff faa1 	bl	8000e24 <TIM_Cmd>

  while (1)
  {

    if(ADC_GetSoftwareStartConvStatus(ADC1) == RESET){
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <main+0x120>)
 80018e4:	f7fe fd3c 	bl	8000360 <ADC_GetSoftwareStartConvStatus>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1fa      	bne.n	80018e2 <main+0xf2>

    uint16_t adcValue = ADC_GetConversionValue(ADC1)/4;
 80018ec:	4808      	ldr	r0, [pc, #32]	; (8001910 <main+0x120>)
 80018ee:	f7fe fd6d 	bl	80003cc <ADC_GetConversionValue>
 80018f2:	0881      	lsrs	r1, r0, #2
    TIM_SetCompare2(TIM2,adcValue);      
 80018f4:	2080      	movs	r0, #128	; 0x80
 80018f6:	b289      	uxth	r1, r1
 80018f8:	05c0      	lsls	r0, r0, #23
 80018fa:	f7ff fb53 	bl	8000fa4 <TIM_SetCompare2>
 80018fe:	e7f0      	b.n	80018e2 <main+0xf2>
 8001900:	20000054 	.word	0x20000054
 8001904:	40020000 	.word	0x40020000
 8001908:	2000005c 	.word	0x2000005c
 800190c:	20000030 	.word	0x20000030
 8001910:	40012400 	.word	0x40012400
 8001914:	2000001c 	.word	0x2000001c
 8001918:	000f4240 	.word	0x000f4240
 800191c:	20000020 	.word	0x20000020
 8001920:	20000024 	.word	0x20000024
 8001924:	000003e7 	.word	0x000003e7
 8001928:	20000048 	.word	0x20000048

0800192c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800192c:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <SystemInit+0xf4>)
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800192e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	0052      	lsls	r2, r2, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	4a39      	ldr	r2, [pc, #228]	; (8001a24 <SystemInit+0xf8>)
 800193e:	400a      	ands	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	4a38      	ldr	r2, [pc, #224]	; (8001a28 <SystemInit+0xfc>)
 8001946:	400a      	ands	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <SystemInit+0x100>)
 800194e:	400a      	ands	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4936      	ldr	r1, [pc, #216]	; (8001a30 <SystemInit+0x104>)
 8001956:	400a      	ands	r2, r1
 8001958:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800195e:	9200      	str	r2, [sp, #0]
 8001960:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	0252      	lsls	r2, r2, #9
 8001968:	4302      	orrs	r2, r0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	1c08      	adds	r0, r1, #0
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0292      	lsls	r2, r2, #10
 8001974:	4011      	ands	r1, r2
 8001976:	9101      	str	r1, [sp, #4]
    StartUpCounter++;
 8001978:	9900      	ldr	r1, [sp, #0]
 800197a:	3101      	adds	r1, #1
 800197c:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800197e:	9901      	ldr	r1, [sp, #4]
 8001980:	2900      	cmp	r1, #0
 8001982:	d104      	bne.n	800198e <SystemInit+0x62>
 8001984:	9c00      	ldr	r4, [sp, #0]
 8001986:	21a0      	movs	r1, #160	; 0xa0
 8001988:	01c9      	lsls	r1, r1, #7
 800198a:	428c      	cmp	r4, r1
 800198c:	d1ef      	bne.n	800196e <SystemInit+0x42>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	400a      	ands	r2, r1
 8001992:	d000      	beq.n	8001996 <SystemInit+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8001994:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001996:	9201      	str	r2, [sp, #4]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001998:	9901      	ldr	r1, [sp, #4]
 800199a:	2901      	cmp	r1, #1
 800199c:	d004      	beq.n	80019a8 <SystemInit+0x7c>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800199e:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <SystemInit+0x108>)
 80019a0:	2280      	movs	r2, #128	; 0x80
 80019a2:	0512      	lsls	r2, r2, #20
 80019a4:	609a      	str	r2, [r3, #8]
#endif
}
 80019a6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  }
  
  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80019a8:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <SystemInit+0x10c>)
 80019aa:	2504      	movs	r5, #4
 80019ac:	6814      	ldr	r4, [r2, #0]
 80019ae:	432c      	orrs	r4, r5
 80019b0:	6014      	str	r4, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80019b2:	6814      	ldr	r4, [r2, #0]
 80019b4:	2502      	movs	r5, #2
 80019b6:	432c      	orrs	r4, r5
 80019b8:	6014      	str	r4, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80019ba:	6814      	ldr	r4, [r2, #0]
 80019bc:	4321      	orrs	r1, r4
 80019be:	6011      	str	r1, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80019c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	0552      	lsls	r2, r2, #21
 80019c6:	430a      	orrs	r2, r1
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <SystemInit+0x110>)
 80019ce:	0109      	lsls	r1, r1, #4
 80019d0:	6011      	str	r1, [r2, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80019d2:	6851      	ldr	r1, [r2, #4]
 80019d4:	06cc      	lsls	r4, r1, #27
 80019d6:	d4fc      	bmi.n	80019d2 <SystemInit+0xa6>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	609a      	str	r2, [r3, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	609a      	str	r2, [r3, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80019e4:	6899      	ldr	r1, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80019e6:	2291      	movs	r2, #145	; 0x91
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80019e8:	4001      	ands	r1, r0
 80019ea:	6099      	str	r1, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80019ec:	6899      	ldr	r1, [r3, #8]
 80019ee:	0412      	lsls	r2, r2, #16
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	0452      	lsls	r2, r2, #17
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <SystemInit+0xf4>)
 8001a02:	0188      	lsls	r0, r1, #6
 8001a04:	d5fb      	bpl.n	80019fe <SystemInit+0xd2>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001a06:	6890      	ldr	r0, [r2, #8]
 8001a08:	2103      	movs	r1, #3
 8001a0a:	4388      	bics	r0, r1
 8001a0c:	6090      	str	r0, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001a0e:	6890      	ldr	r0, [r2, #8]
 8001a10:	4301      	orrs	r1, r0
 8001a12:	6091      	str	r1, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001a14:	6899      	ldr	r1, [r3, #8]
 8001a16:	220c      	movs	r2, #12
 8001a18:	400a      	ands	r2, r1
 8001a1a:	2a0c      	cmp	r2, #12
 8001a1c:	d1fa      	bne.n	8001a14 <SystemInit+0xe8>
 8001a1e:	e7be      	b.n	800199e <SystemInit+0x72>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	88ffc00c 	.word	0x88ffc00c
 8001a28:	eefefffe 	.word	0xeefefffe
 8001a2c:	fffbffff 	.word	0xfffbffff
 8001a30:	ff02ffff 	.word	0xff02ffff
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	40023c00 	.word	0x40023c00
 8001a3c:	40007000 	.word	0x40007000

08001a40 <Reset_Handler>:
.weak Reset_Handler
.type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
movs r1, #0
 8001a40:	2100      	movs	r1, #0
b LoopCopyDataInit
 8001a42:	f000 b804 	b.w	8001a4e <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
ldr r3, =_sidata
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <LoopFillZerobss+0x16>)
ldr r3, [r3, r1]
 8001a48:	585b      	ldr	r3, [r3, r1]
str r3, [r0, r1]
 8001a4a:	5043      	str	r3, [r0, r1]
adds r1, r1, #4
 8001a4c:	3104      	adds	r1, #4

08001a4e <LoopCopyDataInit>:

LoopCopyDataInit:
ldr r0, =_sdata
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <LoopFillZerobss+0x1a>)
ldr r3, =_edata
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <LoopFillZerobss+0x1e>)
adds r2, r0, r1
 8001a52:	1842      	adds	r2, r0, r1
cmp r2, r3
 8001a54:	429a      	cmp	r2, r3
bcc CopyDataInit
 8001a56:	f4ff aff6 	bcc.w	8001a46 <CopyDataInit>
ldr r2, =_sbss
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <LoopFillZerobss+0x22>)
b LoopFillZerobss
 8001a5c:	f000 b803 	b.w	8001a66 <LoopFillZerobss>

08001a60 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
movs r3, #0
 8001a60:	2300      	movs	r3, #0
str r3, [r2], #4
 8001a62:	f842 3b04 	str.w	r3, [r2], #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
ldr r3, = _ebss
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <LoopFillZerobss+0x26>)
cmp r2, r3
 8001a68:	429a      	cmp	r2, r3
bcc FillZerobss
 8001a6a:	f4ff aff9 	bcc.w	8001a60 <FillZerobss>

/* Call the clock system intitialization function.*/
bl SystemInit
 8001a6e:	f7ff ff5d 	bl	800192c <SystemInit>
/* Call static constructors */
bl __libc_init_array
 8001a72:	f000 f80f 	bl	8001a94 <__libc_init_array>
/* Call the application's entry point.*/
bl main
 8001a76:	f7ff febb 	bl	80017f0 <main>
bx lr
 8001a7a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
movs r1, #0
b LoopCopyDataInit

CopyDataInit:
ldr r3, =_sidata
 8001a7c:	08001af4 	.word	0x08001af4
ldr r3, [r3, r1]
str r3, [r0, r1]
adds r1, r1, #4

LoopCopyDataInit:
ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
ldr r3, =_edata
 8001a84:	20000020 	.word	0x20000020
adds r2, r0, r1
cmp r2, r3
bcc CopyDataInit
ldr r2, =_sbss
 8001a88:	20000020 	.word	0x20000020
FillZerobss:
movs r3, #0
str r3, [r2], #4

LoopFillZerobss:
ldr r3, = _ebss
 8001a8c:	20000060 	.word	0x20000060

08001a90 <ADC1_IRQHandler>:
* @retval : None
*/
.section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
b Infinite_Loop
 8001a90:	f7ff bffe 	b.w	8001a90 <ADC1_IRQHandler>

08001a94 <__libc_init_array>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	4e0d      	ldr	r6, [pc, #52]	; (8001acc <__libc_init_array+0x38>)
 8001a98:	4d0d      	ldr	r5, [pc, #52]	; (8001ad0 <__libc_init_array+0x3c>)
 8001a9a:	2400      	movs	r4, #0
 8001a9c:	1bad      	subs	r5, r5, r6
 8001a9e:	10ad      	asrs	r5, r5, #2
 8001aa0:	d005      	beq.n	8001aae <__libc_init_array+0x1a>
 8001aa2:	00a3      	lsls	r3, r4, #2
 8001aa4:	58f3      	ldr	r3, [r6, r3]
 8001aa6:	3401      	adds	r4, #1
 8001aa8:	4798      	blx	r3
 8001aaa:	42a5      	cmp	r5, r4
 8001aac:	d1f9      	bne.n	8001aa2 <__libc_init_array+0xe>
 8001aae:	f000 f815 	bl	8001adc <_init>
 8001ab2:	4e08      	ldr	r6, [pc, #32]	; (8001ad4 <__libc_init_array+0x40>)
 8001ab4:	4d08      	ldr	r5, [pc, #32]	; (8001ad8 <__libc_init_array+0x44>)
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	1bad      	subs	r5, r5, r6
 8001aba:	10ad      	asrs	r5, r5, #2
 8001abc:	d005      	beq.n	8001aca <__libc_init_array+0x36>
 8001abe:	00a3      	lsls	r3, r4, #2
 8001ac0:	58f3      	ldr	r3, [r6, r3]
 8001ac2:	3401      	adds	r4, #1
 8001ac4:	4798      	blx	r3
 8001ac6:	42a5      	cmp	r5, r4
 8001ac8:	d1f9      	bne.n	8001abe <__libc_init_array+0x2a>
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
	...

08001adc <_init>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae2:	bc08      	pop	{r3}
 8001ae4:	469e      	mov	lr, r3
 8001ae6:	4770      	bx	lr

08001ae8 <_fini>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr
